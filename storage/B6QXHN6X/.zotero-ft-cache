SIGGRAPH 2012 Course Notes FEM Simulation of 3D Deformable Solids: A practitionerâs guide to theory, discretization and model reduction. Part 2: Model Reduction (version: August 4, 2012) Jernej BarbiË c
Course notes URL: http://www.femdefo.org

1

Introduction to model reduction

Figure 1: Model reduction overview: a high-dimensional ordinary differential equation is approximated with a projection to a low-dimensional space. Model reduction (also called dimensional model reduction, or model order reduction (MOR)) is a technique to simplify the simulation of dynamical systems described by differential equations. The idea is to project the original, high-dimensional, state-space onto a properly chosen low-dimensional subspace to arrive at a (much) smaller system having properties similar to the original system (see Figure 1). Complex systems can thus be approximated by simpler systems involving fewer equations and unknown variables, which can be solved much more quickly than the original problem. Such projection-based model reduction appears in literature under the names of Principal Orthogonal Directions (POD) Method, or Subspace Integration Method, and it has a long history in the engineering and applied mathematics literature [29]. See [27] and [33] for good overviews of model reduction applied to linear and nonlinear problems, respectively. Model reduction has been used extensively in the ï¬elds of control theory, electrical circuit simulation, computational electromagnetics and microelectromechanical systems [28]. Most model reduction techniques in these ï¬elds, however, aim at linear systems, and linear time-invariant systems in particular, e.g., small perturbations of voltages in some complex nonlinear circuit. Another common characteristic of these applications is that both the input and output are low-dimensional, i.e., one may want to study how the voltage level at some circuit location depends on the input voltage at another location, in a complex nonlinear circuit. In computer graphics, however, one is often interested in nonlinear systems (e.g., large deformations of objects) that exhibit interesting, very visible, dynamics. The output in computer graphics is usually high-dimensional, e.g., the deformation of an entire 3D solid object, or ï¬uid velocities sampled on a high-resolution grid. For these reasons, many conventional reduction techniques do not immediately apply to computer graphics problems.

1.1

Survey of POD-based model reduction in computer graphics

The initial model reduction applications to deformable object simulation in computer graphics investigated linear FEM deformable objects [32, 18, 14]. These models are very fast, but are (due to linear Cauchy 1

strain) accurate only for small deformations and produce visible artifacts under large deformations. In order to avoid such artifacts, it is necessary to apply reduction to nonlinear elasticity. For real-time geometrically nonlinear deformable objects (quadratic Green-Lagrange strain), such an approach was presented by BarbiË and James [6, 4], who also gave an automatic approach to select a quality low-dimensional c basis, using modal derivatives. An and colleagues [2] demonstrated how to efï¬ciently support arbitrary nonlinear material models. Model reduction has also been used for fast sound simulation [17, 10] and to simulate frictional contact between deformable objects [21]. For deformable FEM ofï¬ine simulations, Kim and James [23] applied online model reduction to adaptively replace expensive full simulation steps with reduced steps, which made it possible to throttle the simulation costs at run-time. Treuille and colleagues applied model reduction to ï¬uid simulation in computer graphics [39]. Wicke and colleagues [41] improved Treuilleâs ï¬uid method to support reduced ï¬uid simulations on several (inter-connected) domains with specialized basis functions on each domain (domain decomposition for ï¬uids). Recently, BarbiË and c Zhao [8] demonstrated a domain decomposition method for open-loop solid deformable models, by employing gradients of polar decomposition rotation matrices, whereas Kim and James [24] tackled a similar problem using inter-domain spring forces.

2

Linear modal analysis

Figure 2: Linear modes for a cantilever beam. Although elastic objects can in principle deform arbitrarily, they tend to have a bias in deforming into certain characteristic, low-energy shapes. Most of us will remember the high-school physics example of a string stretched between two walls (or, say, a violin string), where one studies the natural frequencies Ïi of the string, together with their associated shapes, typically of the form sin(Ïi x ) and cos(Ïi x ). The same intuition carries over to arbitrary three-dimensional elastic objects deforming by a small amount around their rest conï¬guration, whether it be a metal wire, a thin shell (e.g., cloth on a character), or a solid 3D tet mesh model of a skyscraper. The low-frequency modes are the deformations, which, for a given amount of displaced mass (or volume), subject to speciï¬c boundary conditions such as ï¬xed vertices, increase the elastic strain energy of the object by the least amount. In other words, they are the shapes with the least resistance to deformation. How are the modes and frequencies computed? One has to ï¬rst form the system mass and stiffness matrices M â R3nÃ3n and K â R3nÃ3n , where n is the number of mesh vertices. The speciï¬c approach to compute M and K depends on each particular mechanical system. For example, the tet skyscraper may be modeled using 3D FEM elasticity, whereas for a cloth model one may compute M by lumping the mass at the vertices, and set K to the gradient of the internal cloth forces (in the rest conï¬guration), computed, say, using the Baraff-Witkin cloth model [3]. Once M and K are known, one has to prescribe boundary conditions, i.e., specify how the object is constrained. The modes and frequencies greatly depend on this choice. It is possible to set no boundary conditions, in which case one obtains freeï¬ying modes. In order to compute the modes, one forms matrices M and K where the rows and columns corresponding to the ï¬xed degrees of freedom have been removed from M and K. Then, one solves the generalized eigenvalue problem Kx = Î»Mx. (1) Matrices M and K are typically large and sparse. One can solve the eigenvalue problem, say, using the Arnoldi iteration implemented by the ARPACK eigensolver [26]. This solver is free, and has performed very well in various model reduction computer graphics projects by Jernej BarbiË and other researchers in c the ï¬eld. Because M and K are symmetric positive-deï¬nite (in typical applications, e.g., deformable object 2

in the rest conï¬guration), the eigenvalues are real and non-negative. One seeks the smallest eigenvalues Î»i and their associated eigenvectors Ïi , i = 1, 2, . . . , k, where k is the number of modes to be retained. For objects with no constrained vertices (free-ï¬ying objects), the ï¬rst six eigenvalues are zero and the modes correspond to rigid translations and inï¬nitesimal rotations; these modes are typically discarded. The eigenvalues are squares of the natural frequencies of vibration, Î»i = Ïi2 , and the eigenvectors Ïi are the modes. It should be noted that one typically inserts zeros into Ïi at locations of ï¬xed degrees of freedom, so that the resulting vector is of length 3n. In order to check that the eigensolver was successful, it is common to visualize the individual modes, by animating them as Ïi sin(Ïi t), where t is time. The different modal vectors are typically assembled into a linear modal basis matrix U = [Ï1 , . . . , Ïk ] â R3nÃk .

2.1

Small deformation simulation using linear modal analysis

Small deformations u â R3n (n is the number of mesh vertices) follow the equation Â¨ Ë M u + D u + Ku = f , (2)

where M, D, K â R3nÃ3n are the mass, damping and stiffness matrices, respectively, and f â R3n are the external forces [35]. Equation 2 is a linear, high-dimensional ordinary differential equation, obtained by applying the Finite Element Method (FEM) to the linearized partial differential equations of elasticity. It is most commonly applied to 3D solids, but can also model shells and strands. It is only accurate under small deformations; very visible artifacts appear under large deformations. Equation 2 models the object at full resolution (no reduction), which means that it incorporates transient effects such as (localized) waves traveling across the object. It is often employed, for example, to perform earthquake simulation, typically using supercomputers on large meshes involving millions of degrees of freedom [1]. For realtime applications, the computational costs of timestepping Equation 2 may be prohibitive. Instead, one can perform model reduction, by approximating the deformation vector u as u = Uz, where z â Rk is a vector of modal amplitudes (typically k 3n). If we choose damping to be a linear combination of M and K, D = Î±M + Î²K, for some scalars Î±, Î² > 0 (this is called Rayleigh damping), and pre-multiply Equation 2 by U T , Equation 2 projects to k independent one-dimensional ordinary differential equations Â¨ Ë zi + (Î± + Î²Î»i )zi + Î»i zi = ÏiT f , (3)

for i = 1, . . . , k. Here, we have used the fact that the modes are generalized eigenvectors KÏi = Î»i MÏi , and are therefore mass-orthonormal, ( MÏi ) T Ïj = 0 when i = j, and ( MÏi ) T Ïi = 1 for all i. The onedimensional equations given in (3) can be timestepped independently. This can be done very efï¬ciently (see, e.g., [18]). The full deformation can be reconstructed by multiplying u = Uz. This multiplication is fast when k is small (a few hundred modes). It can also be performed very efï¬ciently in graphics hardware [18]. It can be shown that as k â 3n, this approximation converges to the solution of Equation 2. This property is very useful, as it makes it possible to trade computation accuracy for speed.

2.2

Application to sound simulation

Sound originates from mechanical vibration of objects. These mechanical vibrations excite the surrounding medium (typically air or water), and the pressure waves then propagate to the listener location. The object mechanical vibrations are usually modeled using FEM and the equations of elasticity, whereas the pressure propagation is usually modeled by the wave equation. There are varying degrees of approximation that can be applied to each of these two tasks. Because deformation amplitudes in sound applications are small, linear elasticity is often employed for their simulation [31, 17]. However, richer, nonlinear sound can be produced using nonlinear simulation [10]. Linear simulation is straightforward and follows the material from Section 2.1. For each object that is to produce sound, one ï¬rst has to set the ï¬xed vertices (if any), and extract the modes. Next, one runs any physical simulation (typically rigid body simulation), producing contact forces. These forces are then used as external forces f for the modal oscillators in Equation 3, producing modal excitations zi (t). It remains to be described how zi (t) are used to generate 3

the sound signal s(t). A very common approach is to assign some meaningful weights wi to each mode, and compute sound as s(t) =
i =1

â wi z i ( t ),

k

(4)

where k is the number of modes. The weights wi can be set to a constant, wi = 1 [31], or they can be made non-constant to model the fact that different modes radiate with different intensities. Alternatively, weights can be made to depend on the listener location x, wi = wi ( x, t), by solving the spatial part of the wave equation (Helmholtz equation) [17, 10]. Such spatially-dependent weights can model diffraction of sound around the scene geometry.

3

Model reduction of nonlinear deformations

Up to this point, we have considered model reduction of linear systems (Equation 2). Linear systems have an important limitation: they produce very visible artifacts under large deformations (see Figure 3). These artifacts can be removed by applying model reduction to the nonlinear equations of a deformable object: Â¨ Ë M u + D u + f int (u) = f . (5)

As detailed in the ï¬rst part of the course, the nonlinearity in the internal forces f int (u) arises due to largedeformation strain (geometric nonlinearity), and due to nonlinearities in the strain-stress relationship. How to apply model reduction to Equation 5? We proceed in the same way as with linear systems; we assume the availability of a basis U â R3nÃr (r is basis size) and approximate u = Uz, where z â Rr is the vector of reduced coordinates. After projection by U T , we obtain Â¨ Ë z + U T DU z + U T f int (Uz) = U T f . (6)

This equation determines the dynamics of the reduced coordinates z = z(t) â Rr , and therefore also the dynamics of u(t) = Uz(t). Equation 5 is similar to Equation 3, except that it is nonlinear and the components of z are not decoupled. At this point, two questions emerge: (1) How can we timestep Equation 6? (2) How do we choose the basis U?

Figure 3: Model reduction applied to a linear and nonlinear system.

3.1

Timestepping the reduced nonlinear equations of motion

In order to timestep Equation 5, one needs to evaluate the reduced internal forces, fËint = U T f int (Uz) for arbitrary conï¬gurations z â Rr . Furthermore, as equations of elasticity are typically stiff, implicit integration is required, necessitating a further derivative of fËint , the reduced tangent stiffness matrix d fËint Ë K (z) = = U T K (Uz)U â RrÃr . dz 4 (7)

Here K (u) = d f int /du is the (unreduced) tangent stiffness matrix in conï¬guration u. Note that in general, the term fËint cannot be algebraically simpliï¬ed; its evaluation must proceed by ï¬rst forming Uz, then Ë evaluating f int (Uz) and ï¬nally forming a projection by pre-multiplying with U T . Evaluation of K (z) is Ë even more complex. Once fËint (z) and K (z) are known, one can use any implicit integrator to timestep the system (see [4] for details). The key important fact is that this integrator will need to solve a dense r Ã r linear system as opposed to a sparse 3n Ã 3n system as is the case with implicit integration of unreduced systems. Since r 3n, this usually leads to signiï¬cant computational savings. Ë How to evaluate fËint (z) and K (z) in practice? If the simulation is geometrically nonlinear, but materially linear, then it can be shown [4] that each component of f int (u) is a cubic polynomial in the components of u [4]. Consequently, fËint are cubic polynomials in the components of z. Note that this is a manifestation of a more general principle: for any polynomial function G (u), its projection U T G (Uz) will be a polynomial in z, of the same degree. Treuille and colleagues, for example, exploited this fact with quadratic advection forces for reduced ï¬uids [39]. For geometrically nonlinear materials, one can precompute the coefï¬cients of the cubic polynomials. As there are r components of the reduced force, each of which is a cubic polynomial in r variables, the necessary storage is O(r4 ). For moderate values of r (r < 30), this storage Ë is manageable (under one megabyte; details are in [4]). Because the reduced stiffness matrix K (z) is the gradient of fËint with respect to z, the reduced stiffness matrix is a quadratic function in z with coefï¬cients directly related to those of the reduced internal forces. For exact evaluation of internal forces and tangent stiffness matrices, all polynomial terms must be âtouchedâ exactly once. Therefore, the cost of evaluation of reduced internal forces and tangent stiffness matrices is O(r4 ), whereas the cost of implicit integration is O(r3 ). For general materials, An and colleagues [2] have designed a fast approximation scheme which can decrease the reduced internal force and stiffness matrix computation time to O(r2 ) and O(r3 ), respectively. For simulations that use implicit integration, the runtime complexity is therefore O(r3 ). The method works by observing that the elastic strain energy E(z) and internal forces fËint (z), for reduced coordinates z, are obtained by integration of the energy density Î¨( X, z) and its gradient over the entire mesh: E(z) = fËint (z) =
â¦ â¦

Î¨( X, z)dV, âÎ¨( X, z) dV. âz

(8) (9)

As opposed to evaluating fËint using the exact formula fËint = U T f int (Uz), An and colleagues approximate the integral in (9) using numerical quadrature. In order to do so, they determine positions Xi â â¦, and weights wi â R, such that fËint (z) =
T âÎ¨( X, z) dV â â wi g( Xi , z), âz i =1

â¦

(10) (11)

Ë K (z) â

i =1

â wi

T

âg( Xi , z) , âz

where g( X, z) = âÎ¨( X, z)/âz. At runtime, given a value z, one then only has to evaluate g( Xi , z) and âg( Xi , z)/âz, for i = 1, . . . , T and sum the terms together. The number of quadrature points T is usually set to T = r. Positions and weights are obtained using a training process. Given a set of representative âtrainingâ reduced coordinates z(1) , . . . , z( N ) , the method computes positions and weights that best approximate the reduced force fËint for these training datapoints. To avoid overï¬tting and to keep the stiffness matrix symmetric positive-deï¬nite, the weights wi are chosen to be non-negative, using nonnegative least squares (NNLS) [25]. The positions Xi are determined using a greedy approach, designed to minimize the NNLS error residual (details in [2]).

5

3.2

Choice of basis

The matrix U is a time-invariant matrix specifying a basis of some r-dimensional (r 3n) linear subspace of R3n . The basis is assumed to be mass-orthonormal, i.e., U T MU = I. If this is not the case, one can easily convert U to such a basis using a mass-weighted Gramm-Schmidt process. For each ï¬xed r > 1, there is an inï¬nite number of possible choices for the linear subspace and for its basis. Good subspaces are low-dimensional spaces which well-approximate the space of typical nonlinear deformations. The choice of subspace depends on geometry, boundary conditions and material properties. Selection of a good subspace is a non-trivial problem. We now present two choices: basis from simulation data (âPOD basisâ), and basis from modal derivatives. The former requires pre-simulation (using a general deformable solver), whereas the latter can create a basis automatically without pre-simulation. 3.2.1 Basis from simulation data (âPOD basisâ)

In model reduction literature, a very common approach to create a basis for nonlinear systems is to obtain some âsnapshotsâ of the system, u1 , u2 , . . . , u N , and then use statistical techniques to extract a representative low-dimensional space. The snapshots can be obtained by running a full (unreduced) simulation, or using measurements of a real system. Given the snapshots, one obtains the subspace U by performing singular value decomposition (SVD) on A = [u1 , u2 , . . . , u N ], A = UÎ£V T , (12)

and retains the columns of U corresponding to the largest r singular values. In practice, it is advantageous to apply SVD not with respect to the standard inner product in R3n , but with respect to a mass-weighted inner-product < Mx, y > (mass-PCA; see [4] for details). It is challenging to measure transient volumetric deformation ï¬elds with high accuracy [22, 9]. Therefore, large-deformation model reduction applications in computer graphics have so far relied on simulation data, or on modal derivatives, which we describe next. 3.2.2 Modal derivatives

Linear modal analysis (Section 2) provides a quality deformation basis for small deformations away from the rest pose. The linear modes, however, are not a good basis for large deformations, because they lack the deformations that automatically âactivateâ in a nonlinear system. For example, when a cantilever beam deï¬ects sideways in the direction of the ï¬rst linear mode, it also simultaneously compresses, in a very speciï¬c, non-uniform way. This happens automatically in a nonlinear system. A linear basis, however, lacks the proper (non-uniform) compression mode, and therefore the system projected onto the linear basis will be stiff (it âlocksâ). In practice, such locking manifests as a rapid loss of energy (numerical damping), and as an increase in the natural oscillation frequencies of the system, a phenomenon also observed with model reduction of electrical circuits [13]. One could attempt to resolve these issues by retaining a larger number of linear modes. Such an approach is, however, not very practical with nonlinear systems, because a very large number of modes would be needed in practice, whereas the time to solve the reduced system for implicit integration scales as O(r3 ). These problems can be remedied using modal derivatives: deformations that naturally co-appear in a nonlinear system when the system is excited in the direction of linear modes. By forming a basis that consists of both linear modes and their modal derivatives, we arrive at a compact, low-dimensional basis, that can represent large deformations and that can be computed purely based on the mesh geometry and material properties; no advance knowledge of run-time forcing or pre-simulation is required. We will illustrate modal derivatives for deformable objects that are sufï¬ciently constrained so that they do not possess rigid degrees of freedom, but modal derivatives can also be computed for unconstrained systems. Under a static load f , the system will deform into a deformation u, where u satisï¬es the unreduced static equation f int (u) = f . Consider what happens if we statically load the system into the direction of

6

Figure 4: Modal derivatives for a cantilever beam. linear modes. In particular, suppose we apply a static force load MUlin Îp, where M is the mass matrix, Ulin = [Ï1 , Ï2 , . . . , Ïk ] is the linear modal matrix, Î is the diagonal matrix of squared frequencies 2 2 diag(Ï1 , . . . , Ïk ), and p â Rk is some parameter that controls the strength of each mode in the load. It can be easily veriï¬ed that these are the force loads which, for small deformations, produce deformations within the space spanned by the linear modes. Given a p, we can solve the nonlinear equation f int (u) = MUlin Îp for u, i.e., we can deï¬ne a unique function u = u( p) (mapping from Rk to R3n , and C â differentiable), such that f int (u( p)) = MUlin Îp, (13) for every p â Rk in some sufï¬ciently small neighborhood of the origin in Rk . Can we compute the Taylor series expansion of u in terms of p? By differentiating Equation 13 with respect to p, one obtains â f int âu = MUlin Î, âu âp (14)

which is valid for all p in some small neighborhood of the origin of Rk . In particular, for p = 0k , we get K âu = MUlin Î. Therefore, âu = Ulin , i.e., the ï¬rst-order response of the system are the linear modes, as âp âp expected. To compute the second order derivatives of u, we differentiate Equation 14 one order further by p, which, when we set p = 0k , gives us K â2 u = â( H : Ïj )Ïi . âpi âp j (15)

Here, H is the Hessian stiffness tensor, the ï¬rst derivative of the tangent stiffness matrix, evaluated at u = 0 (see [4]). The deformation vectors â2 u Î¦ij = (16) âpi âp j are called modal derivatives. They are symmetric, Î¦ij = Î¦ ji , and can be computed from Equation 15 by solving linear systems with a constant matrix K (stiffness matrix of the origin). Because K is constant and symmetric positive-deï¬nite, it can be pre-factored using Cholesky factorization. One can then rapidly (in parallel if desired) compute all the modal derivatives, 0 â¤ i â¤ j < k. Note that the modal derivatives are, by deï¬nition, the second derivatives of u = u( p). The second-order Taylor series expansion is therefore u( p) =

i =1

â Î¨i pi + 2 â â Î¦ij pi p j + O( p3 ).
i =1 j =1

k

1

k

k

(17)

7

Figure 5: Extreme shapes captured by modal derivatives: Although modal derivative are computed about the rest pose, their deformation subspace contains sufï¬cient nonlinear content to describe large deformations. Left: Spoon (k = 6, r = 15) is constrained at far end. Right: Beam (r = 5, twist angle=270â¦ ) is simulated in a subspace spanned by âtwistâ linear modes and their derivatives Î¨4 , Î¨9 , Î¦44 , Î¦49 , Î¦99 . The modal derivatives, together with the linear modes, therefore span the natural second-order system response for large deformations around the origin. Creating the basis U: Equation 17 suggests that the linear space spanned by all vectors Î¨i and Î¦ij is a natural candidate for a basis (after mass-Gramm-Schmidt mass-orthonormalization). However, its dimension k + k(k + 1)/2 may be prohibitive for real-time systems. In practice, we obtain a smaller basis by scaling the modes and derivatives according to the eigenvalues of the corresponding linear modes, and applying mass-PCA on the âdatasetâ Î»1 j Î¨ | j = 1, . . . , k Î»j

âª

Î»2 ij 1 Î¦ | i â¤ j; i, j = 1, . . . , k . Î»i Î» j

(18)

The scaling puts greater weight on dominant low-frequency modes and their derivatives, which could otherwise be masked by high-frequency modes and derivatives.

Figure 6: Reduced simulations: Left: Model reduction enables interactive simulations of nonlinear deformable models. Right: reduction also enables fast large-scale multibody dynamics simulations, with nonlinear deformable objects undergoing free ï¬ight motion. Collisions among the 512 baskets were resolved using BD-Trees [20].

8

4

Model reduction and domain decomposition

Model reduction as described in the previous section is global: it reduces the entire object using a single, global basis. Unless r is large, it is difï¬cult to capture local detail using such a basis. Because the computation time grows at least as O(r3 ) (time to solve the dense r Ã r system [2]), large values of r (several hundreds of modes) are not practical. It is therefore natural to ask if the object can somehow be decomposed into smaller pieces, each of which is reduced separately, and the pieces are then connected into a global system. This is the idea of domain decomposition, a classical technique in applied mathematics and engineering. In engineering applications, however, the deformations are typically small. In computer graphics, we have to accommodate large deformations (e.g., rotations) in the interfaces joining two domains, which means that standard domain decomposition techniques cannot simply be extended to computer graphics problems. In computer graphics, domain decomposition for deformable models has initially been applied to small domain deformations and with running times dependent on the number of domain and interface vertices. For example, a linear quasi-static application using Greenâs functions has been presented in [19], whereas Huang and colleagues [15] exploited redundancy in stiffness matrix inverses to combine linear FEM with domain decomposition. Recently, domain decomposition under large deformations has received signiï¬cant attention in computer graphics literature. BarbiË and Zhao [8] demonstrated a domain decomposition c method by employing gradients of polar decomposition rotation matrices, whereas Kim and James [24] tackled a similar problem using inter-domain spring forces.

Figure 7: Model reduction with a large number of localized degrees of freedom: Left: nonlinear reduced Ë simulation of an oak tree (41 branches (r = 20), 1394 leaves (r = 8), d = 1435 domains, r = 11, 972 total DOFs) running at 5 fps. Right: simulation detail.

5

Model reduction and control

Optimal control problems occur frequently in computer animation. Often, they are cast as space-time optimization problems involving human motion [34], ï¬uids [40, 30] and deformations [42]. With optimal control of deformable objects, one seeks a sequence of forces (control vectors) f i â R3n , i = 0, ..., T â 1, such that the resulting deformations (state vectors) ui â R3n , i = 0, ..., T â 1, obtained by timestepping Equation 5 forward in time under those forces, minimize some scalar objective E(u0 , ..., u T â1 ). The scalar objective typically includes terms such as magnitude of control vectors, deviation from some reference trajectory, deviation from keyframes at speciï¬c moments of time, and magnitude of deformation velocities and accelerations. The forces are sometimes expressed as f i = Bgi , where the matrix B â R3nÃm gives the control basis. The problem is said to be underactuated when m < 3n and fully actuated for m = 3n. Underactuated problems can model objects that can propel themselves using âmusclesâ, and are generally much more difï¬cult to solve than fully actuated problems. Because optimal control problems compound both space and time, they have a very high dimensionality: there are 3nT unknowns (the control vectors f i ) in the optimal control problem. Such a huge state space leads to optimization problems that diverge, converge to local minima, or take a very long time to converge to a plausible solution.

9

Figure 8: Fast authoring of animations with dynamics [5]: This soft-body dinosaur sequence consists of ï¬ve walking steps, and includes dynamic deformation effects due to inertia and impact forces. Each step was generated by solving a space-time optimization problem, involving 3 user-provided keyframes, and requiring only 3 minutes total to solve due to a proper application of model reduction to the control problem. Unreduced optimization took 1 hour for each step. The four images show output poses at times corresponding to four consecutive keyframes (out of 11 total). For comparison, the keyframe is shown in the top-left of each image. Model reduction is very beneï¬cial to optimal control because it greatly reduces the state and control size. The states ui are replaced with the reduced states zi , the control vectors f i are replaced with the reduced internal forces fËi , and Equation 5 is replaced with its reduced version (Equation 6). Although such a reduced optimal control problem only approximates the original problem, its dimensionality is only rT 3nT; therefore, the occurrence of local minima is greatly decreased. Optimal reduced forces can be found faster than unreduced forces, because one can rapidly explore the solution space by running many reduced forward simulations and by quickly evaluating the reduced objective gradient [5] (Figure 8). Standard controllers such as the linear-quadratic regulator [37] are impractical with deformable objects as they involve dense 3n Ã 3n gain matrices. With reduction, however, such control becomes feasible as the gain matrices are now much smaller (r Ã r). BarbiË and PopoviÂ´ [7] exploited such a combination of c c LQR control and model reduction for real-time tracking of nonlinear deformable object simulations, using minimal (âgentleâ) forces.

6

Free software for model reduction

The implementation of [6] (by Jernej BarbiË ) is freely available on the web (BSD license) at: c http://www.jernejbarbic.com/code. It includes 1. a precomputation utility to compute linear modes (Equation 1) and modal derivatives (Equation 15), and to construct the simulation basis U (mass-PCA applied to the dataset of Equation 18); optionally, the basis can also be computed from pre-existing simulation data (âPOD basisâ), 2. a precomputation utility to compute the cubic polynomial coefï¬cients for reduced internal forces Ë fËint and stiffness matrices K (Section 3.1), for isotropic geometrically nonlinear material model (St. Venant-Kirchhoff material) 3. an efï¬cient C/C++ library to timestep the reduced model precomputed in the above steps 1., 2. (Equation 6), and an example run-time driver. The code shares basic classes with Vega, a general-purpose simulator for FEM nonlinear 3D deformable objects (including deformable dynamics), also available at the same URL (BSD license).

10

Figure 9: Precomputation utility to compute linear modes, derivatives, basis for large deformations, and cubic polynomial coefï¬cients. Freely available (BSD license) at http://www.jernejbarbic.com/code .

7

Deformation warping

As outlined in Section 3, linear modal analysis (Section 2) leads to visible artifacts under large deformations, and these artifacts can be removed by applying model reduction to the nonlinear equations of motion. Deformation warping is an alternative, purely geometric, approach to remedy the same problem. The idea is to keep Equation 2 as the underlying dynamic equation, but to post-process the resulting deformations u using a geometric âï¬lterâ that removes large-deformation artifacts. For example, given a tetrahedral mesh, warping establishes a mapping that maps linearized deformations u â R3n (away from the rest conï¬guration) to âgood-lookingâ large deformations q = W (u) â R3n (also away from the rest conï¬guration). The user is only shown the corrected deformations q. Warping is very robust. For example, twisting deformations, with local rotations as large as several complete 360 degrees cycles, can be easily accommodated. The underlying dynamics, however, is still linear, and this is visible with largedeformation motion as linear deformations essentially follow a sinusoidal curve, sin(Ïi t). In contrast, objects simulated using nonlinear methods usually stiffen under large deformations, and therefore spend a smaller percentage of the oscillation cycle time at large deformations. The idea that modes could be warped to correct large deformation artifacts was ï¬rst observed by Choi and Ko [11]. They noticed that, by taking the curl of each modal vector, one can derive per-vertex inï¬nitesimal rotations due to the activation of each mode. These rotations can then be integrated in time, resulting in large deformations free of artifacts. Although not surveyed here in detail, their approach is fast, and laid the foundation for other warping methods developed later.

7.1

Rotation-strain coordinate warping

In these notes, we describe a recent efï¬cient ï¬avor of warping, the rotation-strain coordinate warping [16]. Let Gj â R9Ã3n be the discrete gradient operator of tet j, i.e., deformation gradient of tet j under deformation u â R3n equals I + Gj u. Decompose the 3 Ã 3 matrix Gj u into a symmetric and antisymmetric component, Gj u = Gj u + ( Gj u)T Gj u â ( Gj u)T + . 2 2 (19)

We can then denote the upper triangle of the symmetric part as j â R6 , and the skew-vector corresponding to the antisymmetric part as Ï j â R3 . We then assemble [ j , Ï j ] for all tets into a vector y(u) â R9#tets ; 11

Figure 10: Warping corrects linearization artifacts under large deformations. denote y ,j = j and yÏ,j = Ï j . Vector y forms the rotation-strain coordinates of the mesh. Given a linearized deformation u, we then postulate that we should seek a deformation q so that the deformation gradient inside tet j equals (20) exp yÏ,j I + sym(y ,j ) . Ë Here, sym( x ) is the 3 Ã 3 symmetric matrix corresponding to its upper-triangle x â R6 , x is the 3 Ã 3 Ë skew-symmetric cross-product matrix corresponding to vector x â R3 (xv = x Ã v for all v â R3 ), and exp is the matrix exponential function [36]. This condition cannot be satisï¬ed for all the tets simultaneously. Instead, given u, we ï¬nd a deformation q under which the deformation gradients are as close as possible to those given by Equation 20. This can be done by solving the following least-squares problem:
#tets

arg min
q

j =1

â Vj || I + Gj q â exp
subject to

yÏ,j

I + sym(y ,j ) ||2 , F

(21) (22)

pinned vertices

where || || F denotes the Frobenius norm of a 3 Ã 3 matrix, and Vj is the volume of tet j. The pinned vertices are the vertices where the model is rooted to the ground (boundary conditions). For free-ï¬ying objects, a constraint can be formed that keeps the center of mass unmodiï¬ed. The objective function in Equation 21 is quadratic in q, and can be rewritten as (23) ||VGq â b||2 , 2 â â â for V = diag( V1 , V1 , . . . , V#tets ) (each entry repeated 9x), and where G â R9#tetsÃ3n is the gradient matrix assembled from all Gj . The nine-block of vector b â R9#tets corresponding to tet j, expressed as a row-major 3 Ã 3 matrix, equals bj = Vj exp(yÏ,j )( I + sym(y ,j )) â I . (24)

In a typical tet mesh, there are more tets than vertices, therefore, the optimization problem is overconstrained. The minimization can be performed via Lagrange multipliers, by solving L dT d 0 q Î»

=

(VG )T b 0

,

(25)

where L = G T V 2 G, and where d corresponds to the pinned input vertices (note: an implementation can simply remove the rows-columns from L; this is equivalent). Matrix L is called the discrete Laplacian of the mesh. It only depends on the input mesh geometry, and not on U or u. The system matrix in Equation 25 is sparse and constant, and can be pre-factored, so warping can be performed efï¬ciently at runtime.

12

7.2

Warping for triangle meshes

Triangle meshes are commonly employed in computer graphics, say, for simulation of thin shells and cloth. Such physical systems also produce the mass matrix M and stiffness matrix K. Therefore, the small deformation analysis (Equation 2) and model reduction (as in Equation 3) apply also to such problems. In order to apply warping, however, we must deï¬ne deformation gradients for each triangle. As observed by Sumner and PopoviÂ´ [38], the three vertices of a triangle before and after deformation do not fully c determine the afï¬ne transformation since they do not establish how the space perpendicular to the triangle deforms. They resolve this issue by adding a (ï¬ctitious) fourth vertex v4 , v4 = v1 +

( v2 â v1 ) Ã ( v3 â v1 ) , |(v2 â v1 ) Ã (v3 â v1 )|

(26)

where v1 , v2 , v3 are the triangle vertices. Vertices v1 , v2 , v3 , v4 deï¬ne a tetrahedron. Let v1 , v2 , v3 denote the deformed vertex positions; then, we can use (26) to compute the deformed ï¬ctitious vertex v4 . The deformation gradient F for the triangle equals ï£® F = ï£° v2 â v1 v3 â v1 ï£¹ï£® v4 â v1 ï£» ï£° v2 â v1 v3 â v1 ï£¹ â1 v4 â v1 ï£» . (27)

Given the deformation gradient, warping then proceeds in the same way as described for tetrahedral meshes in previous sections. A more principled version of triangle mesh warping has been presented by [12].

8

Acknowledgements

This work was sponsored by the National Science Foundation (CAREER-53-4509-6600). I would like to thank Eftychios Sifakis and Yili Zhao for helpful suggestions.

References
[1] V. Akcelik, J. Bielak, G. Biros, I. Epanomeritakis, A. Fernandez, O. Ghattas, E. J. Kim, J. Lopez, D. OâHallaron, T. Tu, and J. Urbanic. High-resolution forward and inverse earthquake modeling on terascale computers. In Proceedings of ACM/IEEE SC2003, 2003. [2] S. S. An, T. Kim, and D. L. James. Optimizing cubature for efï¬cient integration of subspace deformations. ACM Trans. on Graphics, 27(5):165:1â165:10, 2008. [3] D. Baraff and A. P. Witkin. Large Steps in Cloth Simulation. In Proc. of ACM SIGGRAPH 98, pages 43â54, July 1998. [4] J. BarbiË . Real-time Reduced Large-Deformation Models and Distributed Contact for Computer Graphics and c Haptics. PhD thesis, Carnegie Mellon University, Aug. 2007. [5] J. BarbiË , M. da Silva, and J. PopoviÂ´ . Deformable object animation using reduced optimal control. c c ACM Trans. on Graphics (SIGGRAPH 2009), 28(3):53:1â53:9, 2009. [6] J. BarbiË and D. L. James. Real-time subspace integration for St. Venant-Kirchhoff deformable models. c ACM Trans. on Graphics, 24(3):982â990, 2005. [7] J. BarbiË and J. PopoviÂ´ . Real-time control of physically based simulations using gentle forces. ACM c c Trans. on Graphics (SIGGRAPH Asia 2008), 27(5):163:1â163:10, 2008.

13

[8] J. BarbiË and Y. Zhao. Real-time large-deformation substructuring. ACM Trans. on Graphics (SIGc GRAPH 2011), 30(4):91:1â91:7, 2011. [9] B. Bickel, M. Baecher, M. Otaduy, W. Matusik, H. Pï¬ster, and M. Gross. Capture and modeling of non-linear heterogeneous soft tissue. ACM Trans. on Graphics (SIGGRAPH 2009), 28(3):89:1â89:9, 2009. [10] J. N. Chadwick, S. S. An, and D. L. James. Harmonic Shells: A practical nonlinear sound model for near-rigid thin shells. ACM Transactions on Graphics, 28(5):1â10, 2009. [11] M. G. Choi and H.-S. Ko. Modal Warping: Real-Time Simulation of Large Rotational Deformation and Manipulation. IEEE Trans. on Vis. and Comp. Graphics, 11(1):91â101, 2005. [12] M. G. Choi, S. Y. Woo, and H.-S. Ko. Real-Time Simulation of Thin Shells. Eurographics 2007, pages 349â354, 2007. [13] L. Daniel. Private correspondence with Prof. Luca Daniel, MIT. [14] K. K. Hauser, C. Shen, and J. F. OâBrien. Interactive deformation using modal analysis with constraints. In Proc. of Graphics Interface, pages 247â256, 2003. [15] J. Huang, X. Liu, H. Bao, B. Guo, and H.-Y. Shum. An efï¬cient large deformation method using domain decomposition. Computers & Graphics, 30(6):927 â 935, 2006. [16] J. Huang, Y. Tong, K. Zhou, H. Bao, and M. Desbrun. Interactive shape interpolation through controllable dynamic deformation. IEEE Trans. on Visualization and Computer Graphics, 17(7):983â992, 2011. [17] D. L. James, J. BarbiË , and D. K. Pai. Precomputed acoustic transfer: Output-sensitive, accurate sound c generation for geometrically complex vibration sources. ACM Transactions on Graphics (SIGGRAPH 2006), 25(3), 2006. [18] D. L. James and D. K. Pai. DyRT: Dynamic Response Textures for Real Time Deformation Simulation With Graphics Hardware. ACM Trans. on Graphics, 21(3):582â585, 2002. [19] D. L. James and D. K. Pai. Real Time Simulation of Multizone Elastokinematic Models. In IEEE Int. Conf. on Robotics and Automation, pages 927â932, 2002. [20] D. L. James and D. K. Pai. BD-Tree: Output-Sensitive Collision Detection for Reduced Deformable Models. ACM Trans. on Graphics, 23(3):393â398, 2004. [21] D. M. Kaufman, S. Sueda, D. L. James, and D. K. Pai. Staggered Projections for Frictional Contact in Multibody Systems. ACM Transactions on Graphics, 27(5):164:1â164:11, 2008. [22] A. E. Kerdok, S. M. Cotin, M. P. Ottensmeyer, A. M. Galea, R. D. Howe, and S. L. Dawson. Truth cube: Establishing physical standards for soft tissue simulation. Medical Image Analysis, 7(3):283â291, 2003. [23] T. Kim and D. James. Skipping steps in deformable simulation with online model reduction. ACM Trans. on Graphics (SIGGRAPH Asia 2009), 28(5):123:1â123:9, 2009. [24] T. Kim and D. James. Physics-based character skinning using multi-domain subspace deformations. In Symp. on Computer Animation (SCA), pages 63â72, 2011. [25] C. L. Lawson and R. J. Hanson. Solving Least Square Problems. Prentice Hall, Englewood Cliffs, NJ, 1974. [26] R. Lehoucq, D. Sorensen, and C. Yang. ARPACK Usersâ Guide: Solution of large scale eigenvalue problems with implicitly restarted Arnoldi methods. Technical report, Comp. and Applied Mathematics, Rice Univ., 1997.

14

[27] J.-R. Li. Model Reduction of Large Linear Systems via Low Rank System Gramians. PhD thesis, Massachusetts Institute of Technology, 2000. [28] R.-C. Li and Z. Bai. Structure preserving model reduction using a Krylov subspace projection formulation. Comm. Math. Sci., 3(2):179â199, 2005. [29] J. L. Lumley. The structure of inhomogeneous turbulence. In A.M.Yaglom and V.I.Tatarski, editors, Atmospheric turbulence and wave propagation, pages 166â178, 1967. [30] A. McNamara, A. Treuille, Z. PopoviÂ´ , and J. Stam. Fluid control using the adjoint method. ACM c Trans. on Graphics (SIGGRAPH 2004), 23(3):449â456, 2004. [31] J. F. OâBrien, C. Shen, and C. M. Gatchalian. Synthesizing sounds from rigid-body simulations. In Symp. on Computer Animation (SCA), pages 175â181, 2002. [32] A. Pentland and J. Williams. Good vibrations: Modal dynamics for graphics and animation. Computer Graphics (Proc. of ACM SIGGRAPH 89), 23(3):215â222, 1989. [33] M. Rewienski. A Trajectory Piecewise-Linear Approach to Model Order Reduction of Nonlinear Dynamical Systems. PhD thesis, Massachusetts Institute of Technology, 2003. [34] A. Safonova, J. Hodgins, and N. Pollard. Synthesizing physically realistic human motion in lowdimensional, behavior-speciï¬c spaces. ACM Trans. on Graphics (SIGGRAPH 2004), 23(3):514â521, 2004. [35] A. A. Shabana. Theory of Vibration, Volume II: Discrete and Continuous Systems. SpringerâVerlag, New York, NY, 1990. [36] R. B. Sidje. Expokit: A Software Package for Computing Matrix Exponentials. ACM Trans. on Mathematical Software, 24(1):130â156, 1998. www.expokit.org. [37] R. F. Stengel. Optimal Control and Estimation. Dover Publications, New York, 1994. [38] R. Sumner and J. PopoviÂ´ . Deformation transfer for triangle meshes. ACM Trans. on Graphics (SIGc GRAPH 2004), 23(3):399â405, 2004. [39] A. Treuille, A. Lewis, and Z. PopoviÂ´ . Model reduction for real-time ï¬uids. ACM Trans. on Graphics, c 25(3):826â834, 2006. [40] A. Treuille, A. McNamara, Z. PopoviÂ´ , and J. Stam. Keyframe control of smoke simulations. ACM c Trans. on Graphics (SIGGRAPH 2003), 22(3):716â723, 2003. [41] M. Wicke, M. Stanton, and A. Treuille. Modular bases for ï¬uid dynamics. ACM Trans. on Graphics, 28(3):39:1â39:8, 2009. [42] C. Wojtan, P. J. Mucha, and G. Turk. Keyframe control of complex particle systems using the adjoint method. In Symp. on Computer Animation (SCA), pages 15â23, Sept. 2006.

15

