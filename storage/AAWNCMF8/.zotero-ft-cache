Support Slimming for Single Material Based Additive Manufacturing
Kailun Hu, Shuo Jin, and Charlie C.L. Wang*
Department of Mechanical and Automation Engineering, The Chinese University of Hong Kong, P. R. China *Corresponding Author. Tel: (+852)-39438052. Fax: (+852)-26036002. Email: cwang@mae.cuhk.edu.hk

Figure 1: An orientation-driven shape optimization approach is presented in this paper to show how a given model can be deformed so that the usage of the support structure is signiï¬cantly reduced in AM with a single material. Layered fabrication based on the FDM method (middle left) and on the SLA method (middle right) can both beneï¬t from this work to improve the eï¬ciency of the manufacturing and the quality of the ï¬nished models. Abstract In layer-based additive manufacturing (AM), supporting structures need to be inserted to support the overhanging regions. The adding of supporting structures slows down the speed of fabrication and introduces artifacts onto the ï¬nished surface. We present an orientation-driven shape optimizer to slim down the supporting structures used in single material-based AM. The optimizer can be employed as a tool to help designers to optimize the original model to achieve a more self-supported shape, which can be used as a reference for their further design. The model to be optimized is ï¬rst enclosed in a volumetric mesh, which is employed as the domain of computation. The optimizer is driven by the operations of reorientation taken on tetrahedra with âfacing-downâ surface facets. We formulate the demand on minimizing shape variation as global rigidity energy. The local optimization problem for determining a minimal rotation is analyzed on the Gauss sphere, which leads to a closed-form solution. Moreover, we also extend our approach to create the functions of controlling the deformation and searching for optimal printing directions. Keywords: geometric algorithm, shape optimization, design tool, additive manufacturing

1. Introduction AM has emerged as one of the most important methods for realizing the fast fabrication of freeform solids. Stereolithography Apparatus (SLA) and Fused Deposition Modeling (FDM) are two widely used approaches in AM because they achieve a very good balance between the cost and the quality. Both SLA and FDM fabricate models in a layer-by-layer manner, where supporting structures (also simply called support) need to be added during the manufacturing process. Speciï¬cally, the manufacturing material cannot be deposited on a layer where there is insuï¬cient material on the previous layer. For example, the overhangs with a large hanging area can easily collapse under gravity. The problem is solved by adding supports to the originally designed models (Fig.1). Recent developments in AM allow us to generate the supporting structures automatically (e.g., [1, 2]). 1.1. Problems Caused by Support When the support is fabricated by a dissolvable material which is diï¬erent from the one used to print the designed
Preprint submitted to Computer-Aided Design

model, the support can be removed automatically by a postprocess (ref. [4]). However, for those manufacturing techniques with a single material (e.g., SLA and the low-cost FDM machines), the supporting structure poses many problems to users. Firstly, the volume of the support could be large compared to the designed model, which leads to a signiï¬cant waste of materials, energy and time - our study shows that up to 63.6% of the manufacturing time in FDM could be spent on the fabrication of the support. Although the increase of fabrication time in the Mask-Image Projection based Stereolithography Apparatus (MIP-SLA) [5] is not signiï¬cant, because it is proportional only to the number of layers, another problem caused by the supports in single-material AM is common. This is the diï¬culty in removing the supports automatically. When the support is fabricated in the same material as the design model, it is linked to the model by many thin columns. After fabrication, the support is separated from the main object by being torn away at the top of the columns. This step is always performed manually. More seriously, the surface of the main object is easily damaged by the visual artifacts which are left on its surface (see Figure 22 for an example). Note that although the process of drop-on-powder
March 2, 2015

Figure 2: Artifacts are left on the surface of ï¬nished models after removing the support structures â the photograph is of a model fabricated by MIP-SLA. Examples of single-material FDM can be found in [3].

based AM and Selective Laser Sintering (SLS) is self-supported by the powders, a large group of machines using FDM and SLA suï¬er from the problem of support. 1.2. Tool for Design Pipeline - Motivation of This Work In the literature of design-for-manufacturing, many applications allow the shape of a model be adjusted before ï¬nalizing the design so that a better manufacturability can be achieved. After designing a shape with the help of modern geometric modeling techniques, designers start to take the âselfsupportnessâ into consideration when they wish to fabricate the physical model by single-material AM. In many cases, designers manually change the shape of a design and then verify the self-supportness by applying the support generation tools. Such a trial-and-error process is tedious and can take up much time and eï¬ort. Little research attention has been paid in the literature to the automation of this procedure. In this work, we provide a support slimming optimizer in the design pipeline to help designers to generate better self-supported intermediate models as references for ï¬nalizing their designs. A new design pipeline after integrating our shape optimizer is shown in Fig.3. 1.3. Main Results We propose a novel shape optimization approach to optimize the shape of a designed model M into a âself-supportedâ state for AM (see Fig.1). The optimizer is formulated on a volumetric mesh T enclosing M (Section 3.1). The global shape of M is preserved by minimizing the energy of rigidity deï¬ned on T (Section 3.2). The beneï¬t of taking the computation on T is twofold. Firstly, the computation is more eï¬cient and easier to converge when the mesh density of T is coarser than M. Secondly, geometric details on M can be preserved during the 2

Figure 3: Our supporting slimming optimizer (the stage shown in yellow) can be incorporated into the common design pipeline as a tool. This ï¬owchart shows how to use our optimizer in AM-based model design. optimization. The procedure of optimization is driven by reorienting the tetrahedra with âfacing-downâ surface facets. Being a major technical contribution of this work, a closed-form solution is derived from the analysis on the Gauss sphere to determine the minimal rotations (Section 4). This work provides a tool (with error control) for manipulating the shape of a designed model to reduce the usage of supporting structures. Our optimizer can be integrated into the design pipeline to relieve the designers from carrying out tedious work (Fig.3). To the best of our knowledge, this paper is the ï¬rst one which tackles the shape optimization problem so as to reduce the usage of supporting structures in AM. 2. Related Works Shape and topology optimization techniques have been widely employed in a variety of engineering applications (ref. [6, 7]). Recently, these techniques have been used in AM applications. For instance, the issue of a model balance for AM has been tackled by PrÂ´ vost et al.[8] by carving and shape e deformation. This approach is followed by a work in [9] to optimize the moment of inertia for designing a spinnable object. Telea and Jalba [10] investigated the printability of a model by voxel representation, where regions, bridges, spike and holes which are too thin can be automatically detected. A physically based stress-relief algorithm has been presented in [11] to automatically detect and modify the areas with high stress by hollowing, thickening and inserting struts to reinforce the strength of the models. Wang et al. [12] tried to generate a skin-frame structure to minimize the volume of manufacturing

material and the number of struts. Zhou et al. [13] have developed a method for determining the worst-load distribution for a shape that will cause high local stress or large deformations so that the shape can be enhanced at those weak regions. Umetani and Schmidt [14] have proposed a method to determine an optimal printing direction to maximize the mechanical strength of a model fabricated by AM. Lu et al. recently solved a strengthto-weight problem in [15] to relieve the interior stress inside a printed model by introducing optimal honeycomb-cells structures. Although many optimization issues relating to AM have been investigated, how to optimize the shape to reduce the supporting structures is still an open problem which needs to be studied. The determination of the parting direction for a mold is a typical orientation optimization problem, and it is one that has been studied for decades. Chen [16] presented an algorithm to determine the parting direction by ï¬nding the minimum volume bounding box through fuzzy representation selection. Priyadarshi and Gupta proposed an algorithm in [17] to ï¬nd the feasible parting directions through the visibility of facets by graphics hardware acceleration. The graphics accelerated hardware was also employed in [18] to help speed up the search of the feasible mold parting directions. Li et al. proposed a parting line generation algorithm for mesh models in [19]. All these approaches can be regarded as ârigidâ orientation optimization techniques that do not change the shape of the models. Our work deforms both the shape and the pose of an input model to slim down its supporting structure for single-material AM. In the literature, many geometric modeling and processing problems are formulated under the framework of optimization. A good survey can be found in the book by Botsch et al. [20]. Because the shape optimization taken in this paper is based on a local/global deformation strategy, we review only the related techniques below. Some recent approaches solve the deformation problem based on the as-rigid-as-possible (ARAP) consideration [21, 22], where they preserve the rigidity of every element in the local step and then globally blend the elements together by solving a least-square problem. The position constraints of handles can be enforced by ï¬xing the corresponding variables in the global step. The local/global optimization is also employed in [23] for solving the mesh parameterization problem. Recently, Kwok and Wang [24] presented an optimization framework for the design automation of humancentric products by solving a mixed-integer ARAP optimization problem. The procedure of local/global ARAP deformation employed in this paper is driven by a novel reorientation scheme to solve the problem of support slimming. 3. Optimization by Deformation The mission of our optimizer is to deform the input model M to a shape Mâ² by which the supporting structures are reduced and local details are preserved. To achieve this goal, a volumetric mesh T is employed as the computation domain so that the geometry details can be preserved. The demands placed on the slimming down supports are formulated as reducing the 3

Figure 4: Flowchart of our shape optimization algorithm. âfacing-downâ surface facets on T while minimizing its deformation (see the ï¬owchart shown in Fig.4). 3.1. Computation Domain and Notations To preserve the geometry details on the given model M, we constructed a tetrahedral mesh T enclosing M as the computation domain. Every vertex on M is encoded with the positions of the tetrahedral vertices on T by the barycentric coordinate. As a result, when T is deformed into a new shape, a deformed shape of M (i.e., Mâ² ) can be obtained by applying the barycentric coordinate. When the volumetric mesh T is coarser than M, the geometry details on M can be preserved in the deformation. There are many methods described in the literature for generating a surface mesh to enclose an input surface mesh (e.g., [25, 26]). After that, the tetrahedral mesh T can be generated from the enclosing surface mesh [27]. For a tetrahedral mesh CT = (V; E; F ; T ), V = {vi }, E = {ei j }, F = { fi jk }, T = {ti jkl } are used to denote the sets of vertices, edges, facets and tetrahedrals, respectively. vi â â3 Ë gives the position of each vertex vi , and n j denotes the normal of a face f j . The faces that are located at the boundary of T are called surface faces, and the tetrahedra that have at least one surface face are named as surface tetrahedra. The sets of surface faces and tetrahedra are represented by F s and T s . Moreover, all values from the original model are represented with a superscript âoâ, and those computed from the current status are denoted with a superscript âcâ. Printing Direction: It is the fabrication direction along which the model is printed layer by layer - deË noted by d p . Without the loss of generality, in the rest of this paper we asË sume that d p is a unit vector. Maximal Self-Supported Angle: An overhanging region that can be printed without adding support is called self-supported. The angle between the regionâs tangent plane and the print-

Figure 5: Faces are classiï¬ed according to the printing direction.

ing direction is called the self-supported angle Î±. When different manufacturing materials are used, the AM processes are equipped with diï¬erent maximal self-supported angles. We deï¬ne a self-supporting coeï¬cient Ï in our formulation in accordance with the maximal self-supported angle Î±max as Ï = sin(Î±max ). Fixed Region: During the shape optimization, a region of the model is selected to be ï¬xed to serve as the boundary conditions (see the yellow region in Fig.5 as an example). Tetrahedral vertices (both the boundary and the interior ones) in this region are ï¬xed. Users are free to deï¬ne the parts to be ï¬xed in our approach. Usually, the bottom of a model is selected as the ï¬xed region. Ë Safe Face: The surface face on CT whose normal n satisï¬es Ë Ë n Â· d p â¥ âÏ. (1)

constant matrices determined in the local step. Here, we formulate the ARAP energy as Eq.(3) instead of wt Lt Vnew â Vo 2 . t F t As a result, the factorization of a linear system can be reused in the subsequent iterations of optimization. Rigid Transformation: The local step for obtaining Lt plays a very important role in our formulation. â¢ In the prior ARAP work, the rigid transformation from the original shape Vo of a tetrahedron t to its current shape Vc t t is determined by using a âsigned versionâ of the singular value decomposition (SVD) on the aï¬ne transformation matrix Q = Vc (Vo )â1 (ref. [22]). That is, Q = UÎ£WT , t t where Î£ is a diagonal matrix with all elements being positive. Î£ deï¬nes the scaling factors in three orthogonal directions in Q. As a result, Q can be turned into a rigid transformation M = UWT . â¢ Applying M to a tetrahedron t will transform it to an orientation that best approximates to the current shape of t. A transformed surface tetrahedron may contain some risky faces, and these need to be turned into safe ones by applying an additional rotation R. Basically, an ideal rotation turns all risky faces on a tetrahedron into safe ones while conducting a rotation with a minimal rotational angle. The method for solving this problem will be presented in Section 4. Speciï¬cally, after determining a minimal rotation Ë angle Î¸ and its corresponding rotation axis r, R(Ë , Î¸) can r be obtained [28]. For those safe tetrahedra and the interior tetrahedra, R(Ë , Î¸) = I. r The rigid transformation applied in our optimization framework (i.e., Eq.(3)) is a cascade of these two transformations because Lt = R(Ë , Î¸)M. r Procedure of Optimization: We iteratively apply the local and then the global steps on the volumetric mesh CT to reduce the number of risky faces. â¢ Step 1): For each tetrahedron, the rigid transformation M between its current position/shape and the given position/shape is computed. â¢ Step 2): For each risky tetrahedron, a minimal rotation R(Ë , Î¸) is computed to convert it into a safe one (see Secr tion 4 below). As a result, Lt is obtained for all tetrahedra. â¢ Step 3): A least-square solution for the new position/shape of the volumetric mesh is obtained by minimizing the deformation energy (Eq.(3)). â¢ Step 4): Go back to step 1) until the terminal condition is reached. A hybrid terminal condition is employed in the iteration: (a) the maximal iteration steps (e.g., 100 in our implementation) and (b) the number of risky faces do not decrease in the successive ï¬ve steps of the iteration. More sophisticated terminal conditions will be introduced in Section 5.2 to control the geometry approximation error on the optimized (deformed) model. 4

See the green faces in Figure 55 for an example. These faces are termed the self-supported faces, and the above inequality on the normals of faces is termed the self-supporting condition. Ë Ë Risky Face: The surface face with n Â· d p < âÏ. For example, the orange regions in Figure 55 are formed by risky faces. Note that a surface tetrahedron containing no risky face is called a safe tetrahedron. On the other aspect, if one of the surface tetrahedronâs faces is risky, the tetrahedron is also deï¬ned as a risky tetrahedron. 3.2. Optimization Framework The goal of slimming down the support in AM can be interpreted as deforming the given model into a new shape so that it has fewer risky faces. Because the volumetric mesh CT is used as the domain of computation, we convert the problem into the requirement of turning risky faces into safe ones while minimizing the deformation. Deformation Energy: For each tetrahedron t â T with four vertices v1 , v2 , v3 and v4 , we construct a local frame in t as Vt = [v1 â v4 v2 â v4 v3 â v4 ] (2)

with v4 being an interior vertex on the volumetric mesh. This selection of local origin is based on the heuristic that an interior vertex is connected with more tetrahedra. Making it static (as origin) in a local rotation will have less inï¬uence on the neighboring tetrahedra. With the help of Vt , the as-rigid-as-possible (ARAP) energy of a deformed tetrahedral mesh can be deï¬ned as E(Cnew , Co ) = T T
tâT

wt Vnew â Lt Vo 2 , t t F

(3)

where Â· F is the Frobenius norm, Lt is a rigid transformation matrix of the tetrahedron t, and wt is tâs volume serves as the weight. In the prior work of ARAP deformation, position handles are applied to move some vertices so that an updated shape can be obtained by minimizing the above ARAP energy. The optimization is actually in a least-square form when Lt s are the

Figure 6: Rotation analysis on the Gauss sphere to enforce the Ë Ë condition of self-supporting: (a) a rotation to move n1 and n2 into the feasible region H p (in cyan) w.r.t. the printing direction Ë Ë Ë d p , and (b) dual-feasible-regions of n1 and n2 , Hn1 and Hn2 , Ë Ë Ë forms a target region as Ht = Hn1 â© Hn2 to inversely rotate d p Ë Ë into.

Figure 7: Case I â there is only one surface face on a risky tetrahedron.

4. Computation of Minimal Rotation Served as the core of our shape optimization approach, the computation of minimal rotation is formulated in a closed-form in this section. Problem Deï¬nition: Given a tetrahedron t â T s with four Ë faces { fi } (i = 1, . . . , 4) and their corresponding normals as {ni }, the minimal rotation is deï¬ne as r arg minr,Î¸ R(Ë , Î¸) â I 2 Ë g s.t., â fi â F s , (R(Ë , Î¸)ni ) Â· d p â¥ âÏ r Ë Ë (4) Figure 8: Case II â there are two surface faces on a risky tetrahedron. The Gauss sphere is decomposed into ï¬ve regions corresponding to the ï¬ve diï¬erent conï¬gurations of minimal rotation.

where Â· g is a general matrix norm to measure how signiï¬cantly R(Ë , Î¸) deviates from I. r Directly solving this problem by constrained nonlinear optimization is tedious and time-consuming. The problem is a pure rotation issue. Therefore, we analyze it on the Gauss sphere to ï¬nd a compact solution. 4.1. Analysis on Gauss Sphere For a risky tetrahedron in R3 , the unit normal vectors of its four faces can be considered as four points on the Gauss sphere Ë S2 . Meanwhile, the unit vector d p of the printing direction is 2 also mapped to a point on S . Without a loss of generality, Ë d p is assumed to be the top point of the Gauss sphere (i.e., Ë p = (0, 0, 1)). Now the condition of self-supporting for a surd Ë face face (Eq.1) can be interpreted as that the normal n must be located at the half-space H p above/on the plane z = âÏ. As illustrated in Fig.6(a), a risky tetrahedron may have a few surface faces that are not self-supported. When this situation occurs, we can apply a rotation on the normal vectors to move them into the safe region (i.e., inside H p ). The rotation is actually R(Ë , Î¸) used in Eq.(4), where a minimal rotation angle Î¸ is r demanded. When there is more than one risky face on a tetrahedron, determining a minimal rotation to move all points (corresponding to the normals on risky faces) into the feasible region H p is not straightforward â see Fig.6(a). To solve this problem, a dual representation of H p is deï¬ned as follows. 5

Dual-Feasible-Region (DFR): The self-supporting condition Ë for a surface face with normal n (i.e., Eq.(1)) can be considered Ë Ë as requesting d p to be located at the same side of n with referË Ë Ë ence to the plane: xn x + yny + znz + Ï = 0. Therefore, a DFR of Ë Ë d p for n can be deï¬ned by the half-space Ë Hn = {p | âp â S2 , p Â· n + Ï â¥ 0}. Ë Ë Thus, the self-supporting condition becomes d p â Hn . Ë Ë Ë Inverse Rotation: Rotating n by Î¸ around the axis r is equivaË lent to inversely rotating d p with the angle (âÎ¸) around the same axis. As a result, the minimal angle can be determined by rotatË Ë ing d p into the DFR of n. Speciï¬cally, for a surface tetrahedron Ë t with m surface faces (m > 1), we can inversely rotating d p into the common area deï¬ned by the DFRs of these faces â that is Ht = Hn1 â© Â· Â· Â· â© Hnm (see Fig.6(b)). Ë Ë Methods for determining the minimal angle (by inverse rotation) in diï¬erent conï¬gurations are presented below. Cases of tetrahedra with one and two surface faces are discussed. We found only a very few cases with three surface faces in our tests. For such cases, the conï¬guration space on the Gauss sphere is divided into eight regions. This makes the closed-form formulation of minimal rotation very tedious. To have an easy-toimplement approach, a tetrahedron t with more than two surface faces is split into four tetrahedra by inserting a new vertex at the middle of t, and this will not aï¬ect tâs neighboring tetrahedra. (5)

Fig.9(a)). Here, H denotes a complementary set of H. To Ë realize that, we project d p onto the plane Pn1 and normalize it Ë Ë to a unit vector dâ²p . As a result, the rotation axis for turning risky Ë Ë Ë Ë faces safe is r = dâ²p Ã d p with the angle Î¸ = arccos(dâ²p Â· d p ). Note that, in all the conï¬gurations below, r and Î¸ can be determined Ë in the same way after obtaining dâ²p . Ë Conï¬guration II: This conï¬guration occurs when d p â Hn2 â© Ë Hâ¥n2 (i.e., falling in the green region shown in Fig.9(b)). We Ë Ë Ë then project d p onto the plane Pn2 and normalize it to dâ²p , which Ë Ë actually moves d p onto the arc ABC. Conï¬guration III: The respective region of this conï¬guration is HAC â© Hâ¥n1 â© Hâ¥n2 (the red region shown in Fig.9(c)). If Ë Ë Ë d p falls in this conï¬guration, the closest point in the feasible region Ht is the point A. The position of A can be computed by Ë the planes. We then assign the position of A to dâ²p . Ë Figure 9: When d p falls in diï¬erent regions, it has diï¬erent targets for the minimal rotation: (a)-(d) the conï¬gurations for regions I-IV, respectively. 4.2. Case I: One Surface Face For the case of a tetrahedron t with only one surface face f Ë whose normal is n, if the self-supporting condition (Eq.(1)) is Ë not satisï¬ed on f , the point d p must fall outside the feasible Ë region Hn . The minimal inverse rotation that moves d p back Ë Ë into Hn can be determined by projecting d p onto the plane of Ë Ë Ë Hn and then normalizing it to the unit vector dâ²p . Here dâ²p is the Ë Ë p in Hn . Thus, the minimal rotation axis is closest point to d Ë Ë Ë Ë Ë r = dâ²p Ã d p and the rotation angle Î¸ = arccos(d p Â· dâ²p ). 4.3. Case II: Two Surface Faces For the case that a tetrahedron t has two surface faces f1 and Ë Ë f2 (with n1 and n2 as their normals respectively), we present a closed-form solution of the minimal rotation below. Again, the analysis is performed with the help of the DFRs and the inverse rotation. Speciï¬cally, the Gauss sphere is decomposed into ï¬ve regions with respect to Hn1 and Hn2 , where diï¬erent regions Ë Ë lead to diï¬erent conï¬gurations of minimal rotation. The yellow part is the feasible region Ht . The boundaries of the conï¬guration regions are formed by ï¬ve planes (see the illustration in Fig.8). Two planes, Pâ¥n1 and Pâ¥n2 passing through the corner Ë Ë points of Ht are perpendicular to Pn1 and Pn2 respectively. The Ë Ë plane PAC passing through the origin is perpendicular to the Ë vector ca, which splits the region into two halves. Equations of the ï¬ve planes help to deï¬ne ï¬ve half-spaces, as follows: Ë Hn1 = {p | âp â S2 , n1 Â· p + Ï â¥ 0} Ë Ë Hn2 = {p | âp â S2 , n2 Â· p + Ï â¥ 0} Ë Ë HAC = {p | âp â S2 , ca Â· p â¥ 0} Ë Ë Hâ¥n1 = {p | âp â S2 , (ca Ã n1 ) Â· p + d â¥ 0} Ë Ë Ë Hâ¥n2 = {p | âp â S2 , (n2 Ã ca) Â· p + d â¥ 0} Ë Ë Conï¬guration IV: This is d p â HAC â© Hâ¥n1 â© Hâ¥n2 (the purË Ë Ë ple region in Fig.9(d)). In Ht , the closest point to d p is point C. Ë Thus, its position is assigned as dâ²p to compute the minimal rotaâ² Ë Ë Ë Ë tion along the axis r = d p Ã d p with the angle Î¸ = arccos(dâ²p Â· d p ). By the conï¬guration analysis above, we solve the problem of minimal rotation in a closed-form instead of non-linear optimization. Meanwhile, the global step is a pre-factorized leastsquare problem. As a result, each iteration of the optimization procedure can be evaluated very eï¬ciently. 5. Results and Discussion The approach proposed in this paper has been implemented by C++ together with the Eigen library [29] as the numerical solver. All the tests below are taken on an Intel Core i7-3770 3.40GHz computer with 8GB RAM. Our current implementation does not use the multi-core acceleration. The approach has been tested with several models, and all the results are encouraging. 5.1. Experimental Results Our ï¬rst example is the Dino model which was shown in Fig.1. In this optimization, we set the maximal self-supported angle Î±max = 0. As a result of shape optimization, the Dino âraises upâ its head and arms. Local details of the bone structures are well-preserved. The original and the optimized models have been tested on two diï¬erent types of AM machines â the MIP-SLA and the Fortus 360mc FDM â where the supporting structures for MIP-SLA are generated by the region subtraction method [2] and the support for FDM is generated by the software delivered together with the Fortus machine. The second example is the Armadillo model. Figure 10 shows the result of shape optimization on this example, where Armadillo âraises upâ its arms and âpulls downâ its tail. Quantitative measurements of these two examples are given in Table 1 for the purpose of comparison. In both MIP-SLA and FDM, the material usage for the support has been greatly reduced. Because the fabrication time 6

(6)

Ë Ë Ë Ë Ë Ë Ë Ë Ë where ca = (n1 Ã n2 )/ n1 Ã n2 and d = Ï n1 Ã n2 /(1 + n1 Â· n2 ). Ë Conï¬guration I: When d p â Hn1 â© Hâ¥n1 , the minimal inverse Ë Ë Ë p onto the arc ADC (see the blue region in rotation moves d

Figure 11: Examples of support slimming on more models: Dinosaurus (top), Bunny (middle) and Pig (bottom). The supporting structure can be eï¬ectively reduced by applying our shape optimization approach to all of these models. of FDM is proportional to the total materials usage, slimming down the support will signiï¬cantly improve the eï¬ciency of the fabrication as well. Note that this will beneï¬t not only the FDM printing with single material but also the advanced FDM using dissolvable material in supports. The time of fabrication in MIP-SLA depends on the number of total layers of a model. Therefore, slimming down the support will not speed up the MIP-SLA printing. However, another important aspect of MIPSLA beneï¬ted by this work is the surface quality of ï¬nished model. The supporting structures and the main model are linked by a few anchor points (AP). After removing the supports in a post-process, in place of the APs some artifacts usually appear (Fig.2). The number of APs on the optimized Dino is reduced from 61 to 18, and the number of APs on the optimized Armadillo model is reduced to 1/16 of the original input with 32 APs. Three more examples are shown in Fig.11. We also study the performance and the convergency of the shape optimization algorithm. The statistics about the computation of diï¬erent models are given in Table 2, where the total time of 100 iterations is reported. Note that the majority of the time is spent on the local steps for computing SVD and minimal rotation. The equation system of the global blending step needs only to be factorized in the ï¬rst step, and the factorization can be reused in the subsequent steps where the substitution can be computed very eï¬ciently. To further investigate the convergency of our shape optimization algorithm, we track the number of risky faces during the computation. As shown in Fig.12, the number of risky faces keeps dropping in all the examples (although this may not be monotonically). It is obvious that having more vertices on the volumetric mesh leads to longer computing time. On the other hand, a volumetric mesh with too coarse a resolution will give a large shape approximation error. Therefore, we usually employ a mesh with less than 5k vertices, and this results in a good tradeoï¬ between speed and quality. 7

Table 1: Comparison of Fabrication Cost
Printer Dino â Fig.1 Input MIP-SLA Optm MIP-SLA Input FDM Optm FDM Armadillo â Fig.10 Input MIP-SLA Optm MIP-SLA Input FDM Optm FDM
â 

Material Usageâ  Main Support 11.2 g 10.9 g 1.30 in3 1.21 in3 26.4 g 25.6 g 1.47 in3 1.38 in3 3.2 g 0.5 g 2.12 in3 1.07 in3 2.9 g 0.2 g 2.57 in3 1.23 in3

Layer Num 717 865 408 491 692 785 389 440

Fabâ¡ Time 127 m 153 m 428 m 281 m 117 m 133 m 483 m 322 m

The material used in MIP-SLA is measured by the weight of resin and in FDM is measured by the volume of ï¬laments. â¡ The time of fabrication is reported in the unit of minutes.

Table 2: Statistics of Computational Performance
Model Dino Armadillo Dinosaurus Bunny Pig
â

Fig. 1 10 11 11 11

Volumetric Mesh Ver. # Tet. # 974 3,299 2,373 8,189 4,345 16,803 439 1,536 1,046 4,045

Î±max 0â¦ 0â¦ 10â¦ 0â¦ 10â¦

Timeâ 4.151 s 10.717 s 22.525 s 1.899 s 5.133 s

The time reported in this column is the total time of 100 iterations in the unit of seconds. We assume diï¬erent materials are used in the fabrication â therefore, diï¬erent maximal self-supported angles, Î±max , are used.

Figure 12: A chart to show the percentage of risky faces compared to the number of risky faces on the input models. â¢ Average Node Deviation Ratio (ANDR): This measures the average displacement at all the vertices of M with respect to the diagonal length of Mâs bounding box. Figure 10: Example of support slimming on the Armadillo model and the comparison of AM results before vs. after the shape optimization in both MIP-SLA (bottom-left) and FDM (bottom-right). The optimization âraises upâ the arms and âpulls downâ the tail. In the pictures of MIP-SLA, the bottom row shows the optimized result; in the pictures of FDM, the right model has been optimized. 5.2. Extensions Our optimization approach provides a basic tool for realizing the more interesting applications. Two examples, (1) support slimming with shape control and (2) searching for the optimal printing direction, are presented in this section. Shape Control in Optimization In many cases, the designers may not wish to change the shape of a model too much during the optimization for support slimming. This can be realized by adding a penalty factor Î², which is an angle between 0â¦ and 90â¦ . Speciï¬cally, Lt = R(Ë , Î¸â² )M r is employed in the shape optimization as the transformation, where Î¸â² = max(Î¸ â Î², 0). (7) We start from the optimization with Î² = 0 and evaluate the MNDR and ANDR on the resultant model. If they are not satisï¬ed, the value of Î² is incrementally changed until a result with a satisfactory shape deviation is obtained. In practice, designers usually require that ANDR is less than 5% or MNDR is less than 15% to control the deformation. For the dinosaurus model shown in Fig.13, the desirable Î² is less than 30â¦ . Searching for Optimal Printing Direction The printing direction is usually chosen empirically by users in accordance with the features on an input model or simply assigned in the bottom-up direction. However, for some models such as the running Armadillo model shown in Fig.14, it is not easy to ï¬nd a heuristic printing direction. Our approach can be employed in the inner loop as a tool to search for an optimal printing direction. Here the optimal printing direction is deï¬ned as a direction that leads to the minimal number of anchor points (APs) linking supports to the main model (ref. [2]). That means we wish to introduce minimal damage during the postprocess to remove the supports. We iteratively rotate the input model along the x- and y-axes with a constant angle. For each new orientation, we apply the optimization approach followed by the support generation algorithm, on the result of which the number of APs is counted. Among all the discretely spanned orientations, the one with the minimal AP is ï¬nally chosen as an optimal printing direction (see Fig.14 for an example). 5.3. Limitation and Discussion Although our approach can successfully optimize the shape of given models to slim down the supporting structure, it also has some limitations. First of all, our optimizer is based on the assumption that the shape of the original model can be changed. For some applications in which the original model cannot be deformed, our optimizer is not able to help. Secondly, because we set the goal of optimization only at slimming down the supporting structure, the model cannot be converted into a fully 8

As a result, when a large Î² is employed, many of the risky faces will not be rotated (in the cases that Î¸ determined by the local minimal rotation is less than Î²). As shown in Fig.13, diï¬erent values of Î² result in diï¬erent degrees of deformations in the shape optimization for support slimming. In practice, the penalty factor is used together with two metrics for shape deviation: â¢ Maximal Node Deviation Ratio (MNDR): This metric evaluates the maximal displacement at the vertices of the input mesh model M with respect to the diagonal length of Mâs bounding box.

Figure 14: Our approach can be computed eï¬ciently on freeform models. As a result, it can be used as a tool to compute the optimal shape for each printing direction. The number of APs linking supports to the main model can be used as a criterion for selecting the printing direction. Smaller AP leads to less surface damage when removing the supports in the post-process of printing. We have used the MIP-SLA to print the original model and the model with optimal direction circled by the dashed lines â see the left column of the fabricated models. Note that, in each orientation, optimization is also taken to further deform the model into an optimal shape. This is diï¬erent from what can be obtained by searching with rigid transformations. self-supported shape. On the other aspect, self-supportiveness usually needs to be considered at the very beginning of the design process. One of the related works can be found in [30]. Thirdly, our support slimming work does not consider the surface damaged on the safe faces by adding supports for the risky faces exactly above them. Lastly, the volumetric meshes which are coarser than the input mesh models are used as the computational domain in our approach to preserve the geometric details. On the downside, this also neglects the overhangs inside a safe tetrahedron. We will consider these factors by investigating a method for computing the minimal rotation in more complex conï¬gurations. Speciï¬cally, multiple faces on the input mesh M inside a tetrahedron will be employed to construct the DFR on the Gauss sphere. We will study this in our future work. The success of shape optimization on a coarser volumetric mesh CT relies on the error between mesh surface of the given model and the boundary of CT ; the smaller the better. When a very coarse mesh is employed, the âoptimizedâ shape computed from the volumetric mesh may have more risky faces before 9 computation. We prevent such cases by checking the number of risky faces after each iteration, and always store the best result among the past steps of iteration. How to generate a volumetric mesh bounding the input model more tightly has beyond the scope of this paper. We consider it to be a work which needs to be taken in the future. Because the computational domain of our optimization framework is a coarse volumetric mesh, local/global selfintersection may be introduced into the volumetric mesh. A post-processing step needs to be applied to remove selfintersections in such cases (e.g., [31]). In our current formulation, one interior vertex (i.e., v4 ) is chosen as the origin of local rotation based on a heuristic consideration. The eï¬ectiveness of selecting diï¬erent origins of local rotation can be released by using the mean-subtraction strategy in global blending (ref. [32]). However, in all of our tests, the current implementation converges well when we use one of the interior vertices as the origin of local rotation.

Experimental tests shown at the end of the paper have veriï¬ed the eï¬ectiveness of this approach. The optimized models can serve as useful references for designers when self-supportness is an important factor to be considered. Acknowledgement The research work reported in this paper was supported by the Hong Kong Innovative Technology Fund (ITS/247/11 and ITS/060/13). Ka-chun Chan built the machine for the maskimage-projection based SLA, Yuen-shan Leung implemented the support generation algorithm, and the cage-generation program was provided by Chuhua Xian. The authors would like to acknowledge their contribution in this work. References
[1] P. Huang, C. C. L. Wang, Y. Chen, Algorithms for layered manufacturing in image space, in: ASME Advances in Computers and Information in Engineering Research, 2014. [2] Y. Chen, K. Li, X. Qian, Direct geometry processing for tele-fabrication, ASME Journal of Computing and Information Science in Engineering 13 (2013) 041002. [3] L. Chilson, Printing with Support - Extreme Overhangs (2012). [4] K. G. Swift, J. D. Booker, Manufacturing Process Selection Handbook, Elsevier Ltd., 2013. [5] Y. Pan, C. Zhou, Y. Chen, Rapid manufacturing in minutes: The development of a mask projection stereolithography process for high-speed fabrication, in: Proceedings of ASME 2012 International Manufacturing Science and Engineering Conference, 2012, pp. 405â414. [6] M. P. Bendsoe, O. Sigmund, Topology Optimization: Theory, Methods and Applications, Springer, 2003. [7] J. Haslinger, R. A. E. MÂ¨ kinen, Introduction to Shape Optimization: Thea ory, Approximation, and Computation, SIAM, 2003. [8] R. PrÂ´ vost, E. Whiting, S. Lefebvre, O. Sorkine-Hornung, Make it stand: e Balancing shapes for 3d fabrication, ACM Trans. Graph. 32 (4) (2013) 81:1â81:10. [9] M. Bacher, E. Whiting, B. Bickel, O. Sorkine-Hornung, Spin-it: Optimizing moment of inertia for spinnable objects, ACM Trans. Graph. 33 (4). [10] A. Telea, A. Jalba, Voxel-based assessment of printability of 3d shapes, in: Proceedings of the 10th International Conference on Mathematical Morphology and Its Applications to Image and Signal Processing, Springer-Verlag, 2011, pp. 393â404. [11] O. Stava, J. Vanek, B. Benes, N. Carr, R. MË ch, Stress relief: Improve ing structural strength of 3d printable objects, ACM Trans. Graph. 31 (4) (2012) 48:1â48:11. [12] W. Wang, T. Y. Wang, Z. Yang, L. Liu, X. Tong, W. Tong, J. Deng, F. Chen, X. Liu, Cost-eï¬ective printing of 3d objects with skin-frame structures, ACM Trans. Graph. 32 (6) (2013) 177:1â177:10. [13] Q. Zhou, J. Panetta, D. Zorin, Worst-case structural analysis, ACM Trans. Graph. 32 (4) (2013) 137:1â137:12. [14] N. Umetani, R. Schmidt, Cross-sectional structural analysis for 3d printing optimization, in: SIGGRAPH Asia 2013 Technical Briefs, 2013, pp. 5:1â5:4. [15] L. Lu, A. Sharf, H. Zhao, Y. Wei, Q. Fan, X. Chen, Y. Savoye, C. Tu, D. Cohen-Or, B. Chen, Build-to-last: Strength to weight 3d printed objects, ACM Trans. Graph. 33 (4). [16] Y. Chen, Determining parting direction based on minimum bounding box and fuzzy logics, International Journal of Machine Tools and Manufacture 37 (9) (1997) 1189â1199. [17] A. K. Priyadarshi, S. K. Gupta, Finding mold-piece regions using computer graphics hardware, in: Geometric Modeling and Processing, 2006, Lecture Notes in Computer Science, 2006, pp. 655â662. [18] R. Khardekar, G. Burton, S. McMains, Finding feasible mold parting directions using graphics hardware, Comput. Aided Des. 38 (4) (2006) 327â 341.

Figure 13: When diï¬erent values of the penalty factor Î² are employed in the shape optimization, results with diï¬erent maximal node deviation ratio (MNDR) and average node deviation ratio (ANDR) can be obtained. If less deformation is allowed in the optimization, the resultant model may need to add more supporting structures.

6. Conclusion This paper presents a method for optimizing the shape of a designed model to be fabricated by layer-based AM. When only a single material can be used during the fabrication, two widely used types of AM machines, FDM and SLA, both suï¬er from the problems caused by the additionally inserted supporting structures. We develop an optimization approach based on a local minimal rotation and a global blending. A closed-form formulation is derived in the local step to determine the minimal rotations in diï¬erent conï¬gurations. The computation of global blending can be oï¬oaded to a factorization of the normal equation system that can be reused in the subsequent iterations. As a result, the optimization can be conducted very eï¬ciently. 10

[19] W. Li, R. Martin, F. Langbein, Molds for meshes: Computing smooth parting lines and undercut removal, IEEE Transactions on Automation Science and Engineering 6 (3) (2009) 423â432. [20] M. Botsch, L. Kobbelt, M. Pauly, P. Alliez, B. Levy, Polygon Mesh Processing, AK Peters, 2010. [21] T. Igarashi, T. Moscovich, J. F. Hughes, As-rigid-as-possible shape manipulation, ACM Trans. Graph. 24 (3) (2005) 1134â1141. [22] O. Sorkine, M. Alexa, As-rigid-as-possible surface modeling, in: Proceedings of the Fifth Eurographics Symposium on Geometry Processing (SGPâ07), 2007, pp. 109â116. [23] L. Liu, L. Zhang, Y. Xu, C. Gotsman, S. J. Gortler, A local/global approach to mesh parameterization, Computer Graphics Forum (Proc. Eurographics Symposium on Geometry Processing (SGP)) 27 (5) (2008) 1495â1504. [24] T.-H. Kwok, C. Wang, Shape optimization for human-centric products with standardized component, Computer-Aided Design 52 (2014) 51â63. [25] C. Xian, H. Lin, S. Gao, Automatic cage generation by improved obbs for mesh deformation., The Visual Computer 28 (1) (2012) 21â33. [26] L. Markosian, J. M. Cohen, T. Crulli, J. Hughes, Skin: A constructive approach to modeling free-form shapes, in: Proceedings of the 26th Annual Conference on Computer Graphics and Interactive Techniques, SIGGRAPH â99, 1999, pp. 393â400. [27] H. Si, Tetgen 1.5.0, http://www.tetgen.org (2013). [28] C. J. Taylor, C. J. Taylor, D. J. Kriegman, D. J. Kriegman, Minimization on the lie group so(3) and related manifolds, Tech. rep., Yale University (1994). [29] G. Guennebaud, B. Jacob, et al., Eigen 3.2, http://eigen.tuxfamily.org (2013). [30] E. Vouga, M. HÂ¨ binger, J. Wallner, H. Pottmann, Design of selfo supporting surfaces, ACM Trans. Graph. 31 (4) (2012) 87:1â87:11. [31] C. C. L. Wang, D. Manocha, Eï¬cient boundary extraction of BSP solids based on clipping operations, IEEE Transactions on Visualization and Computer Graphics 19 (1) (2013) 16â29. [32] S. Bouaziz, M. Deuss, Y. Schwartzburg, T. Weise, M. Pauly, Shape-up: Shaping discrete geometry with projections, Comp. Graph. Forum 31 (5) (2012) 1657â1667.

11

