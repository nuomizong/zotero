Exploring Quadrangulations
CHI-HAN PENG Arizona State University MICHAEL BARTON and CAIGUI JIANG King Abdullah University of Science and Technology and PETER WONKA Arizona State University and King Abdullah University of Science and Technology
We present a framework for exploring topologically unique quadrangulations of an input shape. First, the input shape is segmented into surface patches. Second, different topologies are enumerated and explored in each patch. This is realized by an efﬁcient subdivision-based quadrangulation algorithm that can exhaustively enumerate all mesh topologies within a patch. To help users navigate the potentially huge collection of variations, we propose tools to preview and arrange the results. Furthermore, the requirement that all patches need to be jointly quadrangulatable is formulated as a linear integer program. Finally, we apply the framework to shape-space exploration, remeshing, and design to underline the importance of topology exploration. Categories and Subject Descriptors: I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling General Terms: Algorithms Additional Key Words and Phrases: Quadrilateral meshes, mesh optimization, topology, geometry processing, mesh connectivity ACM Reference Format: Chi-Han Peng, Michael Barton, Caigui Jiang, and Peter Wonka. 2014. Exploring quadrangulations. ACM Trans. Graph. 33, 1. Article 12 (January 2014) 13 pages. DOI: http://dx.doi.org/10.1145/2541533

12

1.

INTRODUCTION

This research was supported by the National Science Foundation and KAUST. Authors’ addresses: C.-H. Peng (corresponding atuhor), CIDSE, Arizona State University, Phoenix, AZ 85004; email: pchihan@asu.edu; M. Barton, C. Jiang, King Abdullah University of Science and Technology; Thuwal Saudi Arabia; P. Wonka, CIDSE, Arizona State University, Phoenix, AZ 85004 and KAUST, Thuwal Saudi Arabia. Permission to make digital or hard copies of part or all of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proﬁt or commercial advantage and that copies show this notice on the ﬁrst page or initial screen of a display along with the full citation. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, to republish, to post on servers, to redistribute to lists, or to use any component of this work in other works requires prior speciﬁc permission and/or a fee. Permissions may be requested from Publications Dept., ACM, Inc., 2 Penn Plaza, Suite 701, New York, NY 10121-0701 USA, fax +1 (212) 869-0481, or permissions@acm.org. c 2014 ACM 0730-0301/2014/01-ART12 $15.00 DOI: http://dx.doi.org/10.1145/2541533

Existing quadrangulation algorithms tackle surface remeshing problems using optimization frameworks. While users may obtain slightly different results by adjusting the optimization parameters, a systematic exploration of alternative quadrangulations is not feasible. By contrast, our goal is to help users to explore all possible topologically unique quadrangulations of an input mesh in an efﬁcient and organized way. The ﬁrst challenge is the enumeration of topologically unique quadrangulations. Without constraints, the possibilities are innumerable. Thus, we take a two-stages approach: in the ﬁrst stage, the input mesh is segmented into surface patches, typically along sharp features. Since patch boundaries need to be matched, that is, no T-junctions are allowed, ﬁnding the boundary conﬁgurations that make all patches jointly quadrangulatable may be challenging. We show that the problem can be formulated as a linear integer program. In the second stage, topologies are enumerated for each patch with the guarantee that the patch boundaries will match. Exhaustively enumerating all possible quadrilateral topologies for a patch within a reasonable time is made possible by the following fact: assuming that the number of irregular vertices should be minimized, any complex patch of a quadrangular mesh can be subdivided into a collection of certain patches that we call simple patches. Fueled by this idea, our enumeration algorithm subdivides each patch into a collection of simple patches that are quadrangulated by a closed-form solution. The task of enumerating topological variations thus becomes much more manageable because we only need to enumerate different ways to perform the aforementioned subdivisions. Inundating users with hundreds, even thousands, of possible variations in an arbitrary order is a job only half done. The second challenge is to help users efﬁciently navigate the solution space. We propose three approaches to tackle this challenge. First, the enumeration can be guided by a sampling method, so that a snapshot of the whole solution space can be quickly retrieved. Second, variations that are topologically similar, that is, isomorphic graphs under a rotational symmetry, can be clustered to reduce visual clutter. Third, variations can be sorted by both the topological and the geometric characteristics of the quadrangulation. Finally, we demonstrate why topological exploration is important by showing several examples for which alternative quad mesh layouts can be useful.

2.

RELATED WORK

In the following, we brieﬂy review recent quadrangulation methods in general and algorithms that explore quad mesh topologies in more
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

12:2

•

C. H. Peng et al. into several subpaths, which we denote as sides. A patch is convex if it does not contain any concave corners; otherwise, it is concave. Deﬁnition 3. Each boundary loop of a patch can be encoded by the length of sides and the type (convex or concave) of corners encountered during a closed, counterclockwise walk, beginning at an arbitrary vertex. During the walk, we keep a conceptual facing direction as a signed integer, beginning at zero. It is incremented by one when a convex corner is encountered, and decremented by one when a concave corner is encountered. We assign each side a direction given the current facing direction when it is encountered. Sides with the same direction are grouped together to form an effective side. A patch with N effective sides is called an N -sided polygon or N -gon for short. Deﬁnition 4. For a patch with all irregular vertices in its interior, I nt, the total valence deﬁcit, TVD, is i∈I nt 4 − l(vi ). The extension to patches with irregular vertices on the boundary is straightforward but cumbersome to describe so we omit it here. Interestingly, the TVD of a patch can be derived from its boundary loops, a direct result of the discrete Gauss-Bonnet theorem for surface with boundaries. For a patch with one boundary loop, its TVD can be derived as 4 − n, where n is the number of convex corners minus the number of concave corners on the boundary. The TVD of patches with multiple boundary loops is described in Section 5.1.5.

detail. For a broader background on polygon mesh processing and quad meshing, we suggest the book by Botsch et al. [2010] and the survey by Bommes et al. [2012]. Most existing algorithms for quad mesh generation are geared towards computing a single optimized quad mesh. Many popular algorithms generate a quad mesh from a ﬁeld by streamline tracing, for example, Alliez et al. [2003], Marinov and Kobbelt [2004], and Dong et al. [2005]. While ﬁelds can be edited by specifying locations of singularities or by controlling parameters of an optimization function, for example, Zhang et al. [2006], Tong et al. [2006], Palacios and Zhang [2007], and Ray et al. [2008, 2009], there is no direct relationship between a ﬁeld and a resulting quad mesh, because the algorithms used to derive a quad mesh from a ﬁeld are quite involved. One such tool is global parametrization [Ray et al. 2006; K¨ lberer et al. 2007; Bommes et al. 2009; Zhang et al. a 2010], which is used in most recent methods. Several quad meshing algorithms use a two-stage approach similar to our framework. First, a rough patch layout is generated and then the patches are quadrangulated [Dong et al. 2006]. Our algorithm is complementary in the sense that we assume that the input model is already subdivided in patches (or we compute a simple patch segmentation semi-automatically). Besides the aforementioned algorithms, there are other specialized patch quadrangulation algorithms, such as those that attempt to ﬁnd a topology with the fewest irregular vertices possible [Nasri and Yasseen 2009; Schaefer et al. 2004]. The three most related concepts for the exploration of quad mesh topologies are curve sampling [Marinov and Kobbelt 2006], connectivity editing [Maza et al. 1999; Peng et al. 2011], and advancing fronts (paving) [Blacker and Stephenson 1991; White and Kinney 1997; Park et al. 2007]. Marinov and Kobbelt [2006] connect the boundary vertices of a patch by curves and propose an algorithm to generate a layout and another algorithm to mutate an existing layout. The purpose of the algorithm is quad mesh generation, but it could also be used to explore quad mesh topologies. Compared with our algorithm, this approach generates a much larger set of invalid and duplicate meshes. Advancing-front algorithms incrementally grow quad elements from the patch boundaries and they could be used for enumerating topologies. However, one problem is that the algorithm does not terminate without a geometric heuristic and can grow fronts indeﬁnitely.

3.2

Framework Overview

3. 3.1

OVERVIEW Basic Deﬁnitions

An overview of our framework is shown in Figure 1. The input to our system is a polygon mesh of arbitrary type, for example, triangular, quadrilateral, or hybrid, representing a two-manifold surface. The input mesh serves as guidance for generating the control graph, which is a cage-like structure that encodes a patch segmentation of the input mesh (Section 4). The patches of the control graph serve as the inputs to our quadrangulation algorithm that has the ability to exhaustively enumerate all possible quadrilateral topologies, that is, remeshing, within each patch (Section 5). To help users navigate the potentially huge space of possibilities, we propose a sampling strategy such that a snapshot of the whole solution space can be quickly retrieved (Section 5.4). In Section 6, we show that the task of ﬁnding boundary constraints that make all patches jointly quadrangulatable can be formulated as a linear integer programming problem.

4.

CONTROL GRAPH MODELING

The valence of a vertex, v, which we denote as l(v), is the number of edges in the mesh incident to v. A vertex with valence n is denoted as vn, for example, v3 and v5. A v4 vertex is considered as regular, and vertices of other valences are referred to as irregular. We consider irregular vertices with valences lower than 3 or higher than 5 as multiple v3 or v5 collocated together (and therefore count them as multiple irregular vertices). Deﬁnition 1. A path γ is a sequence of edges ei = (vi , vi+1 ) for 0 ≤ i < R. R is the length of γ . A path is a loop if v0 = vR . Otherwise, γ is an open path. Deﬁnition 2. A (quadrilateral) patch P is a connected subset of the quadrilaterals in a mesh M without handles and it is enclosed by one or multiple loops, which we denote as P ’s boundaries. A patch is regular if there are no irregular vertices in its interior. Each vertex along the boundary can be a non-corner, convex corner, or concave corner. Convex and concave corners divide the boundary
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

A control graph is a cage-like structure that encodes a segmentation of the input mesh. In essence, it is a coarse two-manifold mesh comprised of (curved) edges on the input mesh and faces that we call surface patches. The surface patch is required to be pathwiseconnected, without handles, with at least one boundary loop, but not necessarily simply connected, for example, a topological disc with zero or more holes. In our system, a control graph is generated either automatically by detecting sharp features using angle thresholds, or interactively by clicking on speciﬁc edges, or imported from another existing algorithm. The control graph also encodes topological constraints for the subsequent patch quadrangulations that can be obtained by linear integer programming to satisfy additional requirements, for example, all patches need to be quadrangulatable. For each edge of the control graph, we determine the number of vertices on the edge such that the number of boundary vertices for all patches is given. Further, we deﬁne the number of inward edges for each vertex on

Exploring Quadrangulations

•

12:3

Fig. 1. Overview of our quadrangulation framework. (a) A control graph is generated by segmenting the underlying input mesh into a collection of surface patches; (b) the numbers of vertices on each edge can be computed by integer programming such that all patches are quadrangulatable by the minimum number of irregular vertices. Exhaustive enumerations of all topologies with the minimal number of irregular vertices for every patch are shown; (c) by picking one desired topology for each patch (marked), a full requadrangulation of the mesh can be generated.

the boundary by classifying the vertices as convex, concave, or non-corner emanating none, two, or one inward edges, respectively. See Figure 2(a) for an illustration. In the following, we present an algorithm and interface to enumerate and explore the different topologies for one patch at a time with ﬁxed boundary constraints. In a typical usage scenario, the user iterates between exploring the topologies of different patches and editing topological boundary constraints. Parameterization. We build a 2D parameterization for each patch to initialize the vertices with 2D positions during the topological enumeration. We typically use LSCM [L´ vy et al. 2002] in favor e of its conformal and open boundary traits. A comparison between different parameterization methods is described in the additional materials. We emphasize that a pure topological enumeration can work even without parameterization. The parameterization is used simply for visualization and sampling/ranking purposes. Inputs to the parameterization are the faces and vertices of the input mesh enclosed by the patch’s boundary. Since sharp features are typically captured in the control graph, we assume that the parameterization will be of reasonable quality. In practice, LSCM may generate nonbijective parameterizations if the patch’s shape is highly concave or has inner boundaries. We currently work around the problem by subdividing patches. A better solution to this problem would require implementation of more advanced parametrization algorithms.

Fig. 2. (a) A boundary conﬁguration of a patch with two boundary loops, each shown as a strip of arrows in counterclockwise (outer) and clockwise order (inner). Prescribed inward edges are shown as arrows pointing inwards. Note that convex corners (shown in blue) emanate no inward edge while concave corners (shown in red) emanate two inward edges; (b) decomposing a complex quadrangulation into a collection of simple triangle (blue) and pentagon (yellow) patches.

5.

ENUMERATING QUADRANGULATIONS FOR PATCHES

The input for this stage is a patch including its boundary conﬁguration, that is, the vertices at the boundary and their prescribed number of inward edges. A quadrangulation has to form connections between all inward edges. At a glance, the task can be intimidating.

There are O(x!) possible ways to connect x inward edges such that an exhaustive enumeration is simply infeasible. Besides, inner irregular vertices, of which the types, numbers, and positions are unknown, can divert the connections and create additional complexity. The main idea of our approach is to use the observation that every quad mesh can be partitioned into certain simple patches that contain one or zero irregular vertices (see Figure 2(b)). The enumeration problem is thus greatly reduced to enumerating subdivisions into simple patches. Another important idea of our approach is to devise an exploration strategy that can enumerate a reasonable subset of all possible quad meshes. Since every nontrivial boundary corresponds to inﬁnitely many pure quad meshes, we need to restrict the enumeration
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

12:4

•

C. H. Peng et al.

Fig. 3. Subdivision steps to quadrangulate a (a) parallelogram; (b) triangle; (c) pentagon. Inner v3s are shown in cyan and inner v5s are shown in orange. For a triangle and a pentagon, the topological position of the irregular vertex is uniquely obtained by solving a linear system. For visualization purposes, we locate the inner v3 or v5 at the least squares solution of the location that is perpendicular to the nearest boundary vertex on each side in the parameterization domain.

somehow. Our assumption is that irregular vertices are typically considered as undesirable in our primary target applications, because they break the pattern on the surface. Our exploration algorithm is therefore geared towards enumerating solutions with the minimal number of (inner) irregular vertices (v3 and v5) k, k ≥ |TVD|. We can therefore also bound the number of quads to a reasonable number as a secondary criterion. In this section, we ﬁrst present the overall subdivision algorithm in Section 5.1. The algorithm relies on the efﬁcient enumeration of subdivisions, which is described in Section 5.2. Strategies to ﬁlter redundantly generated subdivisions are described in Section 5.3. For larger examples, the enumeration might be time consuming. We therefore propose a fast sampling strategy to generate interesting topology variations early in Section 5.4. Finally, we propose tools to preview and arrange the topological variations in Section 5.5.

Fig. 4. (a) Left and middle: Two examples of boundary-case pentagons. Right: A boundary-case triangle; (b) a patch with a boundary that is incompatible with its potential embedding in a 4-by-8 parallelogram.

5.1

Subdivision-Based Quadrangulation of Patches

Our quadrangulation algorithm hierarchically subdivides a patch into smaller subpatches until every subpatch has become a quad. The process can be described by a subdivision tree: the root node is the input patch, the internal nodes are subpatches that need further subdivision, and the leaf nodes are quads. We explore this tree depth ﬁrst, and for each interior node we ﬁrst try to classify the patch and then subdivide it. In order of complexity, we distinguish ﬁve categories: (1) simple convex patches, (2) simple concave patches, (3) patches with |TVD| ≤ 1, (4) general patches with a single boundary loop, and (5) patches with multiple boundary loops. We describe how to classify and quadrangulate these ﬁve categories of patches in the following. The categories form a nested hierarchy, so that each lower category is a subset of all higher ones. The strategy of the quadrangulation algorithm is then to split higher-category patches into lower-category patches. 5.1.1 Simple Convex Patches. A simple convex patch is either a parallelogram, simple triangle, or simple pentagon, deﬁned as follows. Deﬁnition 5. A parallelogram is a convex 4-gon with two pairs of opposite sides of the same length. A simple triangle is a convex 3gon that can enclose exactly one v3. A simple pentagon is a convex 5-gon that can enclose exactly one v5 (Figure 3). In the following discussions, we refer to simple triangles and pentagons as triangles and pentagons. Recall from Peng et al. [2011] that the topological position, that is, the nearest boundary vertex on each side and the graph distances in between, of a single v3 or v5 within a convex 3-gon or 5-gon can be uniquely derived by solving a linear system formed by the side lengths. An inner irregular vertex is feasible if and only if all distances to the sides are positive. If some distances are zero, the irregular vertex actually lies on the corresponding boundaries, which we denote as boundary cases.
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

Interestingly the feasibility criteria are analogous to their Euclidean space counterparts: For a convex 3-gon to be a triangle, the length of the longest side has to be smaller than the sum of the other two. For a convex 5-gon to be a pentagon, the sum of the longest consecutive two sides has to be smaller than the sum of the other three. Quadrangulation of Simple Convex Patches. A parallelogram is recursively subdivided into smaller parallelograms along the longer pair of opposing sides (Figure 3(a)). For a triangle or a pentagon, we ﬁrst create the inner v3 or v5 and connect it to each side according to the solution of the linear system mentioned previously. The connections subdivide the patch into three or ﬁve parallelograms, which are subsequently subdivided (Figure 3(b), 3(c)). Special care is taken for boundary cases: a triangle with a boundary v3 is equivalent to a parallelogram and a pentagon with a boundary v5 is equivalent to a combination of multiple parallelograms (Figure 4). In practice, we precalculate the quadrangulations of simple convex patches of various side lengths to accelerate the algorithm. 5.1.2 Simple Concave Patches. A simple concave patch is a single-boundary loop concave patch that can be embedded in a simple convex one with the same TVD, denoted as the patch’s extended patch. This is achieved by the cave-ﬁlling algorithm (Appendix A). Figure 5 shows simple concave patches embedded inside a parallelogram, triangle, or pentagon. To determine if patch P is simple concave, we check the following in order. (1) The TVD of P has to match a parallelogram (0), triangle (1), or pentagon (−1). ˆ (2) P has a valid extended patch, P , according to the cave-ﬁlling algorithm. ˆ (3) The side lengths of P , which is a convex polygon with three to ﬁve sides, have to be compatible with a triangle, parallelogram, or pentagon. (4) We check if the embedding is valid, that is, the boundary of P ˆ does not penetrate the boundary of P (computed by a boundary walk). A counterexample is shown in Figure 4(b). Quadrangulation of Simple Concave Patches. Conceptually, we ﬁrst quadrangulate the extended patch and then remove the quads

Exploring Quadrangulations

•

12:5

Fig. 5. Simple concave patches embedded inside a (a) parallelogram; (b) triangle; (c) pentagon. P is shown in gray and the embedding into ˆ P is shown in yellow.

Fig. 6. Closed-form solutions for quadrangulating simple concave patches embeddable inside a (a) parallelogram; (b) triangle.

Fig. 7. (a) A nonsimple patch with TVD = 0 is subdivided into a triangle and a pentagon; (b) a nonsimple patch with TVD = 1 is subdivided into a triangle and a general 4-gon; (c) a nonsimple patch with TVD = −1 is subdivided into a pentagon and a general 4-gon; (d) a patch with TVD = 5 is subdivided into two subpatches of TVD = 3 (left) and 2 (right); (e) a patch’s two boundary loops are combined into one by making a cut connecting the outer and inner boundary loops. The subdivisions/cuts are shown in red.

that were added by the cave-ﬁlling algorithm. For an accelerated implementation we can directly compute the splits for the concave patch in closed form (Figure 6). 5.1.3 Patches with |TVD| ≤ 1. This category covers arbitrary (possibly concave) single-boundary loop patches, P , with |TVD| ≤ 1 that do not fall in the previous two categories. There are the following possibilities: (1) P does not have a valid extended patch ˆ ˆ P according to the cave-ﬁlling algorithm. (2) The side lengths of P are incompatible with a parallelogram, triangle, or pentagon. (3) P ’s embedding is invalid, that is, the boundary of P penetrates the ˆ boundary of P . Our strategy is to subdivide such a patch recursively until it is decomposed into a collection of simple concave or convex patches, explained in the following. For the second kind of patch, additional inner v3-v5 pairs are necessary for the patch to be quadrangulatable. Note that v3-v5 pairs do not affect the patch’s TVD. We distinguish three cases. ˆ —P is a convex 4-gon but not a parallelogram. The quadrangulation requires one or more v3-v5 pairs. We subdivide P into a triangle, which can be quadrangulated in closed form, and a general 5-gon, which is subsequently quadrangulated (Figure 7(a)). ˆ —P is a convex 3-gon but not a triangle. The quadrangulation requires a v3 plus one or more v3-v5 pairs. We subdivide P into a triangle and a general 4-gon (Figure 7(b)). ˆ —P is a convex 5-gon but not a pentagon. The quadrangulation requires a v5 plus one or more v3-v5 pairs. We subdivide P into a pentagon and a general 4-gon (Figure 7(c)). For the ﬁrst and third kinds of patch, we simply subdivide it heuristically by the scoring function described in Section 5.4. 5.1.4 General Single-Boundary Loop Patches. This category covers arbitrary single-boundary loop patches (not classiﬁable in the previous categories). Since these patches have to be subdivided, our aim is to minimize the number of subdivisions by keeping the TVD of the two subpatches as equal as possible. Empirically, this leads to fewer splits and approximately logarithmic time complexity. Thus, at every recursion, a patch of TVD = t is subdivided into two

subpatches of TVD = |t|/2 and |t|/2 . An example is shown in Figure 7(d) where a patch with TVD = 5 is subdivided into two subpatches of TVD = 3 and 2. 5.1.5 Multi-Boundary Loop Patches. This category covers patches with g + 1 boundary loops (g > 0). Since the patch is connected, the boundary loop with the largest bounding box in the 2D parameter domain is distinguished as the outermost contour, while all other boundary loops are considered contours surrounding inner holes. To quadrangulate P , edge strips connecting the outermost contour and each inner contour are required. A connection bridges the inner contour to the outermost contour with four additional convex corners at the two joints. Eventually, all boundary loops are merged and the patch has a uniﬁed boundary loop. The TVD of the patch thus can be calculated as the number of convex corners minus the number of concave corners on all boundary loops, plus the additional four convex corners per connection. To quadrangulate a multi-boundary loop patch, we ﬁrst transform it into single-boundary loop by making g aforementioned connections suggested by the scoring function described in Section 5.4. An example is shown in Figure 7(e).

5.2

Enumerating Subdivisions

Recall that our quadrangulation algorithm recursively subdivides a patch until it is decomposed into a collection of simple convex and simple concave patches, which are then uniquely quadrangulated. At each subdivision, we face the choices of: (1) which pairs of inward edges to connect and (2) how many inner vertices to generate on the connecting path, that is, its (topological) length. Enumerating these choices at every recursion is equivalent to enumerating the topologies of a patch. The guidelines to constrain the enumeration are given next. The choices of which pair of inward edges to connect are well constrained: when subdividing patches of the third and fourth categories, only connections that would lead to subpatches with desired TVD are acceptable. When subdividing patches of the ﬁfth category, only connections of inward edges of different boundary loops are
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

12:6

•

C. H. Peng et al.

Fig. 9. The quadrangulations with the minimal and maximal numbers of quads for a 2-sided patch with side lengths (7, 7) (left) and a 1-sided patch with side length 10 (right). Note that there are two v3 collocated as a v2 in the quadrangulations of the 1-sided patch. Fig. 8. (a) A quadrangulation of a 7-sided convex patch with the inequality in Theorem 6 being exactly satisﬁed, that is, the longest consecutive pair of sides (red) cannot be any longer if the lengths of other sides are ﬁxed. The 2|TVD| edges on the other sides and their emanating polychords that can never reach the longest pair are marked in green; (b) Left: quadrangulation of an 8-sided convex patch with the inequality in Theorem 6 being exactly satisﬁed. Right: the corresponding base pentagon quadrangulated with a boundary-case solution. Side S of the pentagon is shown in green, which is expanded to be the patch’s sides S3 to S6 with a strip of quads (green and yellow) and the three inner v5s (marked) inserted accordingly. Note that the lengths of S2 and Sn−1 are also increased by one.

acceptable. Constraints for the length of the connection path are described as follows. (1) The lengths of boundaries of the resulting subpatches need to be even, otherwise no quadrangulation exists. (2) Except for parallelograms, which can be quadrangulated without inner irregular vertices, the length of every effective side needs to be ≥2 since such a subpatch must accommodate at least a triangle (for v3) or a pentagon (for v5), of which every effective side length is at least 2. (3) Requirements for subpatches to be simple (parallelogram, triangle, and pentagon), which occur at subdividing patches of the third category, constrain the length of the connection to be a single value (parallelogram) or within a range (triangle and pentagon). (4) Requirements for subpatches to have more than ﬁve effective sides (TVD < −1), which occur at subdividing patches of the fourth category, constrain the length of the connection under the assumption of Theorem 6. Note that the third and fourth constraints are applicable only under the assumption that redundant v3-v5 pairs are to be avoided; otherwise, connections of arbitrarily long lengths can be accommodated by an arbitrary amount of v3-v5 pairs. THEOREM 6. Under the assumption that a patch is convex, TVD < −1, and the sum of the lengths of boundaries is even. Then, the patch is quadrangulatable without inner v3-v5 pairs ⇐⇒ the sum of the lengths of the longest consecutive pair of sides ≤ the sum of the lengths of all other sides minus 2|TVD|. PROOF. ⇒: Every polychord [Daniels et al. 2008] emanating from an edge of the longest consecutive pair of sides must end at the other sides; otherwise, it would subtract a 2-sided polygon (ending at the same side) or a triangle (ending at the adjacent side) out of the patch. In both cases, an inner v3 is implied, a contradiction to our assumption that patch has TVD < −1 (thus having v5) and no v3-v5 pairs. Furthermore, there are 2|TVD| edges on the other sides that can never emanate a polychord to the consecutive pair of sides (Figure 8(a)).
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

⇐: We denote the lengths of the longest consecutive pair of sides as s0 and s1 and the lengths of the other sides as s2 to sn−1 in counterclockwise order. Our idea is to show that there exists a corresponding base pentagon (see Figure 8(b)), that can be quadrangulated with a boundary-case solution, and that there always exists a way to extend the quadrangulation of the pentagon to be a quadrangulation of the patch. The lengths of the base pentagon’s sides are: s0 , s1 , s2 − 1, S, and sn−1 − 1 in counterclockwise order, where S = n−2 si − 2(|TVD| − 1). Note that si ≥ 2, 0 ≤ i < n by the i=3 aforementioned second constraint. It is straightforward to see that the pentagon can be quadrangulated with a solution in which the v5 is lying in the interior of side S. A quadrangulation of the patch can be then generated by inserting a strip of quads and |TVD| − 1 v3-v5 pairs (the v3s are on the patch’s boundary, serving as corners, and the v5s are internal) at corresponding locations right next to side S. See Figure 8(b) for an example. On the other hand, for subpatches with TVD > 1, the length of an effective side can be arbitrarily long, since there exists a polychord that begins and ends at the same effective side. Since the choice of the length of the connection is unbounded, we resort to the constraints for the maximal number of quads described next. THEOREM 7. When quadrangulated with two v3s and no v5, the maximal number of quads in a 2-sided patch (TVD = 2) with side lengths b0 and b1 is b0 /2 b1 /2 + b0 /2 b1 /2 . THEOREM 8. When quadrangulated with three v3s and no v5, the maximal number of quads in a 1-sided patch (TVD = 3) with side length b0 is (b0 b0 )/4 − 1. Proofs of Theorem 7 and 8 are based on analyzing the decomposition of the patches into triangles and are given in the additional materials. A 2-sided and a 1-sided patch quadrangulated with the maximal and minimal numbers of quads are shown in Figure 9. Finally, for subpatches with TVD ≥ 4, the number of quads can be arbitrarily large even with ﬁxed side lengths, since such a patch may contain an inﬁnite amount of inner polychord cycles. For such cases, we constrain the length of the connection by geometric heuristics. Thresholding the Number of Irregular Vertices. |TVD| determines the lower bound of (inner) irregular vertices (v3 and v5) required to quadrangulate a patch. The lower bound can be achieved only if irregular vertices of one type are solely used (v3 or v5). However, such solutions may not be feasible, for example, for skewed patches, additional v3-v5 pairs will be needed. Restricting the number of irregular vertices is thus equivalent to setting an upper limit on the number of v3-v5 pairs. To retrieve solutions with the minimally possible numbers of irregular vertices, our strategy is to enumerate quadrangulations with an increasing upper limit of v3-v5 pairs, beginning at zero. Empirically, we found that the space of enumerations grows exponentially with the number of allowed v3-v5 pairs. The computational overhead of the unsuccessful trials with insufﬁcient upper limits for v3-v5 pairs can thus be neglected.

Exploring Quadrangulations

•

12:7

Fig. 10. (a) Three parallel connections are shown in red. All of them subdivide the patch into a triangle and a pentagon and result in equivalent topologies. Note that the top one leads to a boundary-case triangle and the bottom one leads to a boundary-case pentagon; (b) comparing the ranking of connections. Connection C1 is top-ranked. C2 is ranked lower because it is less perpendicular to the boundary edges at its two vertices. C3 is also ranked lower because the geometric length of its subdivided edges deviates from the average length of the patch’s boundary edges. C4 is ranked lowest because it goes outside the 2D parameter domain.

Fig. 11. (a) A quadrangulation of which the topology proﬁle is {(3, 3, 4), (1, 1, 1, 4, 8), (1, 2, 3, 3, 4)}; (b) ordering of vertices in a patch for the graph isomorphism test.

5.4

Ranking and Sampling Topological Variations

5.3

Filtering Redundant Enumerated Topologies

A challenge of our enumeration framework is that multiple enumerated subdivision trees can result in equivalent topologies, corresponding to the multiple ways to decompose a quadrangulation into simple patches. We reduce exploration of redundant subdivision trees by ﬁltering parallel connections deﬁned as follows. Deﬁnition 9. Two connections, V 1–V 2 connected by L1 edges and V 3–V 4 connected by L2 edges, are parallel if: (1) V 1, V 3 are on the same side and V 2, V 4 are on the same side, (2) L1 = L2, and 3) the lengths of the boundaries between V 1, V 2 and V 3, V 4 are the same. From a set of parallel connections, we pick the highest ranked one according to the heuristics described in Section 5.4 and discard the rest. Examples of parallel connections are shown in Figure 10(a). It is straightforward to see that the resulting topologies of the parallel connections are different only by a parallelogram in between (assuming that v3-v5 pairs are to be avoided) and thus are equivalent. Note that this ﬁltering strategy is not yet exhaustive, and there may be redundant connections being explored. An analysis of the ﬁltering performance is provided in Section 7. Finally, we ﬁlter enumerated topologies that are equivalent, that is, graph isomorphic. Recognizing graph isomorphism can be done in linear time in our case since the topologies share the same patch boundaries. An algorithm is described in the following. Recognizing Graph Isomorphism. Vertices of a certain topology are ordered in increasing order according to their topological distance from the patch boundary. The boundary vertices, of which the distances are 0, are sorted in a counterclockwise fashion starting at a ﬁxed boundary vertex. Inner vertices with distance d (d > 0) are sorted as follows. We deﬁne the parent vertex of an inner vertex as the one that is sorted foremost among its adjacent vertices of distance d − 1. For two inner vertices V 1 and V 2, V 1 is sorted prior to V 2 if V 1’s parent vertex is sorted prior to V 2’s and vice versa. If their parent vertices are the same, V 1 is sorted prior to V 2 if it is prior among the parent vertex’s neighbor list and vice versa. Such orderings can be found by a simple ﬂooding strategy in linear time. It is straightforward to see that such an ordering is unique for a given topology. This algorithm is thus guaranteed to detect graph isomorphism among equivalent topologies. See Figure 11(b) for an example.

We can retrieve a quick snapshot of the whole space of enumerations by sampling only a subset of connections at each recursion. First, we rank each connection by a simple scoring heuristic considering the following geometric properties. Highly ranked connections have a better chance to generate quadrangulations with better geometric qualities and vice versa. Assuming that the connection is a straight line in the 2D parameter domain connecting V 1 and V 2 uniformly subdivided into L1 edges, we ﬁrst measure how perpendicular the connection is to the boundary edges at V 1 and V 2. A more perpendicular connection means that we have a better chance of forming right angles at V 1 and V 2. Second, we measure the difference of the geometric length of the L1 subdivided edges to the average geometric length of the patch’s boundary edges. A smaller difference implies a more appropriate choice of L1. Third, we favor the geometrically shorter among connections that are equally ranked by the ﬁrst two properties. Finally, we penalize connections that go outside the 2D parameter domain, which may happen for patches with geometrically concave parts. An illustration of the ranking is shown in Figure 10(b). After the connections are sorted by the heuristic, we can perform sampling in an uniform or greedy way. In the uniform way, we sample one connection among similarly ranked connections at each recursion. A snapshot that covers a variety of quadrangulations can thus be retrieved. In the greedy way, we simply sample the top-ranked connections, such that a subset of quadrangulations with better geometric qualities can be retrieved. In both ways, the exploration is done in a depth-ﬁrst manner but with the number of child nodes at each branch reduced.

5.5

Navigating Topological Variations

We develop a real-time browsing interface to help users visually navigate topological variations. Note that only unique topologies are presented after the aforementioned ﬁltering process. Since enumerated topologies are updated in real time, the aforementioned ranking heuristics play an important role by determining which topologies are presented ﬁrst. A reasonable 2D visualization for each topology is generated by applying Laplacian smoothing with the boundary vertices ﬁxed. Users can choose to sort the topological variations by three types of statistics: (1) density (number of quads), (2) geometric quality criteria described in Yang et al. [2011], and (3) the topology proﬁle described next. Assume that there are n (inner) irregular vertices in a topology, vi , 0 ≤ i < n, sorted in ascending order of valences: l(vi ) ≤ l(vi+1 ), 0 ≤ i < n − 1. For each irregular vertex, vi , the sequence, si,j for
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

12:8

•

C. H. Peng et al. programing problem is as follows.
n−1

0 ≤ j < l(vi ), denotes the lengths of emanated separatrices stopped by hitting the boundary or other interior irregular vertex, which are sorted in ascending order. Sequences of each irregular vertex are further sorted in ascending order by considering each sequence as a decimal number. For example, a sequence of 3 − 4 − 5 from a v3 is placed before a sequence of 0 − 1 − 2 − 3 − 4 from a v5. The sequences of all irregular vertices congregated in the sorted order serve as a topological proﬁle summarizing the relative positions of the inner irregular vertices; see Figure 10. Furthermore, topological variations that are rotationally equivalent, that is, corresponding to one topology being rotated, have the same topological proﬁle. Such variations can be identiﬁed and clustered to reduce visual clutter.

|Li /Oi − 1| → min
i=0

such that

(1)

for every edge Li > 0 and |Li − Oi | ≤ C, i = 0, . . . , n − 1

and for every patch Li − 2Sj = 0.
Li ∈Pj

Additionally, depending on the type of each individual patch, Pj , —patches with nonzero TVD: Li ≥ 2, —parallelograms: Li0 = Li2 , —triangles: Li0 + 1 ≤ Li1 + Li2 , —pentagons: Li0 + Li1 + 1 ≤ i=i{0,1} Li , —N -gons with TVD < − 1: Li0 + Li1 + 2|TVD| ≤
i=i{0,1}

6.

INTEGER PROGRAMMING

Assigning numbers of vertices lying on each boundary edge of a control graph path, that is, their (topological) length, can be a nontrivial task when there exist additional requirements for the patches. We formulate the task as a linear, pure integer programming problem in which the variables are the lengths of edges and each patch imposes its requirements as linear constraints. We denote the length of the i-th edge as a positive integer variable, Li , 0 ≤ i < n, where n is the number of edges. A minimal requirement for all patches to be quadrangulatable is that the sum of side lengths is even for every patch, written as Li ∈Pj Li − 2Sj = 0 for every patch Pj (Sj are positive integer slack variables). It is straightforward to see that feasible solutions exist, for example, if every side length is even. To further require that certain patches can be quadrangulated without v3-v5 pairs, the following constraints are added. —For a patch with nonzero TVD, lengths of every side ≥ 2. This corresponds to the second constraint of connection lengths in Section 5.2. —For a triangle (TVD = 1), parallelogram (TVD = 0), and pentagon (TVD = −1), side lengths are constrained by Deﬁnition 5. —According to Theorem 6, for a patch with TVD < −1, the sum of the lengths of every consecutive pair of sides ≤ the sum of the lengths of all other sides minus 2|TVD|. The aforesaid constraints are applicable only under the assumption that a patch is convex and has a single boundary loop. Therefore, patches with multiple boundary loops and concave patches need to be split with the heuristics described in Sections 5.1.5 and 5.4 ﬁrst. In practice, we apply the preceding constraints to all patches initially. If the system is overconstrained, we heuristically drop constraints for selected patches until the system becomes feasible. Feasible solutions to the previous problem guarantee that all patches are jointly quadrangulatable; however, they may be geometrically undesirable, for example, geometrically long edges are segmented sparsely and vice versa. To address this problem, every edge Li is given an optimal topological length Oi as the rounded ratio of its geometric length to a desired edge length. We ﬁrst impose the following constraints: |Li − Oi | ≤ C, 0 ≤ i < n, where C is a (nonnegative integer) value thresholding the feasible range of each Li . Furthermore, we formulate the cost function as n−1 |Li /Oi − 1| under the assumption that the length of i=0 each optimally subdivided segment is one. Each nonlinear term (|Li /Oi − 1|) is approximated as a linear function within the feasible range of Li in a least squares sense, for example, as a linear equation passing through (Oi − C, |(Oi − C)/Oi − 1|) and (Oi + C, |(Oi + C)/Oi − 1|). A mathematical formulation of the integer
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

Li

need to hold for all admissible Li ∈ Pj . We denote Lik as the length of the k-th next side after Li in Pj in a counterclockwise order. For example, Li0 denotes Li itself, Li1 denotes the length of the side next to Li in Pj , and so on. We solve the problem by lpsolve [Berkelaar et al. 2004].

7.

RESULTS AND APPLICATIONS

Complexity of the Enumeration. The only competing approach, that we are aware of, is the brute-force enumeration of all possible connections of inward edges, for example, Marinov and Kobbelt [2006]. For simplicity, we present an example where the number of inner irregular vertices of the patch is minimal, a 100-by-100 2-sided patch (TVD = 2). In the brute-force approach, there are a staggering 198!/2 possible connections of the 198 inward edges, even before considering the effect of inner irregular vertices. In our approach, we need to enumerate all ﬁrst-level subdivisions between the i-th (1 ≤ i ≤ 99) inward edge of the ﬁrst side and the j -th (1 ≤ j ≤ 99) inward edge of the second side. By ﬁltering, we just need to enumerate one connection among all pairs with i − j = d, where −98 ≤ d ≤ 98. After the ﬁrst level of subdivision, we have two simple triangles that are uniquely quadrangulated. In total, we just need to enumerate 197 possible cases. Comparison to Peng et al. [2011]. In the Peng et al. paper, an exhaustive enumeration of all possible topologies involving up to two irregular vertices (v3 and v5) is provided. In this article, we extend the idea to enumerate all possible topologies of a given patch exhaustively, upper bounded by the number of irregular vertices. Moreover, their method requires an initial mesh to work on. Statistics. Table I shows the time spent on enumerating all topologies with the minimal number of irregular vertices (or capped at a reasonable number of quads if such topologies are inﬁnite) for patches shown in the article, recorded on a standard 2.66 GHz PC. In most cases, the ﬁrst topology is retrieved instantly. For patches with excessive amounts of variations such as Figure 7(e), we only sample a fraction of all possibilities. We ﬁnd that the time complexity does not depend on the number of vertices on the boundaries; instead, it is proportional to the number of nonparallel connections enumerated during the subdivisions. Shape-Space Exploration. Shape-space exploration is a powerful tool [Yang et al. 2011] to modify a Planar Quad (PQ) mesh, while faithfully preserving the planarity of the faces and satisfying

Exploring Quadrangulations

•

12:9

Fig. 12. Shape-space exploration on different topologies. The cap of an elliptic paraboloid is PQ meshed using twenty different topological patterns (top row) and planarity-preserving shape-space exploration is applied on each topology such that the boundary is ﬁxed while the interior vertices are allowed to move. The best eight eigendirections are sampled for each topology. The results (clockwise) are ranked in decreasing fashion according to planarity (a), circularity (b), and fairness (c). The color shows the afﬁliation with the topological pattern.

Fig. 13. Shape-space exploration of PQ meshes. For a 2D PQ mesh in the plane, six corner points are kept ﬁxed and the remaining vertices move freely to form 3D shapes. From thirty topological patterns, the best “bumping” shape was selected. The color coding reﬂects the discrete Gaussian curvature (a) and the average kink angle between the neighboring faces (b); (c) the best explored mesh in terms of minimal kink angle together with its planar input is shown.

Table I. Timing statistics showing (1) the number of unique topologies after ﬁltering, (2) clusters of rotationally equivalent topologies, (3) total enumerated topologies, and (4) the time spent for complete enumerations and retrieving the ﬁrst topology.
patch v3- boun. unique total time time TVD v5 length topo. cluster topo. (total) (ﬁrst) 1 0 0 0 0 0 1 0 22 56 34 66 36 66 30 16 12 536 7 4 57 559 30 254 12 525 5 4 35 558 30 52 36 0.17 0.01 568 198.62 0.06 77 10 120 3064 232 5166 0.28 0.00 0.43 0.08 4.34 0.05 79.89 0.06 1.59 0.03 23.09 0.01

Figure 7a 0 Figure 7e,5% −4 Figure 8b Figure 14,1 Figure 14,2 Figure 14,3 Figure 13 Figure 18 −3 −2 2 −4 1 4

additional constraints like proximity to a reference object, fairness, etc. Each mesh corresponds to a point in a high-dimensional shape space, and the planarity constraint forms a certain manifold in that space, called the planarity manifold. We apply shape-space exploration to investigate the most natural behavior of different topological patterns and to understand the signiﬁcance of topology in the genesis of PQ meshes. While the original shape-space exploration

itself gives rise to a large variety of meshes with one ﬁxed topology, we can now explore an even wider spectrum of possible shapes by varying the topology and geometry together. We demonstrate how shape-space exploration interacts with various topological patterns. In Figure 12, we show the variations of a 3D mesh whose planar elliptic boundary has been fully ﬁxed. The variations are ranked according to three different geometric objectives (planarity, fairness, circularity) and color coded in the visualization such that we can observe which topologies are well suited for a speciﬁc geometric objective. A shape-space exploration that starts with a fully planar mesh is shown in Figure 13. Six feature vertices are selected to remain in the plane while the remaining vertices are freely movable. The goal of this exploration is to see the natural shapes of each topology. As it is difﬁcult to compare general shapes, we apply a geometric heuristic to select the best bump shape for thirty different topologies. This example illustrates that some topologies are more suitable for a selected target shape. Exploring Alternative Requadrangulations. We show that our enumeration framework enables users to explore multiple distinctive requadrangulations of an input mesh. In Figure 14, we explore alternative requadrangulations of an architectural tower model. Each alternative has its own advantages and disadvantages. In general, there is a trade-off between sharp feature ﬁdelity and the number of irregular vertices. In Figure 15, we requadrangulate the Fandisk model at resolutions that are coarser than the ones in Bommes
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

12:10

•

C. H. Peng et al.

Fig. 14. Exploring alternative requadrangulations of an architectural tower model. Left: the input tower model with a large number of irregular vertices and small faces due to the computation of intersections by a professional modeling package. Second left to right: ﬁve requadrangulations explored with our enumeration framework. The ﬁrst and second both consider the hyperboloid-shaped facade on the front as an 8-sided patch, while the former favors uniform quad size and the latter favors alignment of irregular vertices. The third alternatively considers the front facade as a 4-sided patch, and four v3s are removed. The fourth no longer preserves the sharp feature on the right, and the two adjacent patches are merged. It has fewer irregular vertices at the cost of less sharp feature ﬁdelity. The ﬁfth discards all sharp features on the front in exchange for even fewer irregular vertices.

Fig. 15. Coarse requadrangulations of the Fandisk model. Left: the input mesh from Bommes et al. [2009]. Second left to right: coarser requadrangulations with exact sharp feature ﬁdelity. Note that for the one with 232 quads, we allow irregular vertices to appear on the patch boundaries and achieve a more regular ﬂow of mesh lines.

Fig. 16. Requadrangulations of a single curved patch with two inner holes. Left: a standard requadrangulation with four v5. Middle: an alternative in which the interior meshing is completely regular by moving the v5 to the boundaries (two v5 are collocated as a v6). Right: another alternative that favors uniform quad size at the cost of additional irregular vertices. The arrangement of irregular vertices signiﬁcantly inﬂuences the overall grid layout as observed from the zebra pattern rendering.
ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

Exploring Quadrangulations

•

12:11

Fig. 17. Requadrangulations of the Accessory model. Left: the input mesh from Zhang et al. [2010] with several redundant v3-v5 pairs and unnecessary v6. Middle: a requadrangulation with the same conﬁguration of irregular vertices on patch boundaries. All patches are now quadrangulated without redundant irregular vertices. Right: an alternative with different allocations of the v5 on the top facades.

Fig. 18. A gallery of different quadrilateral meshes for a Shuriken. The quadrilaterals of the model were colored in a postprocess. Topological variations have distinctive, interesting patterns of mesh lines.

et al. [2009] and Zhang et al. [2010] while maintaining all sharp features. In Figure 17, we requadrangulate the Accessory model in Zhang et al. [2010] to remove all the redundant v3-v5 pairs. In Figure 16, we explore alternative requadrangulations of a single curved patch with two inner holes. Throughout the examples, explorations are done not only by enumerating topologies of patches, but also by exploring different conﬁgurations of the control graphs. The vertex positions are optimized by methods desrcribed in Liu et al. [2006] as a postprocess. Art and Design. Topology is important for art and design when the mesh lines or quad faces are visible. We show designs of planar Shuriken (Japanese dart) patterns inspired by the enumerated topologies (Figure 18). In Figure 19, we show font designs by quadrangulating the interiors inspired by Bessmeltsev et al. [2012]. Limitations and Future Work. One major limitation of our work is that we restrict our analysis to pure quad meshes. A fruitful avenue of future work is to analyze the topology of mixed quadrilateral and triangular meshes. A limitation of the enumeration algorithm is that we cannot ﬁlter all redundant subdivisions early in the process. It would be interesting to explore if there were an optimal algorithm to detect all redundant efforts. We focus on examples from architecture, art, and design, in which control graphs can be trivially generated. While our framework is applicable to organic models, such as the bunny (Figure 20), manual efforts are required to generate the control graph. A general and fast requadrangulation method may be achievable by combining mesh segmentation methods and our patch quadrangulation algorithm. Finally, we did not investigate the impact of topology in simulations, for example, FEM and high-order surface ﬁtting, but we hope that our work can also have impact on these areas.

results illustrate that mesh topology has an impact on the quality of the requadrangulation, especially when the mesh lines are visible.

ELECTRONIC APPENDIX
The electronic appendix to this article is available in the ACM Digital Library.

APPENDIX A. The Cave-Filling Algorithm
The goal of this cave-ﬁlling algorithm is to ﬁnd the extended patch ˆ of an N -sided polygon (N ≥ 0) P , P , which is the minimal simple ˆ convex patch that encloses P . P is deﬁned under the assumption ¯ ¯ that the exterior of P , P , is regular. We assume that P is regular unless otherwise speciﬁed. For brevity, the proofs of the following theorems are provided in the online appendix available in the ACM Digital Library. Deﬁnition 10. A boundary edge of P is projected onto an edge ¯ ¯ in P if we can ﬁnd a rectangular part of P with the two edges as its two opposite sides. ¯ Note that, due to the regularity of P , a boundary edge of P either projects onto another boundary edge of P on the opposite side, or ˆ it projects onto an edge of P . THEOREM 11. A patch P is free of consecutive concave corners ˆ ⇐⇒ every boundary edge of P projects onto an edge of P . According to Theorem 11, if a patch, P , is free of consecutive concave corners, then every boundary edge of P is projected onto ˆ an edge of P , and boundary edges of P ’s parallel sides are projected ˆ ˆ onto parallel sides of P (see Figure 5). Since P is simple, it cannot ˆ have multiple sides that are parallel to each other. Thus, P must be a simple N -sided polygon (with N being the number of effective sides of P ) with the same lengths as the lengths of P ’s effective sides. Our goal is thus to transform the given patch, P , into another patch, P , that is free of consecutive concave corners and has the same extended patch as P . The process is realized by a cave-ﬁlling algorithm that removes all caves from P .

8.

CONCLUSION

Here we presented a framework to explore quad mesh topologies. The core of our work is a systematic enumeration algorithm that can generate all possible quadrangular meshes inside a deﬁned boundary with an upper limit of v3-v5 pairs. The algorithm is orders of magnitude more efﬁcient than previous work. The combination of topological enumeration and shape-space exploration demonstrates that mesh topology has a powerful inﬂuence on geometry. The

ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

12:12

•

C. H. Peng et al.

Fig. 19. Quadrangulations of font interiors. We choose Georgia (Bold, Italy) as a challenging example for its curved, asymmetric outlines. Left: a quadrangulation with regular interiors. However, some parts such as the left of the letter d can never be uniformly quadrangulated without irregular vertices. Right: an alternative that favors uniform quad size at the cost of additional irregular vertices. Bottom left: 2-coloring of the quads is possible because the meshing is regular (quads are merged when necessary). Bottom right: a third color is necessary for quads adjacent to the v3 and v5 vertices.

Deﬁnition 12. A path γ is straight if every interior vertex in γ is regular. Furthermore, every interior vertex’s 1-ring neighborhood is evenly divided by γ , that is, there are two quadrilaterals on both sides. ¯ Deﬁnition 13. A cave of P is a subset of quadrilaterals in P that ¯ can be completely separated from P by one straight path from a convex corner to another boundary vertex of P . We denote such a straight path as the closure of the cave. THEOREM 14. There exists a cave ⇐⇒ there exist consecutive concave corners for P . Note that identifying and removing arbitrary caves is a nontrivial task. Caves may contain smaller subcaves, and there is no simple way to ﬁnd the other end of the closure emanating from an arbitrary convex corner. Instead, we take an incremental approach. Deﬁnition 15. A simple cave is a cave that is equivalent to a ¯ simple rectangular part of P . Its four corners are identiﬁed as a convex corner of P , followed by two consecutive concave corners of P , followed by an arbitrary vertex of P . The three possible cases of a simple cave are shown in Figure 21(a). In the ﬁrst two cases, the closure emanating from the convex corner hits a noncorner on the opposing side. In the third case, the closure connects two convex corners. There are no other possible cases. Note that the closure of the simple cave can be of zero length. THEOREM 16. A patch P has a simple cave ⇐⇒ P has a cave. Due to its simple rectangular shape, a simple cave can be easily ¯ identiﬁed, removed from P , and added to P by a simple cave-ﬁlling operation. According to Theorem 16, all caves of a patch can be removed by iteratively exhausting simple cave-ﬁlling operations in arbitrary order. An example is shown in Figure 22. Finally, we note ˆ that P will not change during the simple cave-ﬁlling operations according to the following theorem. THEOREM 17. Applying simple cave-ﬁlling operations on P will ˆ not affect P . In summary, the algorithm removes all caves of P by repeating the simple cave-ﬁlling operations in an exhaustive manner and, if
Fig. 21. (a) Examples of possible cases of a simple cave shown as yellow ¯ parts of P . Convex corners of P are shown in blue, concave corners in red, and noncorners in black. (b) A patch with unremovable caves.

Fig. 20. Quadrangulating an organic model. Left: A triangular Bunny mesh and a manually generated control graph based on an initial segmentation by Variational Shape Approximation [Cohen-Steiner et al. 2004]. Right: a quadrangulation. The marked region shows that the quality of the control graph depends on the tessellation of the input mesh. Here, unnecessary corners are caused by jagged-edge strips.

successful, returns a cave-free patch, P . P is free of consecutive concave corners according to Theorem 14 and has the same extended ˆ ˆ patch as P according to Theorem 17. P (the same as P ) is easily retrieved from P since these two patches share the same boundary structure (the number of effective sides and their lengths). If P still has consecutive concave corners after all simple cave-ﬁlling ¯ operations are exhausted, then the regularity assumption of P is ˆ violated and P is undeﬁned (Figure 21(b)). In such a case, our algorithm reports that P cannot be extended into a regular patch.

ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

Exploring Quadrangulations

•

12:13

Fig. 22. Removing a complex cave of a patch by iteratively applying simple cave-ﬁlling operations. Green faces denote the latest simple cave being ﬁlled.

ACKNOWLEDGMENTS

We thank Helmut Pottmann and the anonymous reviewers for insightful comments, Alexander Schiftner and authors of Bommes et al. [2009] and Zhang et al. [2010] for providing datasets, Dongming Yan for an implementation of Cohen-Steiner et al. [2004], Yoshihiro Kobayashi and Christopher Grasso for renderings, and Virginia Unkefer for the proofreading.
REFERENCES P. Alliez, D. Cohen-Steiner, O. Devillers, B. Levy, and M. Desbrun. 2003. Anisotropic polygonal remeshing. ACM Trans. Graph. 22, 3, 485–493. M. Berkelaar, K. Eikland, and P. Notebaert. 2004. Ipsolve: Open source (mixed-integer) linear programming system. http://lpsolve.sourceforge. net/5.5/ M. Bessmeltsev, C. Wang, A. Sheffer, and K. Singh. 2012. Design-driven quadrangulation of closed 3d curves. ACM Trans. Graph. 31, 5. T. D. Blacker And M. B. Stephenson. 1991. Paving: A new approach to automated quadrilateral mesh generation. Int. J. Numer. Methods Engin. 32, 4, 811–847. D. Bommes, B. Levy, N. Pietroni, E. Puppo, M. Tarini, and D. Zorin. 2012. State of the art in quad meshing. In EuroGraphics STARS. D. Bommes, H. Zimmer, and L. Kobbelt. 2009. Mixed-integer quadrangulation. ACM Trans. Graph. 28, 3, 77. M. Botsch, L. Kobbelt, M. Pauly, P. Alliez, and B. Levy. 2010. Polygon Mesh Processing. A. K. Peters, Natick, MA. D. Cohen-Steiner, P. Alliez, and M. Desbrun. 2004. Variational shape approximation. In Proceedings of the Conference on Computer Graphics and Interactive Techniques (SIGGRAPH’04). ACM Press, New York, 905–914. J. Daniels, C. T. Silva, J. Shepherd, and E. Cohen. 2008. Quadrilateral mesh simpliﬁcation. ACM Trans. Graph. 27, 5, 148:1–148:9. S. Dong, P.-T. Bremer, M. Garland, V. Pascucci, and J. C. Hart. 2006. Spectral surface quadrangulation. ACM Trans. Graph. 25, 3, 1057–1066. S. Dong, S. Kircher, and M. Garland. 2005. Harmonic functions for quadrilateral remeshing of arbitrary manifolds. Comput.-Aid. Geom. Des. 22, 392–423. F. Kalberer, M. Nieser, and K. Polthier. 2007. Quadcover – Surface parameterization using branched coverings. Comput. Graph. Forum 26, 3, 375–384. B. Levy, S. Petitjean, N. Ray, and J. Maillot. 2002. Least squares conformal maps for automatic texture atlas generation. ACM Trans. Graph. 21, 3, 362–371.

Y. Liu, H. Pottmann, J. Wallner, Y.-L. Yang, and W. Wang. 2006. Geometric modeling with conical meshes and developable surfaces. ACM Trans. Graph. 25, 3, 681–689. M. Marinov and L. Kobbelt. 2004. Direct anisotropic quad-dominant remeshing. In Proceedings of the 12th Paciﬁc Conference on Computer Graphics and Applications (PG’04). 207–216. M. Marinov and L. Kobbelt. 2006. A robust two-step procedure for quad-dominant remeshing. Comput. Graph. Forum 25, 3, 537–546. S. Maza, F. Noel, and J. Leon. 1999. Generation of quadrilateral meshes on free-form surfaces. Comput. Struct. 71. A. S. M. Nasri and Z. Yasseen. 2009. Filling n-sided regions by quad meshes for subdivision surfaces. Comput. Graph. Forum 28, 1644–1658. J. Palacios and E. Zhang. 2007. Rotational symmetry ﬁeld design on surfaces. ACM Trans. Graph. 26, 3, 55. C. Park, J.-S. Noh, I.-S. Jang, and J. M. Kang. 2007. A new automated scheme of quadrilateral mesh generation for randomly distributed line constraints. Comput.-Aid. Des. 39, 4, 258–267. C.-H. Peng, E. Zhang, Y. Kobayashi, and P. Wonka. 2011. Connectivity editing for quadrilateral meshes. ACM Trans. Graph. 30, 6, 141. N. Ray, W. C. Li, B. Levy, A. Sheffer, and P. Alliez. 2006. Periodic global parameterization. ACM Trans. Graph. 25, 4, 1460–1485. N. Ray, B. Vallet, L. Alsonso, and B. Levy. 2009. Geometry aware direction ﬁeld design. ACM Trans. Graph. 29, 1, 1:1–1:11. N. Ray, B. Vallet, W. C. Li, and B. Levy. 2008. N-symmetry direction ﬁeld design. ACM Trans. Graph. 27, 2, 10:1–10:13. S. Schaefer, J. Warren, and D. Zorin. 2004. Lofting curve networks using subdivision surfaces. In Proceedings of the 2nd EuroGraphics Symposium on Geometry Processing (SGP’04). 103–114. Y. Tong, P. Alliez, D. Cohen-Steiner, and M. Desbrun. 2006. Designing quadrangulations with discrete harmonic forms. In Proceedings of the 4th EuroGraphics Symposium on Geometry Processing (SGP’06). 201–210. D. White and P. Kinney. 1997. Redesign of the paving algorithm: Robustness enhancements through element by element meshing. In Proceedings of the 6th International Meshing Round Table. 323–335. Y.-L. Yang, Y.-J. Yang, H. Pottmann, and N. J. Mitra. 2011. Shape space exploration of constrained meshes. ACM Trans. Graph. 30, 6, 124:1–124:12. E. Zhang, K. Mischaikow, and G. Turk. 2006. Vector ﬁeld design on surfaces. ACM Trans. Graph. 25, 1294–1326. M. Zhang, J. Huang, X. Liu, And H. Bao. 2010. A wave-based anisotropic quadrangulation method. ACM Trans. Graph. 29, 4, 118:1–118:8.
Received November 2012; revised July 2013; accepted November 2013

ACM Transactions on Graphics, Vol. 33, No. 1, Article 12, Publication date: January 2014.

