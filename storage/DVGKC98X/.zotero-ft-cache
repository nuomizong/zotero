Flexible Simulation of Deformable Models Using Discontinuous Galerkin FEM
Peter Kaufmann a,â , Sebastian Martin a , Mario Botsch b , Markus Gross a
a Computer b Computer

Graphics Laboratory, ETH Zurich

Graphics Group, Bielefeld University

Abstract We propose a simulation technique for elastically deformable objects based on the discontinuous Galerkin ï¬nite element method (DG FEM). In contrast to traditional FEM, it overcomes the restrictions of conforming basis functions by allowing for discontinuous elements with weakly enforced continuity constraints. This added ï¬exibility enables the simulation of arbitrarily shaped, convex and non-convex polyhedral elements, while still using simple polynomial basis functions. For the accurate strain integration over these elements we propose an analytic technique based on the divergence theorem. Being able to handle arbitrary elements eventually allows us to derive simple and eï¬cient techniques for volumetric mesh generation, adaptive mesh reï¬nement, and robust cutting. Furthermore, we show DG FEM not to suï¬er from locking artifacts even for nearly incompressible materials, a problem that in standard FEM requires special handling.
Key words: Physically-Based Simulation, Finite Element Methods, Discontinuous Galerkin

1. Introduction Finite element methods (FEMs) have become an indispensable tool in computer graphics, where they are mostly used for physically-based simulation of deformable objects or ï¬uids. Their solid mathematical foundation helps to achieve realistic simulation results, for instance in computer animation or surgery simulation.
â Corresponding author. Email addresses: peterkau@inf.ethz.ch (Peter Kaufmann), smartin@inf.ethz.ch (Sebastian Martin), botsch@techfak.uni-bielefeld.de (Mario Botsch), grossm@inf.ethz.ch (Markus Gross). Preprint submitted to Graphical Models

In particular in computer graphics, FEM simulations are mostly based on tetrahedral or hexahedral meshes. While this allows for simple and efï¬cient implementations, topological changes of the simulation domain require complex and error-prone remeshing to maintain a consistent simulation mesh. Dynamically adjusting the mesh is, however, of crucial importance in several simulation scenarios, such as fracture, interactive cutting in medical applications, or adaptive reï¬nement of complex domains. The use of more general polyhedral elements in FEM was recently shown to considerably simplify cutting and fracture simulations [Wicke et al., 2007; Martin et al., 2008]. However, the strict conformity constraints of standard FEM require comparatively
1 October 2008

complex shape functions for those elements. In a slightly diï¬erent context, the discontinuous element meshes of the PriMo framework enable adaptive mesh reï¬nement for interactive shape deformation [Botsch et al., 2006, 2007]. Due to the missing physical accuracy this method is not directly useful for physically-based simulations though. In this paper we propose a ï¬exible and eï¬cient simulation technique for corotated linear elasticity based on the discontinuous Galerkin ï¬nite element method (DG FEM) [Cockburn, 2003]. Our approach conceptually generalizes the aforementioned techniques, and overcomes their limitations by combining their respective strengths: Like standard continuous Galerkin FEM (CG FEM), the DG formulation is physically accurate, in the sense that under element reï¬nement the approximation converges toward the exact solution of the involved PDE. Similar to PriMo, our DG approach supports arbitrary polyhedral elements and discontinuous meshes with weakly enforced continuity, thereby allowing for easy and ï¬exible mesh restructuring. In comparison to CG FEM, the increased ï¬exibility of DG FEM enables adaptive reï¬nement of mesh elements (h-reï¬nement) and of the shape functionsâ polynomial degree (p-reï¬nement) in a simple and eï¬cient manner. Furthermore, in order to support ï¬exible simulations of deformable models for Computer Graphics applications, we extend DG FEM by the following components: â¢ We simulate arbitrary polyhedral elements using simple and eï¬cient polynomial basis functions and a fast and accurate volumetric integration technique (Section 5). â¢ We generalize stiï¬ness warping to discontinuous polyhedral elements, thereby allowing linear strain measures to be used even in the presence of large deformations (Section 6). â¢ For embedded simulations we reconstruct from the discontinuous mesh a smooth displacement ï¬eld based on moving least squares (MLS) interpolation (Section 7) and present a suitable collision handling technique (Section 8). This paper is an extended version of the conference paper [Kaufmann et al., 2008], which enables us to introduce the fundamentals of DG FEM in more detail (Section 3) as well as to demonstrate the versatility of our approach on more examples, includ2

ing slicing-based mesh generation, adaptive stressbased element reï¬nement, ï¬exible and eï¬cient cutting, and locking analysis (Section 9).

2. Related Work Starting with Terzopoulos et al. [1987], physicallybased methods have been successfully employed for the simulation of deformable solids, thin shells, cloth, and ï¬uids. The focus of this paper, and of the discussions in this section, is on deformable solids, and on the ï¬nite element method (FEM) as the underlying simulation scheme. For a more detailed survey of this topic we refer the reader to [Nealen et al., 2006].

2.1. Cutting & Fracture Fracturing can eï¬ciently be performed by restricting cuts to existing element boundaries [MÂ¨ller u and Gross, 2004], but this approach typically is not accurate enough for more sophisticated simulations. Splitting individual elements allows for precise fracturing and cutting, but in turn requires element decompositions [Bielser and Gross, 2000; Bielser et al., 2003] and/or general remeshing [OâBrien and Hodgins, 1999; OâBrien et al., 2002; Steinemann et al., 2006a]. When accommodating the crack surface, special care has to be taken to avoid numerically unstable sliver elements. Similarly, Bargteil et al. [2007] performed remeshing to remove degenerate elements during large plastic deformations. Meshless approaches intrinsically avoid remeshing by using particles instead of a simulation mesh [MÂ¨ller et al., 2004a]. While this consideru ably simpliï¬es the actual topological changes, the material distance, which controls the mutual inï¬uence of simulation nodes, has to be adjusted. This can be accomplished either by recomputing special shape functions [Pauly et al., 2005] or by updating a distance graph [Steinemann et al., 2006b]. Note, however, that these approaches still require resampling in order to guarantee a suï¬ciently dense discretization in the vicinity of cracks and cuts. A mesh-based alternative to remeshing is the virtual node algorithm [Molino et al., 2004], which, instead of splitting elements, duplicates them and embeds the surface in both copies. While the origi-

nal approach was limited to cutting each element at most three times, its recent generalization [Sifakis et al., 2007a,b] overcomes this restriction. Wicke et al. [2007] and Martin et al. [2008] avoid remeshing of cut elements into consistent tetrahedra by directly supporting general polyhedra in FEM simulations. The drawback of their methods, however, is the comparatively complex computation and integration of the employed generalized barycentric shape functions. In the context of cutting and fracturing our approach is most similar to [Wicke et al., 2007; Martin et al., 2008], but it is more ï¬exible and more eï¬cient due to the use of simple polynomial shape functions. 2.2. Adaptive Simulation The steadily growing complexity of geometric objects as well as of physical models results in an increasing demand for adaptive simulations, allowing to concentrate computing resources to interesting regions of the simulation domain [Debunne et al., 2001; Grinspun et al., 2002; Capell et al., 2002; Otaduy et al., 2007]. When adaptively reï¬ning the mesh, special care has to be taken to avoid or to properly handle hanging nodes. This problem can be circumvented by subdividing basis functions instead of elements [Grinspun et al., 2002; Capell et al., 2002]. However, in order to ensure linear independence of basis functions, Grinspun et al. [2002] restrict the reï¬nement to one level diï¬erence between neighboring elements. In contrast, the hybrid simulation [Sifakis et al., 2007b] allows for multi-level hanging nodes by constraining them to edges using either hard or soft constraints. Another approach for reducing computational complexity is to embed a high resolution surface mesh into a coarser simulation mesh [Faloutsos et al., 1997; Capell et al., 2002; Molino et al., 2004; MÂ¨ller and Gross, 2004; MÂ¨ller et al., 2004b; James u u et al., 2004; Sifakis et al., 2007b]. The nodal displacements of the coarse mesh are then interpolated onto the surface mesh. A similar space deformation approach was employed for interactive shape deformation in [Botsch et al., 2007], where furthermore a discontinuous mesh with âglue-likeâ continuity energies allowed for easy and ï¬exible mesh reï¬nement. Our method is based on DG FEM, and hence also employs discontinuous element meshes, with conti3

nuity being weakly enforced through penalty forces. This, in combination with the support for arbitrary elements, makes adaptive reï¬nement both easy and eï¬cient. Moreover, our smooth, MLS-based embedding technique works on arbitrary elements and provides higher smoothness compared to the typically employed barycentric interpolation. 2.3. Discontinuous Galerkin FEM The basic idea of DG FEM, i.e., employing discontinuous shape functions and weakly enforcing boundary constraints and inter-element continuity through penalty forces, is rather old (see, e.g., [BabuËka and ZlÂ´mal, 1973; Douglas and s a Dupont, 1976]). In the last decade, however, DG FEM regained increasing attention in applied mathematics [Arnold et al., 2001; Cockburn, 2003]. The main strength of DG FEM is its support for irregular, non-conforming meshes, and for shape functions of diï¬erent polynomial degree, which in combination allows for ï¬exible hp-reï¬nement. In applied mathematics and mechanics, DG FEM has successfully been employed for linear and nonlinear elasticity (see, e.g., [Lew et al., 2004; Ten Eyck and Lew, 2006; Wihler, 2006]), where it was shown to provide an accuracy similar to CG FEM at comparable computational cost. Another advantage of DG FEM is the absence of locking even for nearly incompressible deformable objects [Wihler, 2006], which in CG FEM typically requires special handling [Irving et al., 2007]. Since physical accuracy is not the primary goal in most graphics applications, we resort to the physically plausible, robust, and eï¬cient co-rotated linear elasticity [MÂ¨ller and Gross, 2004; u Hauth and Strasser, 2004]. To our best knowledge DG FEM has not been used in graphics before, besides the shorter conference version of this paper [Kaufmann et al., 2008]. We therefore ï¬rst introduce the main concepts of DG FEM based on a simple 2D Poisson problem (Section 3), before deriving equations and techniques for 3D linear elasticity (Section 4). We further extend DG FEM by directly simulating arbitrary polyhedra (Section 5), by generalizing stiï¬ness warping to DG FEM (Section 6), and by using embedded simulation (Section 7) with suitable collision handling (Section 8). Equipped with those techniques, we demonstrate the versatility of our framework on a set of diï¬erent applications in Section 9.

3. Introduction to DG FEM In this section we introduce the concepts of DG FEM and point out the main diï¬erences to standard CG FEM. For a better understanding we discuss both CG and DG FEM based on a simple 2D Poisson problem with homogeneous Dirichlet boundary constraints: ââu = f in â¦ â IR2 , u = 0 on ââ¦. (1)

ï£® ï£¹ ï£¹ f1 u1 ï£¯ ï£º ï£º ï£¯ ï£¯ . ï£º ï£¯ . ï£º K Â· ï£¯ . ï£º = ï£¯ . ï£º, ï£° . ï£» ï£° . ï£» fn un ï£®

(4)

with Kij = aCG (Ni , Nj ) and fi = â¦ f Ni , which is solved for the unknown coeï¬cients ui . 3.2. DG Primal Formulation In contrast to the above approach, DG FEM allows for non-conforming or discontinuous shape functions Ni , thereby resulting in discontinuous approximations of u. The weak form will therefore ï¬rst be formulated for each element K â T individually, and those are to be combined by taking the discontinuities across neighboring elements into account. Before doing so, the second order PDE of the strong form (1) is split into two ï¬rst order PDEs by introducing the helper function Ï : â¦ â IR2 : Ï= u, â Â· Ï = f. (5)

For more details on either CG FEM or DG FEM we refer the interested reader to the textbooks [Bathe, 1995; Hughes, 2000] or the survey articles [Arnold et al., 2001; Cockburn, 2003], respectively.

3.1. CG FEM The standard FEM approach is to multiply the above so-called strong form (1) by a suitable scalar test function v and to formally integrate by parts over the domain â¦. This yields the weak form aCG (u, v) :=
â¦

uÂ·

v =
â¦

f v,

(2)

which is deï¬ned in terms of the bilinear form a(Â·, Â·). The goal is to ï¬nd a function u, such that the weak form (2) holds for all suitable test functions v vanishing on the boundary ââ¦. In order to discretize (2) the domain â¦ is partitioned into ï¬nite elements K â T . On top of this tessellation a set of basis functions {N1 , . . . , Nn } is deï¬ned and used to approximate u as
n

To derive the weak form of a single element K, these two equations are multiplied by scalar- and vector-valued test functions v and Ï , respectively. Integrating the result by parts over K yields additional boundary integrals over âK, leading to the local weak form of element K
ÏÂ·Ï = â
K K

u fv +

Â·Ï +
âK

u Ï Â· nK ,

(6) (7)

ÏÂ·
K

v =
K

v Ï Â· nK ,
âK

where nK denotes the unit outward normal of K. The global weak form, which integrates over the whole domain â¦, is built by summing up the individual elementsâ weak forms (6), (7). Note that in CG FEM the boundary integrals over interior edges would cancel out, eventually leading to (2). In the DG setting, however, u and Ï are discontinuous across elements, hence requiring special attention to be paid to the integrals over âK. To account for that, the DG formulation replaces the functions u and Ï in those boundary integrals Ë by their so-called numerical ï¬uxes u and Ï, reË spectively. The ï¬uxes are responsible for âgluing togetherâ the functions u and Ï across element boundaries, which is achieved by some penalty term that weakly enforces continuity. We will later Ë present concrete examples for the ï¬uxes u and Ï. Ë 4

u(x) â
i=1

ui Ni (x) .

(3)

For a weak form containing mâth partial derivatives, standard FEM requires basis functions Ni from the Sobolev space H m (â¦). This in particular restricts the basis functions to be conforming, i.e., C m continuous within and C mâ1 continuous across elements [Hughes, 2000]. For our Poisson example with weak form (2) the Ni therefore have to be C 0 continuous across elements. Approximating both u and v by the shape functions Ni and exploiting the bilinearity of a(Â·, Â·) ï¬nally leads to the linear system

For now they can be imagined as the average of the function values from both sides of the edge. This yields the global weak form
ÏÂ·Ï = â
â¦ â¦

u fv +

Â·Ï +
KâT âK

u Ï Â· nK , Ë Ë v Ï Â· nK .

(8) (9)

This equation is called the primal formulation, and is the DG equivalent to the CG weak form (2). It differs in the framed edge integrals only, which â with Ë suitable ï¬uxes u and Ï â penalize the discontinuË ities across elements, as discussed in the following. 3.3. DG Weak Form The actual choice of numerical ï¬uxes is where the various DG FEM methods diï¬er, and it is an important design decision, since the ï¬uxes determine important properties like consistency, symmetry, and stability of the FE method. In the following we will only present our choice of ï¬uxes and shortly discuss its consequences. For an in-depth discussion of different ï¬uxes and their respective properties we refer the reader to [Arnold et al., 2001]. Since ï¬uxes are responsible for weakly enforcing inter-element continuity, i.e., for âgluingâ neighboring elements, a straightforward approach is to penalize the squared jump (uâ â u+ )2 . This corresponds to the method of BabuËka and ZlÂ´mal [1973], des a noted by BZ, which employs the ï¬uxes u := u|K , Ë Ë Ï := âÎ· u .

ÏÂ·
â¦

v =
â¦

KâT

âK

Ë After introducing the ï¬uxes u and Ï, we can reË move the helper function Ï by choosing Ï = v in (8) and inserting the result into (9). Applying integration by parts once more then leads to uÂ·
â¦

v +
KâT âK

Ë ((Ë â u) v â v Ï) Â· nK u =
â¦

f v.

(10)

In the above equations each interior edge e, shared by two elements K â and K + , is integrated over twice, since e â âK â and e â âK + . In order to exploit this, let us for a function q on e denote by q Â± := q|âK Â± its function value taken from either âK + or âK â , respectively. With this we deï¬ne the average operator {Â·} and the jump operator Â· for scalar-valued functions u and vector-valued functions Ï as
1 â u + u+ , 2 1 {Ï} := Ïâ + Ï+ , 2 {u} := u := uâ nâ + u+ n+ , Ï := Ï Â· n + Ï Â· n ,
â â + +

Inserting the ï¬uxes into (11) and simplifying the resulting equations by exploiting the identities {{Â·}} = {Â·} , { Â· }= Â· , {Â·} = Â· = 0,

leads to the weak form of the BZ method aBZ (u, v) :=
â¦

uÂ· f v,
â¦

v+
Î

Î·e u Â· v

(12)

with â Â· â denoting the vector dot product. Note that the average operator maps scalars to scalars and vectors to vectors, whereas the jump operator swaps these representations. With those operators, and with Î := âªK âK and Îâ¦ := Î \ ââ¦

=

denoting the set of all edges and all interior edges, respectively, we can simplify (10) to
aDG (u, v) :=
â¦

which diï¬ers from the CG weak form (2) in the framed penalty term, being weighted by a scalar â1 function Î·e = Î· e inversely proportional to the edge length e . Analyzing the internal energy aBZ (u, u) =
â¦

uÂ·

v+
Î

Î·e u Â· u

uÂ·

v

(11)

+
Î

Ë ( u â u Â· { v} â v Â· {Ï}) Ë

reveals that the BZ method in fact penalizes the squared jump u Â· u = (uâ â u+ )2 . Just as in CG FEM, approximating u and v by shape functions Ni as in (3) leads to a linear system equivalent to (4), with matrix entries determined by Kij = aBZ (Ni , Nj ). The important diï¬erence is the contribution of edges, i.e., the framed integral over Î in (12). Note that for continuous functions u and 5

+
Îâ¦

({Ë â u} Â· u f v.
â¦

Ë v â {v} Â· Ï )

=

v, as in the case of CG FEM, this integral would vanish, since then u = v = 0 and v = 0 on ââ¦, thereby reproducing the CG weak form (2). The BZ method is geometrically intuitive and easy to implement. Moreover, it is stable in the sense that the stiï¬ness matrix K is positive deï¬nite for any Î· > 0. However, as detailed in [Arnold et al., 2001], the method is not consistent: A continuous solution u of the problem might not satisfy the BZ weak form (12). Consequently, the approximate solution u does in general not converge toward the exact solution under element reï¬nement. A more accurate alternative is the so-called interior penalty (IP) method [Douglas and Dupont, 1976], whose ï¬uxes are deï¬ned as u := {u} , Ë Ë Ï := { u} â Î·e u . (13)

IP, Î·=1

BZ, Î·=1

BZ, Î·=100

Fig. 1. Solution of âu = 2, with Dirichlet boundary conditions corresponding to u(x, y) = x2 , using quadratic shape functions Ni on a 4Ã4 quad mesh. The consistent IP method ï¬nds the exact solution x2 independently of the penalty Î·, since x2 lies in the space of shape functions. This is not the case for the inconsistent BZ method, although increasing Î· improves the approximation by decreasing the jumps u .

Inserting them into (11) and simplifying terms yields the IP weak form
aIP (u, v) :=
â¦

uÂ·

v

(14)

This leads to the main advantage of DG FEM: The missing conformity constraints allow simple polynomials {1, x, y, x2 , xy, . . . , y k } of degree k to be used as basis functions for each element K. The convergence behavior of linear and quadratic DG basis functions is demonstrated in Fig. 2, which also shows bilinear CG FEM for comparison (see Section 9 for a discussion of these results). While the use of polynomial basis functions already simpliï¬es simulations on regular 2D grids, the true value of this added ï¬exibility will be demonstrated in the following sections, where we discuss elasticity simulation on irregular 3D meshes of dynamically changing topology.

â
Î

( v Â·{ u} + u Â·{ v} â Î·e u Â· v ) f v.
â¦

=

The IP method uses three individual penalty terms in the framed Î-integral: â¢ The ï¬rst term ensures consistency: Any continuous solution u of the problem (1) also satisï¬es the DG weak form (14). â¢ The second term achieves symmetry of the bilinear form aIP (u, v), and thereby also of the stiï¬ness matrix K. â¢ The last term ensures stability: For a suï¬ciently large penalty Î· it guarantees aIP (u, u) > 0, i.e., K to be positive deï¬nite. The IP ï¬uxes are one of few choices to yield a stable as well as consistent DG method. Consistency guarantees that if a continuous solution of either (2) or (14) exists in the space of shape functions Ni , then the IP method will ï¬nd this solution as a function u with u = 0 (cf. Fig. 1). Furthermore, due to consistency and stability the IP method converges under reï¬nement towards the exact solution of the PDE, with a convergence rate determined by the degree of Ni [Arnold et al., 2001]. 6 4. Linear Elasticity using DG FEM After introducing the concepts of DG FEM on the 2D Poisson problem, we now generalize this approach to 3D linearly elastic deformations, starting with elastostatics. In the following we consider a 3D object with material coordinates x = (x, y, z)T â â¦, which is to be deformed by a displacement vector ï¬eld u : â¦ â IR3 . A detailed derivation of CG FEM for linear elasticity can be found in many textbooks (e.g., [Hughes, 2000]) and also in the recent survey [Nealen et al., 2006]. Hence, we refer the reader to the literature for details, and only give the equations required for the DG FEM derivation below. We measure local deformations of the material using the linear Cauchy strain (u) = 1 2 u+ uT ,

!"

"

)

!"

!!

!"

!#

12)345/60)789: 12);<6*06=4>)789: 12)345/60)7?@: 12);<6*06=4>)7?@: A2)B4345/60

.#)/00+0

!"

!$

DG IP quadratic

!"

!%

!"

!&

!"

!'

)

!"

"

!"

!

!"

#

()*+,-

!"

$

!"

%

!"

&

10 10

7

6

condition number

DG IP linear

10 10 10 10 10

5

4

3

2

1

CG bilinear

10 0 10

0

DG linear (BZ) DG quadratic (BZ) DG linear (IP) DG quadratic (IP) CG bilinear
10
1

10

2

# dofs

10

3

10

4

10

5

Fig. 2. Solution of the Poisson equation ââu = f on a regular quadrilateral grid of resolutions 22 , 42 , 82 , and 162 , using CG FEM and DG FEM. The plots compare the L2 errors âu + f and the condition numbers of the stiï¬ness matrix K for the BZ and IP method using linear and quadratic basis functions, and also include bilinear CG FEM as a reference.

which under the assumption of a Hookean material is linearly related to the stress Ï(u) = C : (u) (15)

aCG (u, v) :=
â¦

(v) : C : (u) =
â¦

f Â· v, (17)

Analogous to (3) and (4), discretizing u as
n

through a symmetric 4-tensor C containing material parameters. The colon operator â : â denotes the tensor product between two matrices A and B or between a matrix A and a 4-tensor C as A : B :=
i,j

u(x) â
i=1

ui Ni (x)

with ui â IR3

(18)

leads to a (3n Ã 3n) linear system KU = F with Kij = aCG (Ni , Nj ) Â· I3 â IR3Ã3 , U i = ui â IR3 , Fi = f Ni â IR3 ,
â¦

Aij Bij , Aij Cijkl ,
i,j

A : C := C : A :=
k,l

Cijkl Akl .

where I3 denotes the (3 Ã 3) identity matrix.

The dot operator â Â· â denotes vector dot products u Â· v or matrix-vector products A Â· v and v Â· A. In static equilibrium the internal forces have to be in balance with the external forces f , which is expressed by â Â· Ï(u) = f . (16) 4.1. DG Weak Form The derivation of the DG weak form closely follows the procedure presented in Sections 3.2 and 3.3. Equations (15) and (16) are multiplied by test functions and integrated over each element K, yielding the individual elementsâ weak forms. Those are Ë Ë summed up, ï¬uxes u and Ï are introduced, and the two resulting equations are combined into one. The resulting equation corresponds to (10), and is to be simpliï¬ed using the average and jump operators. 7

Equations (15) and (16), in combination with suitable boundary constraints on ââ¦, constitute the strong form of elastostatics. Multiplying them by test functions, integrating by parts over â¦, and combining the resulting equations yields the weak form of CG FEM:

Fig. 3. Comparison of CG FEM (left), DG FEM (center), and the elastically coupled rigid cells of PriMo [Botsch et al., 2006, 2007] (right). The DG method conceptually spans the whole space from CG to PriMo, since for suï¬ciently large penalties Î· it approximates the CG results, and for an extremely stiï¬ material and lower penalty Î· it reproduces the rigid cells of PriMo.

Those, however, have to be slightly redeï¬ned for vector-valued functions u and matrix-valued functions Ï on a face f shared by two elements K â and K + , such that the jump operator maps vectors to matrices and vice versa. Using the outer product u â n := u nT we deï¬ne
1 â u + u+ , 2 1 {Ï} := Ïâ + Ï+ , 2 {u} := u := uâ â nâ + u+ â n+ , Ï := Ï â Â· nâ + Ï + Â· n+ .

can reproduce both methods, and can hence be considered as a generalization of them (cf. Fig. 3). As such, it combines the strengths of both approaches, since it inherits the physical accuracy of CG FEM, as well as the ï¬exibility in element shapes and meshing of PriMo [Botsch et al., 2007], as we will demonstrate in Section 5. The BZ penalty term is equivalent to both the glue energy of PriMo [Botsch et al., 2006] and the soft bindings employed by Sifakis et al. [2007b]. However, as discussed in Section 3.3 and shown in Figure 1, the BZ method is not consistent and therefore does not provide any convergence guarantees. Our experiments have nevertheless shown the BZ method to be very well suited for applications aiming at physically plausible deformations only. However, if physical accuracy is important, other DG ï¬uxes, such as those of the IP method, should be chosen instead. The weak form of the IP method [Douglas and Dupont, 1976] is deï¬ned by

Minimizing the jump u : u = uâ â u+ 2 by choosing the ï¬uxes of [BabuËka and ZlÂ´mal, 1973] s a leads to the weak form of the BZ method, which uses aBZ instead of aCG in (17): aBZ (u, v) :=
â¦

(v) : C : (u) +
Î

Î·f u : v .

(19) The penalty parameter Î·f is deï¬ned per face f according to [Hansbo and Larson, 2002]: 1 1 + (20) â) vol(K vol(K + ) using a global penalty parameter Î· > 0, which typically is in the order of 101 â102 in our experiments. Î·f = Î· Â· area(f ) Â· The internal elastic energy of the deformed object can then be written as aBZ (u, u) =
â¦

aIP (u, v) :=
â¦

(v) : C : (u) v : {Ï(u)}
Î

(21)

â

+ u : {Ï(v)} â Î·f u : v

.

Ï(u) : (u) +
Î

Î·f u â u

â

+ 2

, Analogous to the Poisson problem (14), the three penalty terms ensure consistency, symmetry, and stability, and the method is guaranteed to converge under element reï¬nement. Moreover, the IP method is still relatively easy to implement (see Section 4.2). While other (more complex) numerical ï¬uxes exist (e.g., [Ten Eyck and Lew, 2006; Wihler, 2006]), for our applications the BZ and IP methods performed very well and have been fully suï¬cient. 8

which reveals an interesting connection to both CG FEM and the elastically coupled rigid cells of PriMo [Botsch et al., 2006]: CG computes elastic energies within elements only, using the â¦-integral, whereas PriMo employs only the âglueâ energy between elements, represented by the Î-integral. Since BZ is based on both energy terms, with properly chosen penalty weight and material stiï¬ness it

4.2. Discretization & Matrix Assembly To implement DG FEM for linear elasticity, we discretize u and v and set up the stiï¬ness matrix K. Since this is very similar to CG FEM, we refer the reader to [Hughes, 2000; Nealen et al., 2006] for more details on the following derivations. The discretization (18) of u can be written in matrix notation as u(x) = H(x) U using a (3 Ã 3n) interpolation matrix H(x) built from the basis functions Ni (x), and a 3n vector U containing the unknown coeï¬cients ui â IR3 . Equivalently, the test function v can be represented as v(x) = H(x) V . Moreover, we represent stress and strain by 6D Â¯ vectors Ï and Â¯ composed of the independent entries of the symmetric 3Ã3 matrices Ï and , respectively. This leads to the matrix notation of the linear stressstrain relationship Â¯ Â¯ Â¯ Ï(u(x)) = C Â¯(u(x)) = C B(x) U , (22) Â¯ with a symmetric (6 Ã 6) matrix C built from Câs coeï¬cients, and a (6 Ã 3n) matrix B(x) containing ï¬rst derivatives of the Ni . For the assembly of the stiï¬ness matrix we use the above matrix notations to write the IP weak form (21) in terms of element contributions (â¦-integrals) and face contributions (Î-integrals). Note that for the BZ method (19) only the last of the three face contributions in (21) is needed. The element contributions are written in terms of element stiï¬ness matrices KK as in CG FEM: (v) : C : (u) =
â¦ KâT

and diï¬erences and averages of matrices B and H 1 B+ + Bâ , f f 2 which themselves are deï¬ned through restrictions Hf := H+ â Hâ , f f Bf :=
{}

BÂ± := B|K Â± , f

HÂ± := H|K Â± , f

containing only the entries of B or H corresponding to basis functions of K Â± . With these matrices we can deï¬ne three stiï¬ness matrices Kf 1 , Kf 2 , and Kf 3 for each face f : Kf 1 =
f

Â¯ {} âHf NT C Bf , f âBf
{} T

T

Kf 2 =
f

Â¯ C Nf Hf ,

Kf 3 =
f

Î·f Hf Hf .

T

The three face contributions in (21) can now be written in terms of these face stiï¬ness matrices as â
Î

v : {Ï(u)} =
f âT

V T Kf 1 U , V T Kf 2 U ,
f âT

(24) (25) (26)

â
Î

u : {Ï(v)} = Î·f u : v =
Î f âT

V T Kf 3 U .

V T KK U

(23)

with KK =
K

Â¯ BT (x) C B(x) .

The global (3nÃ3n) stiï¬ness matrix K can therefore be assembled by doing one pass over all elements K â T and accumulating their contributions KK , and a second pass over all faces f â T that accumulates their contributions Kf i . Equivalently to CG, the external force vector F is assembled from T the elementsâ contributions K H(x) f . Note that even for linear basis functions the integrands H(x) are not constant, requiring integration techniques as discussed in Section 5. The discretized weak form V T KU = V T F has to hold for all test functions v, i.e., all vectors V , leading to the linear system KU = F to be solved for the static solution U . The assembly of element and face stiï¬ness matrices into the global stiï¬ness matrix K can be formulated most easily in terms of individual 3 Ã 3 matrices. Let KK[i,j] denote the 3 Ã 3 submatrix of KK corresponding to the global stiï¬ness matrix entry Kij . The matrices KK[i,j] can be precomputed for all elements K using (23), and only those matrices 9

After expanding the operators {Â·} and Â· , and exploiting nâ = ân+ , the ï¬rst two face contributions of f = K â â© K + have the form v : {Ï(u)} = 1 â Ï (u) + Ï + (u) . 2 To write this in matrix notation, we need a matrix ï£® ï£¹T n+ 0 0 0 n+ n+ z y ï£º ï£¯ x ï£¯ ï£º + + Nf := ï£¯ 0 ny 0 nz 0 n+ ï£º , x ï£» ï£° 0 0 n+ n+ n+ 0 z y x v + â v â â n+ :

that are non-zero need to be stored. Due to symmetry it holds that KK[i,j] = KK[j,i] T , which further reduces the number of matrices to be precomputed. Similarly, Kf 1[ij] and Kf 3[ij] can be precomputed for all faces f . Note that Kf 3[ij] = Kf 3[ji] T and Kf 2[ij] = Kf 1[ji] T , so Kf 2 does not need to be precomputed explicitly. Kij can now be deï¬ned in terms of element and face contributions as follows:
Kij =
K

well in all our experiments, the Cholesky solver turned out to scale better to larger problems thanks to its quasi-linear asymptotic complexity, as also observed in [Botsch et al., 2005].

5. Arbitrary Polyhedral Elements The main advantage of DG FEM is the possibility to use non-conforming, discontinuous shape functions Ni . This added ï¬exibility allows us to employ simple degree-k polynomials {1, x, y, z, xy, . . . , z k } as (non-nodal) basis functions within each element K. We used either 4 linear or 10 quadratic basis functions per element. Notice that k should be â¥ 1, since then the DG method can exactly reproduce rigid motions, yielding a linear, continuous displacement function u without jumps [Cockburn, 2003]. In contrast to nodal basis functions, these nonnodal basis functions no longer depend on the element shape, thereby enabling us to work with arbitrarily shaped elements. For practical reasons, however, we restrict ourselves to convex or non-convex polyhedra (i.e., planar faces and linear edges), which still is considerably more ï¬exible than the convex polyhedra with triangulated faces of [Wicke et al., 2007]. Compared to the harmonic shape functions of [Martin et al., 2008], which also allow for nonconvex elements, our polynomial basis functions are simpler and therefore more eï¬cient to compute. For a practical implementation we have to accurately and eï¬ciently compute integrals of the form
Na Nb , âNa âNb , âxi âxj Na Nb ,
f f

KK[ij] +
f

Kf 1[ij] + Kf 1[ji] T + Kf 3[ij] .

Using a notation where the operator â denotes assembly into the global stiï¬ness matrix for all K, f , this can equivalently be written as: Kij â KK[ij] Kij â Kf 1[ij] Kji â Kf 1[ij] T Kij â Kf 3[ij] Dirichlet boundary constraints can be prescribed in DG FEM as weak or strong constraints. The latter simply removes some DOFs from the system, i.e., ï¬xes the coeï¬cients ui for the corresponding Ni . Weak boundary conditions are imposed by appropriately deï¬ning averages and jumps at boundary elements. For a prescribed displacement g this means to deï¬ne the function values on the âfreeâ side of boundary faces f â ââ¦ as uâ := g, v â := 0, Ï â (u) := Ï + (u) , Ï â (v) := Ï + (v) .

Dynamic simulations of deformable objects with time-varying U (t) and F (t) require additional inertial and damping forces, resulting in the governing equations Â¨ Ë MU + DU + KU = F, (27)

K

K

âNa Nb , âxi

with mass matrix M and damping matrix D, equivalent to CG FEM [Nealen et al., 2006]. In order to guarantee stability we employ semi-implicit Euler time-integration, resulting in a sparse, symmetric, positive deï¬nite linear system to be solved for each time-step. We compared two kinds of linear system solvers: preconditioned conjugate gradients [Saad and van der Vorst, 2000] and sparse Cholesky factorization [Toledo et al., 2003]. While both worked 10

over elements K and faces f , since they are the building blocks for the matrix assembly described in Section 4.2. While tetrahedra or hexahedra can be integrated analytically, general polyhedral elements typically require numerical integration, which trades accuracy for performance [Wicke et al., 2007]. In contrast, our polynomial basis functions can be integrated analytically over a polyhedron, which is exact up to numerical round-oï¬ errors. We use the divergence theorem for reducing the volume integral of a degree-k polynomial pk over an element K to an area integral of a degree-(k + 1) polynomial pk+1 over its boundary âK, i.e., to a sum of integrals over its faces. Each face integral can in turn be reduced to line integrals over its edges e â âf , which in the

10

0

ments U and the element stiï¬ness matrix KK deï¬ned in (23) as follows: F K = KK U = KK X â X 0 ,
0

10

â5

(28)

Error

10

â10

10

â15

Uniform Sampling MonteâCarlo Integration Divergence Theorem
â4

10

10

â2

Duration [ms]

10

0

10

2

10

4

Fig. 4. Comparison of diï¬erent numerical integration methods to our analytic method based on the divergence theorem. In this example the function f (x, y, z) = x2 was integrated over the corner-cut cube model shown on the right.

with X and X denoting the deformed and undeformed nodal positions, respectively. In order to avoid the aforementioned rotational artifacts, the corotational, or warped stiï¬ness approach [MÂ¨ller u and Gross, 2004; Hauth and Strasser, 2004] ï¬rst reverts the elementâs rotation, computes displacements and forces in the un-rotated state, and rerotates the resulting forces: F K = RK KK RT X â X 0 , K (29)

end results in degree-(k + 3) polynomials in the edge endpoints. The resulting expressions for polynomial basis functions can be (pre-)computed analytically. For linear and quadratic polynomials they are derived in detail by [Mirtich, 1996], who initially proposed this approach for accurately computing mass properties of polyhedra. Expressions for higher order polynomials can be derived accordingly. See Appendix A for a summary of how to ï¬nd the polynomials in the edge endpoints for integrating an arbitrary polynomial over an element. These steps would typically be performed by a code generation tool. Figure 4 compares our analytic integration to diï¬erent numerical schemes in terms of accuracy and performance. While our method is exact up to round-oï¬ errors, it is also reasonably eï¬cient: A straightforward numerical integration still shows an error of about 10â2 for the same computation time. Compared to CG FEM using the mean value polyhedral elements of [Wicke et al., 2007], our integration method is faster by an order of magnitude. 6. Stiï¬ness Warping Under large rotational deformations, linear FEM shows artifacts such as an unrealistic increase in volume. To avoid the cost of a full nonlinear simulation but still get physically plausible deformations in these cases, we employ a corotated formulation, which computes elastic forces in a rotated coordinate frame deï¬ned for each element [MÂ¨ller and u Gross, 2004; Hauth and Strasser, 2004]. In linear CG FEM, the forces acting on the nodes of an element K are computed from nodal displace11

where RK is a block-diagonal matrix containing the 3 Ã 3 rotation matrix of element K on its diagonal. This approach cannot be directly applied to DG for two reasons. First, the contributions resulting from integrals over interior faces are associated with two elements and require special treatment. Second, in case non-nodal basis functions are used, we will no longer be solving for nodal displacements, and X 0 in (28) needs to be generalized to a set of degrees of freedom deï¬ning the undeformed state of the object in terms of the basis functions Ni . 6.1. Element and Face Contributions Element contributions (23) can be treated just as in CG FEM using (29). We determine the rotations of general polyhedra by ï¬rst ï¬tting an aï¬ne transformation to the nodal displacements in the least squares sense, and then extracting its rotational component RK using polar decomposition [Hauth and Strasser, 2004]. Note that for face contributions (24), (25), (26) we cannot simply apply (29) using the faceâs rotation, since that would lead to ghost forces and instabilities similar to the per-vertex stiï¬ness warping of [MÂ¨ller u et al., 2002]. Moreover, the corotational method is only required to correct artifacts due to linear strain Â¯ = BU , and hence is not needed for (26). For the face contributions (24) and (25) it is crucial that the strains B+ U and Bâ U , which constif f tute Bf , are computed consistently with the strains of the element contributions (29) of K + and K â . This requires to use the elementsâ rotations R+ and f Râ for correcting B+ U and Bâ U , respectively. We f f f therefore have to split up the stiï¬ness matrices Kf 1
{}

and Kf 2 w.r.t. strain contributions from either K + or K â , yielding the four stiï¬ness matrices KÂ±1 := â f KÂ±2 f 1 2 1 := â 2 Â¯ Hf NT C BÂ± , f f
T Â¯ BÂ± C Nf Hf , f T

6.3. Warped Assembly To formulate the assembly of the stiï¬ness matrix (cf. Section 4.2) in the presence of stiï¬ness warping, we need to ï¬rst split up (29) into a term proportional to U and a static force term as follows: RK KK RT U = F K + RK KK (I3n â RT )X 0 . K K Every time the element rotations change, the warped element contributions are to be re-assembled as follows: Kij â RK KK[ij] RT K F i â RK KK[ij] (I3 â RT )X 0 K j Note that contrary to the notation used previously, RK and RÂ± denote 3 Ã 3 rotation matrices here. f The face contributions are assembled as follows: Kij â RÂ± KÂ±1[ij] RÂ± f f f
T T T

f

f

where (Â·)Â± again denotes either (Â·)+ or (Â·)â . These stiï¬ness matrices allow for a consistent warping of a face f âs contributions, such that we get ï¬ve corotated contributions: F Â±1 = RÂ± KÂ±1 RÂ± X â X 0 , f f f f F Â±2 = RÂ± KÂ±2 RÂ± X â X 0 , f f f f F f3 = Kf 3 X â X 0 .
T T

6.2. Non-Nodal Basis Functions In order to use stiï¬ness warping for non-nodal basis functions, we need to generalize the deï¬nition of the vector X 0 representing the undeformed state. To this end, we have to ï¬nd X 0 = (x0 , . . . , x0 ) satn 1 isfying the identity i x0 Ni (x) â¡ x. For nodal bai sis functions, this vector would contain the nodal positions of the undeformed mesh. Since for each element K our non-nodal basis functions always contain the linear polynomials (cf. Section 5), ï¬nding X 0 is trivial. For each element K, if its linear basis functions are NiK (x) = x, NjK (x) = y, NkK (x) = z,

F i â RÂ± KÂ±1[ij] (I3 â RÂ± )X 0 i f f f Kji â RÂ± KÂ±1[ij] RÂ± f f f
T T T

F j â RÂ± KÂ±1[ij] (I3 â RÂ± )X 0 j f f f Kij â Kf 3[ij] 7. MLS-Based Surface Embedding When it comes to the simulation of complex models, a common approach for keeping computation costs low is to embed a high resolution surface mesh into a lower resolution simulation mesh. The latter can be simulated eï¬ciently, and its displacement ï¬eld u(x) is used to deform the surface mesh (see, e.g., [Faloutsos et al., 1997; MÂ¨ller et al., 2004b; u James et al., 2004; Sifakis et al., 2007b]). In DG FEM, the discontinuous displacement u cannot be applied directly to the high resolution surface, since it would lead to gaps and self-intersections. To remove the discontinuities we ï¬rst stitch the simulation mesh by averaging, for each node xi â T , the diï¬erent displacements u|K (xi ) corresponding to its incident elements K â Ni , similar to [Botsch et al., 2006]: Ë ui = 1 |Ni | u|K (xi ) .
KâNi

we simply set the corresponding coeï¬cients to x0K = (1, 0, 0)T, x0K = (0, 1, 0)T, x0K = (0, 0, 1)T, i j k and use x0K = (0, 0, 0)T for all its other basis funcl tions. This results in a vector X 0 representing the undeformed state, based on which stiï¬ness warping can be performed just as for nodal basis functions. Note that for quadratic or higher order basis functions, stiï¬ness warping only removes the global element rotation, whereas local rotations due to bending might remain. While this was not a problem in all our experiments, such cases can easily be detected and the respective elements can be reï¬ned (see Section 9). We used stiï¬ness warping for all 3D examples shown in this paper, and only provide a comparison to non-warped linear elasticity in the accompanying video. 12

(30)

This results in a deformed, continuous simulation mesh, which is suï¬cient for visualizing the simulation mesh itself.

quality embedding for our choice of Gaussian kernels (cf. Fig. 5, right). â¢ The use of linear polynomials p(x), in combination with the partition of unity property of MLS shape functions, guarantees the exact reproduction of linear displacements u, i.e., in particular of rigid motions [Fries and Matthies, 2004].
Fig. 5. Comparison of embedding techniques. Stitching the discontinuous simulation mesh, followed by barycentric interpolation, leads to C 0 artifacts (left). In contrast, our smooth MLS-based embedding yields a considerably higher surface quality (right).

The averaged nodal displacements have to be interpolated within elements in order to deform the embedded mesh. For tetrahedral or hexahedral elements this amounts to simple linear or trilinear interpolation, respectively. For more general convex or non-convex polyhedra, mean value coordinates [Floater et al., 2005; Ju et al., 2005] or harmonic coordinates [Joshi et al., 2007] can be employed. All these methods, however, correspond to a non-smooth, generalized barycentric C 0 interpolation, resulting in clearly visible shading artifacts for coarse simulation meshes (cf. Fig. 5, left). Botsch et al. [2007] employ globally supported radial basis functions for high quality interpolation, but the involved dense linear systems are prohibitive for complex simulation meshes. To overcome these limitations, and inspired by meshless methods [MÂ¨ller et al., 2004a; Pauly et al., 2005], u we propose a smooth embedding based on movingleast-squares (MLS) interpolation. If we denote by xi the nodes of the undeformed Ë simulation mesh, and by ui their averaged displacements, then the displacement at a material point x is computed by ï¬tting an aï¬ne transformation, which amounts to minimizing the weighted least square error Ë Î¸( x â xi ) a(x) p(xi ) â ui
i T 2

â¢ Since the approach is entirely meshless it can be used to interpolate within arbitrarily shaped elements. Choosing the support radius of wi proportional to the local sampling density at x0 (e.g., i distances to one-ring neighbors), yields smooth interpolations even for irregular meshes. â¢ An accurate approximation of higher order polynomial displacements u only requires to add more samples (x0 , ui ) to (31), such as edge, face, or eli Ë ement midpoints. Ë â¢ The interpolated displacement u(x) of a vertex x of the embedded mesh linearly depends on a(x), Ë which in turn linearly depends on the ui used in (31), which ï¬nally linearly depend on ui through (30) and (18). Hence, by combining these linear relationships, the weights wi (x) as well as the set N (x) of relevant basis functions Ni can be precomputed, such that during the simulation only Ë u(x) = wi (x) Ni (x) ui =:
iâN(x)

Wi (x) ui
iâN(x)

(32) has to be evaluated as a linear combination of ui .

8. Collisions Since collision handling is not the focus of this work, we restrict ourselves to simple penalty-based collision response within the semi-implicit time integration. The basic approach is equivalent to CG FEM, therefore we only discuss the diï¬erences due to the discontinuous displacement u. Suppose that in the current time-step we detect Ë a collision at a displaced material point xc + u(xc ). Ë Since we use the interpolated displacement u of (32), xc can be an arbitrary embedded point, e.g., a vertex of the embedded surface mesh. Nodal collisions using the stitched displacement (30) is just a special case of this formulation. For collision response a penalty force proportional to the penetration depth is added to the system. For 13

,

(31)

with p(x, y, z) = (1, x, y, z)T and Î¸(x) a (truncated) Gaussian weight function. Solving a 4 Ã 4 linear system A(x) a(x) = b(x) yields the coeï¬cients Ë a(x) for the interpolated displacement u(x) = T a(x) p(x) at the position x. This MLS-based embedding has several interesting properties: â¢ The smoothness of the interpolation is determined by the weighting kernels wi , resulting in a high

the semi-implicit solve this displacement-dependent Ë force yields f (xc ) = A Â· u(xc ) + b with A â IR3Ã3 and b â IR3 . The corresponding penalty energy is 1 T T Ë Ë Ë Ecoll (xc ) = u(xc ) A u(xc ) + u(xc ) b, 2 Ë which after inserting the deï¬nition of u in (32) becomes 1 uT Wi (xc ) A Wj (xc ) uj + uT Wi (xc ) b. i 2 i,j i i Since this collision energy corresponds to an external force, it has to be either subtracted from the internal 1 potential energy 2 U T KU or to be added to the external energy U T F . Hence, we can incorporate the collision energy Ecoll into the system (27) by updating 3 Ã 3 blocks of the stiï¬ness matrix K and 3-vectors of the external force F (see Section 4.2): Kij â = Wi (xc ) A Wj (xc ) , Fi + = b Wi (xc ) , for all i, j â N (xc ), i.e., the set of basis functions Wi , respectively Ni , inï¬uencing the collision point xc (see (32)). If the simulation mesh is also used for visualization, simple nodal collisions are suï¬cient in most cases, as for instance for the examples shown in Section 9. However, for embedded simulations collisions should be detected and handled on the vertices of the embedded surface (cf. Fig. 6).

Method BZ lin. IP lin.

Resolution #DOFs Spars. 10Ã10Ã10 10Ã10Ã10 12k 12k 12k 30k 0.28%

Int. Ass. Solve 532 22 87 41 152 656 734 641 7797

0.62% 1437 0.58% 3750 0.28% 3062

CG trilin. 15Ã15Ã15 BZ quad. 10Ã10Ã10

IP quad. 10Ã10Ã10 30k 0.64% 8344 621 8484 Table 1 Comparison of BZ and IP with linear/quadratic basis functions to trilinear CG FEM for 3D elasticity. The mesh resolution is chosen to match the DOFs of DG and CG. The table lists matrix sparsity and timings (in ms) for volume integration, matrix assembly, and the solution of the linear system (taken on an Intel Core2 Duo 2.4 GHz).

9.1. DG FEM versus CG FEM The accompanying video provides comparisons of CG and DG for 3D elasticity, on coarse and more detailed simulation meshes. However, a qualitative comparison between the two methods is generally hard. We therefore also quantitatively compare CG to DG, the latter using BZ/IP penalties and linear/quadratic basis functions, based on a 2D Poisson problem with analytically known solution (cf. Fig. 2). In addition, Table 1 gives some statistics and timings of the same ï¬ve methods for 3D linear elasticity. Note that even for the same mesh and basis functions DG provides more degrees of freedom (DOFs) than CG, since nodes can âsplitâ due to discontinuous displacements. The plots and timings are therefore with respect to DOFs. As expected, the IP method converges regularly, at a rate similar to CG for linear shape functions, and at a faster rate for quadratic ones. By consequence, the jumps decrease under element reï¬nement, eventually reconstructing the exact, continuous solution [Cockburn, 2003]. The only additional parameter compared to CG FEM is the penalty weight Î· in (20),(21), which has to be suï¬ciently high to guarantee stability. We simply start with a low value and double it until K is positive deï¬nite, which has never been a problem in our experiments and typically leads to Î· in the order of 101 â102 . Note that Î· should not be too high, since otherwise the method resembles CG and does not exploit its additional DOFs (Fig. 3). The missing consistency terms of BZ (cf. (19), (21)) allow for sparser matrices and higher eï¬ciency. Furthermore, the method is stable for any positive penalty Î·. Although lacking theoretical convergence 14

Fig. 6. Collision handling on the nodes of the simulation mesh (left) and the vertices of the embedded mesh (right).

9. Results In this section we demonstrate how the possibility to use arbitrary polyhedral elements and simple polynomial shape functions can be exploited to derive a versatile and eï¬cient simulation technique. Before presenting speciï¬c example applications, which are also shown in the accompanying video, we discuss some general advantages and disadvantages of DG FEM compared to CG FEM.

Fig. 7. Intersecting the bunny with a hex-grid generates 41 elements (left). Closeup view of a non-convex element (right).

Fig. 8. A bar (36 hex-elements) is dynamically reï¬ned during bending. 1-to-8 subdivision results in 274 elements (left), whereas 1-to-2 reï¬nement yields 77 elements (right).

guarantees, BZ shows a reasonable convergence behavior in practice and gives visually convincing results. We therefore consider it well suited for typical graphics applications requiring physically plausible deformations only. For more accurate simulations the IP method is the better choice. Highly accurate results can be achieved using more complex numerical ï¬uxes in combinations with nonlinear strain measures [Ten Eyck and Lew, 2006]. Both DG methods lead to higher condition numbers of the linear systems, which, however, has not been a problem in all our examples, for both the conjugate gradients solver as well as the sparse Cholesky factorization. For the same number of DOFs and basis functions of the same degree, CG FEM can be observed to be more accurate than DG FEM by a constant factor (Fig. 2) and to be slightly more eï¬cient (Table 1). Since standard CG FEM is also easier to implement, it will stay the preferred method for many applications. However, as soon as topological changes of the simulation mesh are required or if complex element shapes have to be simulated, the higher ï¬exibility of DG FEM pays oï¬, as for instance in the following examples.

Using arbitrary elements in DG FEM gives rise to an interesting mesh generation algorithm that decouples the number of elements (and thus the DOFs) from the resolution of the surface mesh. Combining the strengths of both voxelization and tetrahedrization, the simulation mesh is generated by intersecting the object with a hexahedral grid. Each intersected cell then corresponds to a ï¬nite element, resulting in hexahedral elements in the interior and arbitrary polyhedra at the objectâs surface (cf. Fig. 7). Note that the strain energy is integrated over the exact volume of the object, whereas a pure embedded simulation could in this case lead to an erroneous coupling of the bunnyâs ears. 9.3. Dynamic Adaptivity In order to make optimal use of the available computational resources, it is often desirable to adaptively enhance the resolution of a dynamic simulation around a speciï¬c area of interest. Using arbitrary elements in a DG framework allows for easy and ï¬exible reï¬nement. We chose a simple criterion based on stress concentration, reï¬ning an element when its largest absolute principal stress exceeds a given threshold. For the actual topological reï¬nement, we can, e.g., perform a regular 1-to-8 subdivision of hexahedral elements, conceptually similar to [Grinspun et al., 2002]. An interesting alternative is the more ï¬exible 1-to-2 split along the plane perpendicular to the principal stress direction, which generates fewer elements for the same reï¬nement threshold (cf. Fig. 8). Note that the reï¬nement of an element is in no way restricted by the reï¬nement level of its neighbors. When splitting an element, we simply copy the parentâs coeï¬cients for displacement ui and velocË ity ui to its children. This heuristic causes the slight popping artifacts visible in the video, which could be avoided by a more sophisticated technique. 15

9.2. Mesh Generation by Hexahedral Slicing A challenge in simulating deformable objects is the preservation of surface detail without introducing an excessive amount of simulation primitives. Commonly used approaches include voxelization of the objectâs volume or tetrahedrization. While voxelization is simple to implement and results in wellbehaved elements, it cannot accurately represent surface details unless a high number of elements is used. On the other hand, tetrahedral meshes can accurately represent objects deï¬ned by surface meshes, but result in a higher number of elements.

CG linear

DG linear

DG quadratic

CG linear

CG linear

DG linear

DG quadratic

Fig. 9. A suspended cube consisting of 750 tetrahedra deforming under its own weight, simulated with linear CG FEM and linear/quadratic DG FEM (IP method), using a Poissonâs ratio of Î½ = 0.3 (left) and Î½ = 0.499 (right). While DG gives the expected, symmetric solution, CG shows severe locking artifacts in the nearly incompressible case, even after mesh reï¬nement.

9.4. Cutting Using DG FEM for cutting simulations has a couple of advantages over existing methods. Being able to simulate arbitrary elements avoids complex remeshing of the simulation domain (cf. Fig. 10), similar in spirit to [Molino et al., 2004; Wicke et al., 2007; Sifakis et al., 2007a]. Furthermore, thanks to the analytic integration the contributions of newly created elements can be computed very eï¬ciently and accurately, avoiding the need for expensive numerical integration during the simulation. By storing and reusing individual edge and face integrals, after splitting an element we only need to recompute integrals over edges and faces intersecting the cut plane. Poorly shaped elements with negligible volume cause numerical problems, equivalently to CG FEM. However, those elements can eï¬ectively be avoided by simply merging them with neighboring elements, exploiting the fact that our method is not restricted to convex elements. Note that also for mesh generation and dynamic reï¬nement we either prevent the generation of degenerate elements, or remove them by the mentioned sliver merging technique.

9.5. Locking In the case of nearly incompressible materials, as the Poissonâs ratio Î½ approaches the limit value of 0.5, standard FEM is known to exhibit an overly stiï¬ behavior termed locking. An intuitive explanation for this phenomenon is provided by the counting argument [Irving et al., 2007]: Each element introduces an additional volume constraint in order to preserve its volume locally. However, a continuous FEM mesh with n nodes has only 3n degrees of freedom, while in the speciï¬c case of a tetrahedral mesh, the number of elements is at least 4n, resulting in an overconstrained system. On the other hand, the additional degrees of freedom present in discontinuous Galerkin FEM allow the method to eï¬ectively circumvent locking, as demonstrated in Fig. 9. In this example, increasing the number of elements will not prevent locking in the CG FEM case. Also note that the locking CG FEM solution is strongly inï¬uenced by the topology of the simulation mesh, resulting in an asymmetric solution, whereas the DG FEM solution is free of such artifacts.

9.6. Sliver Elements In standard FEM with nodal basis functions, the computation of shape functions and their derivatives typically involves the inversion of a Jacobian matrix, causing numerical problems for ill-shaped elements. This aï¬ects the integration of basis functions over the element as well as other uses of basis functions such as the interpolation of nodal quantities. 16

Fig. 10. Sharpening a pencil consisting of a single convex element (left). Cutting a bunny out of a cube (right).

10 10 10 10 10 10

20

10. Conclusion We presented a novel simulation technique for deformable models based on discontinuous Galerkin FEM. The main advantage of DG FEM is the ï¬exibility to use discontinuous shape functions, which we exploited for the eï¬cient simulation of arbitrary polyhedral elements. Our generalization of stiï¬ness warping enables physically plausible large-scale deformations, and our MLS-based surface embedding allows to simulate complex models in the DG framework. We demonstrated the versatility of our approach on conceptually simple, eï¬cient, and robust techniques for mesh generation, adaptive reï¬nement, and cutting. While there are successful methods for each individual problem, our approach provides an interesting alternative that handles all problems in a single, consistent DG FEM framework. Promising directions for future work include nonlinear elasticity simulations of both solids and shells, which would beneï¬t even more from the ï¬exibility oï¬ered by DG FEM. Acknowledgments The authors are grateful to Christoph Schwab for inspiring discussions, and to the anonymous reviewers of the conference paper [Kaufmann et al., 2008] for helpful comments and suggestions. Sebastian Martin was supported by the Swiss National Science Foundation through grant 200021-117756.

18

Condition Number

16

14

12

10

10 â10 10

8

10

â8

Volume

10

â6

10

â4

10

â2

Fig. 11. Mesh of nine elements. As the volume of the innermost tetrahedral element decreases, the condition number of the global stiï¬ness matrix increases.

This particular problem can be avoided in DG FEM, as basis functions are deï¬ned in global coordinates. However, elements of small volume still cause problems in DG FEM. As stated in [Shewchuck, 2002], the condition number of the stiï¬ness matrix of a tetrahedral mesh is related to the ratio between the volume of the largest and the smallest element. We observe a similar behavior in DG FEM, as shown in Fig. 11. On the other hand, we note that in DG FEM elements with locally small features do not cause problems, as long as the total volume of the element stays reasonably large (Fig. 12). Note that in order to compute the condition number of the stiï¬ness matrices in those examples, appropriate boundary constraints were introduced in order to get a unique solution to the static problem.

10

4

Condition Number
10 â10 10
3

10

â8

10

â6

Epsilon

10

â4

10

â2

10

0

Fig. 12. Single non-convex element with a locally thin feature. Even as the height Îµ of the narrowed middle section approaches zero, the condition number of the stiï¬ness matrix stays ï¬nite.

17

Appendix A. Volume Integration The following steps show how to compute p(x) dx for an arbitrary polynomial p(x) with K x = (x1 , x2 , x3 ). (i) Integrate p(x) formally to obtain the polynomial q(x) in x: q(x) â p(x) dx1

(ii) Perform the following three steps for i in {1, 2, 3}, with j and k deï¬ned as j = (i mod 3) + 1 and k = ((i + 1) mod 3) + 1. (a) Transform q(x) into the polynomial q (Ë, n) in x = (Ë1 , x2 , x3 ) with the Ëx Ë x Ë Ë symbolical constant n = (n1 , n2 , n3 ) by performing the following substitutions: nj nk 1 â xj Ë â xk , Ë ni ni ni xj â xj , x k â xk Ë Ë xi â (b) Integrate q (Ë, n) formally to obtain the Ëx polynomial r(Ë, n) in x: Ëx Ë r(Ë, n) â Ëx q (Ë, n) dËj Ëx x

(c) Integrate formally over the edge connecting a = (a1 , a2 , a3 ) and b = (b1 , b2 , b3 ) to get a polynomial in a and b: Pi (a, b, n) â
1

(bk â ak )
0

r(a (1 â t) + b t, n) dt Ë

(iii) The integral over the volume can now be computed as follows, where nf deï¬nes the plane of face f as {x â IR3 |x Â· nf = 1}. df â {1, 2, 3} is the direction of projection for face f which must be chosen such that nff = 0. x1 e and d x2 e are the nodes of edge e. p(x) dx =
K f ââK

nf 1 nf f d
eââf

Pdf (xe , xe , nf ) 1 2

18

References Arnold, D. N., Brezzi, F., Cockburn, B., Marini, L. D., 2001. Uniï¬ed analysis of discontinuous Galerkin methods for elliptic problems. SIAM J. Numer. Anal. 39 (5), 1749â1779. BabuËka, I., ZlÂ´mal, M., 1973. Nonconforming eles a ments in the ï¬nite element method with penalty. SIAM J. Numer. Anal. 10, 863â875. Bargteil, A. W., Wojtan, C., Hodgins, J. K., Turk, G., 2007. A ï¬nite element method for animating large viscoplastic ï¬ow. ACM Trans. on Graphics (Proc. SIGGRAPH) 26 (3), 16.1â16.8. Bathe, K.-J., 1995. Finite Element Procedures. Prentice Hall. Bielser, D., Glardon, P., Teschner, M., Gross, M., 2003. A state machine for real-time cutting of tetrahedral meshes. In: Proc. of Paciï¬c Graphics. pp. 377â386. Bielser, D., Gross, M., 2000. Interactive simulation of surgical cuts. In: Proc. of Paciï¬c Graphics. pp. 116â125. Botsch, M., Bommes, D., Kobbelt, L., 2005. Eï¬cient linear system solvers for geometry processing. In: 11th IMA conference on the Mathematics of Surfaces. Botsch, M., Pauly, M., Gross, M., Kobbelt, L., 2006. PriMo: Coupled prisms for intuitive surface modeling. In: Proc. of Symp. on Geometry Processing. pp. 11â20. Botsch, M., Pauly, M., Wicke, M., Gross, M., 2007. Adaptive space deformations based on rigid cells. Computer Graphics Forum (Proc. Eurographics) 26 (3), 339â347. Capell, S., Green, S., Curless, B., Duchamp, T., PopoviÂ´, Z., 2002. A multiresolution framework c for dynamic deformations. In: Proc. of Symp. on Computer Animation. pp. 41â47. Cockburn, B., 2003. Discontinuous Galerkin methods. Z. Angew. Math. Mech. 80 (11), 731â754. Debunne, G., Desbrun, M., Cani, M.-P., Barr, A. H., 2001. Dynamic real-time deformations using space and time adaptive sampling. In: Proc. of ACM SIGGRAPH. pp. 31â36. Douglas, J., Dupont, T., 1976. Interior penalty procedures for elliptic and parabolic Galerkin meth19

ods. Computing Methods in Applied Science, Lecture Notes in Physics 58. Faloutsos, P., van de Panne, M., Terzopoulos, D., 1997. Dynamic free-form deformations for animation synthesis. IEEE Transactions on Visualization and Computer Graphics 3 (3), 201â214. Floater, M. S., Kos, G., Reimers, M., 2005. Mean value coordinates in 3D. Computer Aided Geometric Design 22 (7), 623â631. Fries, T. P., Matthies, H. G., 2004. Classiï¬cation and overview of meshfree methods. Informatikbericht 2003-03, revised 2004, Institute of Scientiï¬c Computing, Technical University Braunschweig. Grinspun, E., Krysl, P., SchrÂ¨der, P., 2002. o CHARMS: A simple framework for adaptive simulation. ACM Trans. on Graphics (Proc. SIGGRAPH) 21 (3), 281â290. Hansbo, P., Larson, M., 2002. Discontinuous Galerkin methods for incompressible and nearly incompressible elasticity by Nitscheâs method. Comput. Methods Appl. Mech. Eng. 191 (17), 1895â1908. Hauth, M., Strasser, W., 2004. Corotational simulation of deformable solids. In: Proc. of WSCG. pp. 137â145. Hughes, T. J. R., 2000. The Finite Element Method. Linear Static and Dynamic Finite Element Analysis. Dover Publications. Irving, G., Schroeder, C., Fedkiw, R., 2007. Volume conserving ï¬nite element simulations of deformable models. ACM Trans. on Graphics (Proc. SIGGRAPH) 26 (3). James, D., BarbiË, J., Twigg, C., 2004. Squashing c cubes: Automating deformable model construction for graphics. In: Proc. of SIGGRAPH â04 Sketches and Applications. Joshi, P., Meyer, M., DeRose, T., Green, B., Sanocki, T., 2007. Harmonic coordinates for character articulation. ACM Trans. on Graphics (Proc. SIGGRAPH) 26 (3). Ju, T., Schaefer, S., Warren, J., 2005. Mean value coordinates for closed triangular meshes. ACM Trans. on Graphics (Proc. SIGGRAPH) 24 (3), 561â566. Kaufmann, P., Martin, S., Botsch, M., Gross, M., 2008. Flexible simulation of deformable models using discontinuous galerkin fem. In: Proc. of

Symp. on Computer Animation. pp. 105â115. Lew, A., Neï¬, P., Sulsky, D., Ortiz, M., 2004. Optimal BV estimates for a discontinuous Galerkin method in linear elasticity. Applied Mathematics Research Express (3), 73â106. Martin, S., Kaufmann, P., Botsch, M., Wicke, M., Gross, M., 2008. Polyhedral ï¬nite elements using harmonic basis functions. Computer Graphics Forum (Proc. SGP) 27 (5), 1521â1529. Mirtich, B., 1996. Fast and accurate computation of polyhedral mass properties. Journal of Graphics Tools 1 (2), 31â50. Molino, N., Bao, Z., Fedkiw, R., 2004. A virtual node algorithm for changing mesh topology during simulation. ACM Trans. on Graphics (Proc. SIGGRAPH) 23 (3), 385â392. MÂ¨ller, M., Dorsey, J., McMillan, L., Jagnow, R., u Cutler, B., 2002. Stable real-time deformations. In: Proc. of Symp. on Computer Animation. pp. 163â170. MÂ¨ller, M., Gross, M., 2004. Interactive virtual mau terials. In: Proc. of Graphics Interface. pp. 239â 246. MÂ¨ller, M., Keiser, R., Nealen, A., Pauly, M., Gross, u M., Alexa, M., 2004a. Point-based animation of elastic, plastic and melting objects. In: Proc. of Symp. on Computer Animation. pp. 141â151. MÂ¨ller, M., Teschner, M., Gross, M., 2004b. Physu ically based simulation of objects represented by surface meshes. In: Proc. of Computer Graphics International. pp. 26â33. Nealen, A., MÂ¨ller, M., Keiser, R., Boxerman, E., u Carlson, M., 2006. Physically based deformable models in computer graphics. Computer Graphics Forum 25 (4), 809â836. OâBrien, J. F., Bargteil, A. W., Hodgins, J. K., 2002. Graphical modeling and animation of ductile fracture. ACM Trans. on Graphics (Proc. SIGGRAPH) 21 (3), 291â294. OâBrien, J. F., Hodgins, J. K., 1999. Graphical modeling and animation of brittle fracture. In: Proc. of ACM SIGGRAPH. pp. 137â146. Otaduy, M. A., Germann, D., Redon, S., Gross, M., 2007. Adaptive deformations with fast tight bounds. In: Proc. of Symp. on Computer Animation. pp. 181â190.

Pauly, M., Keiser, R., Adams, B., Dutre, P., Gross, M., Guibas, L. J., 2005. Meshless animation of fracturing solids. ACM Trans. on Graphics (Proc. SIGGRAPH) 24 (3), 957â964. Saad, Y., van der Vorst, H. A., 2000. Iterative solution of linear systems in the 20th century. J. Comput. Appl. Math. 123 (1-2), 1â33. Shewchuck, J., 2002. What is a good linear ï¬nite element? interpolation, conditioning, and quality measures. In: Proc. of the 11th International Meshing Roundtable. pp. 115â126. Sifakis, E., Der, K. G., Fedkiw, R., 2007a. Arbitrary cutting of deformable tetrahedralized objects. In: Proc. of Symp. on Computer Animation. pp. 73â 80. Sifakis, E., Shinar, T., Irving, G., Fedkiw, R., 2007b. Hybrid simulation of deformable solids. In: Proc. of Symp. on Computer Animation. pp. 81â90. Steinemann, D., Harders, M., Gross, M., Szekely, G., 2006a. Hybrid cutting of deformable solids. In: Proc. of IEEE VR. pp. 35â42. Steinemann, D., Otaduy, M. A., Gross, M., 2006b. Fast arbitrary splitting of deforming objects. In: Proc. of Symp. on Computer Animation. pp. 63â 72. Ten Eyck, A., Lew, A., 2006. Discontinuous Galerkin methods for non-linear elasticity. International Journal for Numerical Methods in Engineering 67 (9), 1204â1243. Terzopoulos, D., Platt, J., Barr, A., Fleischer, K., 1987. Elastically deformable models. In: Proc. of ACM SIGGRAPH. pp. 205â214. Toledo, S., Chen, D., Rotkin, V., 2003. Taucs: A library of sparse linear solvers. http://www.tau.ac.il/â¼stoledo/taucs. Wicke, M., Botsch, M., Gross, M., 2007. A ï¬nite element method on convex polyhedra. Computer Graphics Forum (Proc. Eurographics) 26 (3), 355â364. Wihler, T. P., 2006. Locking-free adaptive discontinuous Galerkin FEM for linear elasticity problems. Mathematics of Computation 75 (255), 1087â 1102.

20

