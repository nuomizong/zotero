EUROGRAPHICS 2007 / D. Cohen-Or and P. SlavÃ­k (Guest Editors)

Volume 26 (2007), Number 3

A Finite Element Method on Convex Polyhedra
Martin Wicke Mario Botsch
ETH Zurich

Markus Gross

Abstract We present a method for animating deformable objects using a novel ï¬nite element discretization on convex polyhedra. Our ï¬nite element approach draws upon recently introduced 3D mean value coordinates to deï¬ne smooth interpolants within the elements. The mathematical properties of our basis functions guarantee convergence. Our method is a natural extension to linear interpolants on tetrahedra: for tetrahedral elements, the methods are identical. For fast and robust computations, we use an elasticity model based on Cauchy strain and stiffness warping. This more ï¬exible discretization is particularly useful for simulations that involve topological changes, such as cutting or fracture. Since splitting convex elements along a plane produces convex elements, remeshing or subdivision schemes used in simulations based on tetrahedra are not necessary, leading to less elements after such operations. We propose various operators for cutting the polyhedral discretization. Our method can handle arbitrary cut trajectories, and there is no limit on how often elements can be split. Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Computational Geometry and Object ModelingâPhysically based modeling I.6.8 [Simulation and Modeling]: Types of Simulationâ Animation

1. Introduction The ï¬nite element method (FEM) has become a central tool in computer graphics, and it is widely used for physicallybased animation of deformations, fracture, ï¬uids, smoke, or other affects. Most methods discretize the computational domain by tetrahedral or hexahedral elements and linear or trilinear interpolants, respectively. While such formulations lead to simple and efï¬cient computations, they share limitations when it comes to topological changes during the simulation. In cases of fracture or cutting, for instance, the elements have to be split such that the discretization conforms to the new object boundary. This remeshing comes at a cost and potentially leads to ill-shaped elements leaving the computations unstable. Ill-shaped elements can be removed from the discretization by inserting new simulation nodes and remeshing the domain [She03]. Unfortunately, this is an inherently non-local and costly operation. Many researchers have proposed methods to alleviate the aforementioned problems. A simple and efï¬cient approach consists of restricting the split to the faces between two elements. This works well for high resolution meshes and fracture. Precise cutting, however, is not possible. Other algorithms duplicate elements, but are still somewhat limited by the initial mesh resolution [MBF04]. Meshless FEM, as suggested recently, avoids the mesh entirely. The lack of connectivity, however, requires additional processing and data structures to identify topologically separated particles and
c The Eurographics Association and Blackwell Publishing 2007. Published by Blackwell Publishing, 9600 Garsington Road, Oxford OX4 2DQ, UK and 350 Main Street, Malden, MA 02148, USA.

boundary conditions [PKAâ 05, SOG06]. Furthermore, dynamic up- and downsampling has to be performed in the vicinity of newly created boundaries, which tends to be nontrivial. The central contribution of this paper is a novel approach to compute elastic deformations based on FE discretization of the 3D domain into convex elements. Our method is speciï¬cally useful for simulations involving topological changes of the simulation domain, as experienced during cutting or fracture. It signiï¬cantly reduces computations necessary for mesh maintenance. In addition, it allows for an accurate representation of the cut or fracture surface. We are able to remove sliver elements in an entirely local operation, making the simulation robust and numerically stable. To accomplish the FE discretization, we employ a recently introduced generalization of barycentric interpolants to convex simplicial polytopes [JLW07] for the design of our basis functions. The mathematical properties of the functions, such as positivity, partition of unity, and reproduction of linear polynomials, make them well suited for FEM. In particular, as the commonly used linear tetrahedral interpolants are obtained as special case for tetrahedral elements, the method is a seamless and natural extension of tetrahedral linear elements. Fig. 1 shows a simple example of the deformation of a single convex element with 24 nodes. Nonlinear interpolation functions lead to non-constant strain within the elements, and require integration over the

Wicke et al. / A Finite Element Method on Convex Polyhedra

(for mass-spring systems), or splitting the object along element boundaries [MG04]. Using this simple approach, newly created surfaces must conform to the initial discretization of the mesh. While this is acceptable in applications with hard real-time constraints, it is a severe limitation for animation. Accurate cutting is also not possible. OâBrien et al. [OH99, OBH02] apply continuous remeshing to make the mesh discretization conform to the crack surface. [BG00, BGTG03] subdivide tetrahedra locally in order to accommodate the crack surface. This approach may lead to ill-conditioned elements, which cannot be robustly used in a FEM simulation. [SHGS06] try to avoid these problems by snapping the simulation nodes to the cut trajectory. In any case, the remeshing process is highly non-trivial, because illconditioned sliver tetrahedra have to be avoided in order to guarantee a stable simulation. An alternative to remeshing is the virtual node algorithm introduced by Molino et al. [MBF04]. Instead of actually splitting simulation elements, the element that is to be split is duplicated. The surface is embedded in both elements and used for rendering and collision detection. The pitfalls of remeshing can be entirely avoided using this scheme, however, each element can be split at most three times. Hence, the original mesh resolution limits the resolution of fracture patterns or cuts, requiring a high input resolution for realistic results. Meshless approaches for modeling elastic solids [MKNâ 04] do not require an underlying tetrahedral mesh. Interactions between particles are evaluated using the material distance between the particles. In the case of fracture, the material distance within the object might not be equal to the Euclidean distance any more, prompting recomputation of the shape functions of nearby particles [PKAâ 05]. This process is local, however, coverage issues complicate the fracturing process, making it necessary to adjust the particle distribution near cracks. Steinemann et al. [SOG06] have therefore reintroduced connectivity into a particle-based simulation. A distance graph is used to approximate the material distance. After cutting, this graph is modiï¬ed to reï¬ect the new situation. Still, resampling is necessary to maintain an adequate discretization near cracks. Using nonlinear interpolation functions deï¬ned for convex elements [Wac71, Wac75, Flo03, HF06], it is possible to apply FEM directly on polygonal meshes (see [SM06] for a recent survey on 2D methods using different basis functions). One notable method in this class is the natural element method [Suk98], using natural neighbor interpolation. However, natural neighbor interpolation relies on Delaunay triangulation of the domain, and thus offers no advantages in settings with changing topology. Warren [War96] generalized Wachspress coordinates to 3D. Recently, also Floaterâs mean value coordinates [Flo03] have been extended to 3D [JSW05, FKR05]. Ju et al. [JLW07] show connections of several methods that can be
c The Eurographics Association and Blackwell Publishing 2007.

Figure 1: An object consisting of a single element falls on a slope. Due to the nonlinearity of the basis functions, nonlinear deformations are possible even for a single element. elements in order to obtain the elastic energy. Such methods have rarely been used in computer graphics [RGTC98]. We demonstrate that in situations involving topological restructuring of the computational domain, the advantages of a ï¬exible discretization easily outweigh the increased complexity of per-element integration. Our technique uses linearized Cauchy strain and stiffness warping to avoid linearization artifacts for large deformations. We propose element splitting operations to accomplish the local restructuring of the simulation domain after cutting. A procedure for local sliver removal is also presented. We will show that the resulting maintenance operations after topological changes are minimal. Our method allows for progressive cuts through elements, arbitrary cut trajectories, and does not impose a limit on the number of times an element can be cut. The remainder of this paper is structured as follows: Related work is discussed in more detail in Section 2. In Section 3 we introduce the interpolants and discuss their properties in the context of FEM. In addition, we present the technical details of our elasticity simulation. Our method for sliver removal is presented in Section 4. Section 5 describes the operations necessary to implement cutting. Finally, we show results and give performance ï¬gures in Section 6. 2. Related Work Physically-based deformation of elastic solids was introduced to the ï¬eld of computer graphics by Terzopoulos et al. [TPBF87]. Terzopoulos and Fleischer went on to simulate fracture in the form of tearing cloth [TF88]. The standard method to animate deformable objects has been FEM (e. g. [KGCâ 96, BNC96, OH99, DDCB01, GKS02, MG04]), although for many applications, especially those with realtime constraints, mass-spring systems have been used (the recent survey [NMKâ 06] gives a good overview). In both cases, the simulation domain is typically discretized using tetrahedral elements, even if nonlinear basis functions are considered for accuracy [RGTC98]. The easiest way to incorporate topological changes into such a system is to separate the material by removing springs

Wicke et al. / A Finite Element Method on Convex Polyhedra

with a 4-tensor C containing the elastic coefï¬cients of the material. However, since Îµ and Ï both are symmetric 3 Ã 3 matrices, their independent coefï¬cients can also be written as 6D vectors. The strain, consisting of partial derivatives of u, can then be written as Îµ = âu âv âw âu âv âu âw âv âw , , , + , + , + âx ây âz ây âx âz âx âz ây
T

.

(3) Representing the stress by a 6D vector as well reduces the constitutive relation (2) to a simple 6 Ã 6 matrix product Ï = C Îµ, (4)

Figure 2: A cube sampled with convex elements deforms on impact with the ground. The bottom-right picture shows the sampling. An initially hexagonal element has been subdivided with 30 random planes, resulting in 31 elements with 8 to 32 nodes. used to generate barycentric coordinates on convex 3D polyhedra. In our formulation, we use Floaterâs generalized construction as described in [JLW07] to obtain interpolation functions. 3. Elastic Deformation Deformation of elastic material is governed by the equations of continuum elasticity, which are discretized using the ï¬nite element method. For an introduction to these topics, see for example [Chu96, Bat95]. In the following, we consider an object with material coordinates x = [x, y, z]T deformed by a displacement ï¬eld u(x) = [u(x), v(x), w(x)]T . After an introduction of the necessary details of continuum elasticity in Section 3.1, we propose interpolation functions for arbitrary convex polyhedra in Section 3.2. Using those, we discretize the continuous equations in order to derive the ï¬nite element formulation (Section 3.3). In the remaining subsections 3.4 and 3.5 we give details on numerical integration and dynamic simulation in our framework. 3.1. Continuum Elasticity The elastic energy density of a deformable body is deï¬ned in terms of stress and strain within the object. For the latter, we employ the linear Cauchy strain Îµ, which depends on the Jacobian u of the deformation ï¬eld u: 1 Îµ = u + uT . (1) 2 The strain of the material in turn causes internal forces, represented by the 3 Ã 3 stress tensor Ï. We assume a Hookean material, i.e., a linear stressâstrain relationship, which gives
3

where the constitutive matrix C only depends on the materialâs elasticity modulus and Poisson ratio, controlling stiffness and volume preservation, respectively. In the following, we will use the 6D vector notation. With stress and strain deï¬ned at any material point x, the total elastic energy U(u) can ï¬nally be computed as the integral of stress times strain over the objectâs volume U(u) = 1 2
Z
V

ÏT Îµ =

1 2

Z
V

ÎµT CÎµ.

(5)

3.2. Interpolation Functions for Convex Polyhedra In order to discretize the energy equation (5) the continuum object is decomposed into a ï¬nite number of elements, and each node i â {1, . . . , n} of this decomposition is associated with a material position xi , a displacement value ui = u(xi ), and a scalar shape function Ïi (x). With this, the continuous function u(x) can be approximated by
n

u(x) =

i=1

â ui Ïi (x) .

(6)

While graphics applications typically employ tetrahedral or hexahedral decomposition, our goal is to ï¬nd an FEM formulation for convex polyhedra. This requires interpolation functions Ïi for convex polyhedra that are suitable for FEM computations. For 2D simulations, Wachspress coordinates [Wac71, Wac75] have been used for ï¬nite element simulations on convex polygons. To our best knowledge, no FEM simulation method on 3D polyhedra has been proposed as of today. Recently, Wachspress coordinates [War96, JSWM05] and mean value coordinates [FKR05, JSW05, JLW07] have been generalized to 3D â although not in the context of FEM simulation. We propose to employ 3D mean value coordinates as interpolating shape functions for FEM simulations on convex polyhedra. Since these functions are usually treated in the context of parameterization and texture interpolation, we will brieï¬y review them below and discuss their properties in the context of FEM. Following the recent formulation of [JLW07], we derive the mean value interpolation function Ïi (x) corresponding to a particular vertex xi of a convex polyhedron with k vertices {1, . . . , k}. The generalized barycentric coordinates are only

Ïi j =

â
k,l=1

Ci jkl Îµkl ,

i, j â {1, 2, 3},

(2)

c The Eurographics Association and Blackwell Publishing 2007.

Wicke et al. / A Finite Element Method on Convex Polyhedra

(a) (a) (b)

(b)

Figure 4: Basis functions for the highlighted nodes visualized by hue interpolation on a plane through the element. Thus, the functions Ïi fulï¬ll all properties necessary for convergence of our ï¬nite element approximation: They are positive and reproduce linear functions. Their support is limited to incident elements, yielding a sparse stiffness matrix. Continuity is C1 within elements, and since they reduce to linear barycentric coordinates on the faces of the triangulation, the functions are C0 continuous across element boundaries. Hence, the basis functions Ïi are in the Sobolev space H 1 , and the ï¬nite elements approximation converges [Bat95]. In order to evaluate the strain, we require the ï¬rst order partial derivatives of the shape functions Ïi . The derivatives of (7) and (9) can be computed analytically, the corresponding expressions are given in the appendix. Note that in the case k = 4, the Ïi are linear, and equal to the shape functions commonly used in tetrahedral element discretizations. Hence, our method integrates seamlessly into FE methods using constant strain tetrahedra. Optimized code can be used for tetrahedral elements. 3.2.1. Numerical Issues The shape functions deï¬ned as above are sums of volume ratios, which are problematic to compute if the volumes in (7) approach zero. This can occur in two situations: 1) if the point x lies on the boundary of the element, or 2) if a surface triangle has zero area. The Ïi are not well deï¬ned on the boundary of the element, however, they converge to barycentric coordinates on the faces. Thus, this special case can easily be resolved. In practice, we can choose where to evaluate the interpolant during per element integration (see Section 3.4), and thus avoid evaluating Ïi or Ïi on the faces, except in the case of sliver elements. We remove such slivers from the discretization as described in Section 4. Triangles with zero area make no net contribution to the weights wi . Although not obvious from Equations (7) or (9), this can be easily seen in the equivalent formulation as presented by [JSW05]. Since it was speciï¬cally designed to be numerically robust, we also implemented the algorithm given in [JSW05] using numerical differentiation to compute the gradients of the basis functions. A comparison of these two methods showed no signiï¬cant differences in simulation behavior.
c The Eurographics Association and Blackwell Publishing 2007.

Figure 3: (a) Wireframe view of the element shown in Fig. 1. (b) With triangulated faces.

deï¬ned on convex polyhedra with triangular faces. We therefore triangulate the faces of our elements in order to compute the weight functions (see Section 3.2.1 for a discussion of numerical issues). Fig. 3 shows an element and a possible triangulation of its surface. Triangulating non-triangular faces is unproblematic compared to computing a tetrahedralization of the element. Note that if two convex polyhedra share a common face, this face is necessarily planar, such that the exact nature of the triangulation does not change the shape of the elements. For the sake of consistency, we enforce this planarity constraint also for faces that lie on the boundary of the domain. Once barycentric coordinates deï¬ned for arbitrary polygonal faces become available, these can be used without changes to our method. One step in this direction has been taken by [Lan06]. Now consider the vertex xi and its edge-incident one-ring neighbors enumerated as x j . The weight wi is deï¬ned as a weighted sum of ratios of signed tetrahedra volumes wi (x) =

â
j

c j, j+1 ci, jV jâ1, j+1, j + , Vi, j, j+1 Vi, jâ1, jVi, j, j+1

(7)

where the volume Va,b,c = V (xa , xb , xc , x) for vertex indices a, b, and c, and (xa â x) Ã (xb â x) (xa â x)T (xb â x) ca,b = arccos . 6 xa â x xb â x (8) The mean value shape function Ïi is ï¬nally obtained by normalizing the weight function wi : Ïi (x) = wi (x) . k âl=1 wl (x) (9)

See Fig. 4 for a visualization of Ïi . The functions Ïi are true barycentric coordinates for convex polyhedra in the sense that they are positive inside the polyhedron (if it is convex), and that each point x inside the polyhedron can be written as a weighted sum of the vertices xi with its coordinates as weights: x = âk Ïi (x) xi . This i=1 property implies partition of unity and reproduction of linear functions.

Wicke et al. / A Finite Element Method on Convex Polyhedra

3.3. Finite Element Discretization With the shape functions deï¬ned in the last section, we discretize the continuous energy (5) using the approximation (6). If we consider a particular element e with vertices i = 1, . . . , k, only the shape functions Ï1 , . . . , Ïk of its vertices are non-zero. Hence, within e the displacement interpolation (6) is ï£¹ï£® u ï£¹ ï£® 1 Ï1 (x) Ïk (x) ï£»ï£¯ . ï£º, Ï1 (x) Â·Â·Â· Ïk (x) u(x) = ï£° ï£° . ï£» . Ï1 (x) Ïk (x) uk
=:He(x)

of sample points p heuristically placed throughout the element. In our implementation, we use one integration sample per vertex of the element, plus one sample for each face of the triangulation of the element surface. We place the vertex integration samples between the element centroid c and the vertex xi , at pi = 0.8xi + 0.2c. The face samples are placed similarly, at p f = 0.9c f + 0.1c, where c f is the face centroid. The exact location of these sample points does not have a critical inï¬uence on the simulation result. Using the same one-rings as in Section 3.2, we deï¬ne the volume fraction Âµi associated with the vertex i as Âµe = i â j V xi , x j , x j+1 , c . 3Ve (14)

(10) with a 3 Ã 3k interpolation matrix He (x). Based on this, the 6D strain vector (3) inside this element can then be written as ï£® â ï£¹ 0 0 âx â ï£¯ 0 0 ï£º ï£¯ ï£º ây ï£¯ â ï£º ï£¯ 0 ï£º 0 âz ï£º H (x) u =: B (x) u. Ë Ë Îµ(x) = ï£¯ â (11) e e â ï£¯ 0 ï£º ï£¯ ây âx ï£º ï£¯ ï£º â â ï£° 0 ï£» âz ây
â âz

Similarly, the volume fraction for the face sample of face f with vertices j1 , j2 , and j3 is Îºe = f V x j1 , x j2 , x j3 , c . Ve
e

(15)

The element stiffness matrix Ke is then computed as Îºf Âµe T i Be (pi ) CBe (pi ) + â BT p f CBe p f . e 2 i f 2 (16) We have compared this method with Monte Carlo integration with a high number of samples (around 10000) per element, and have found no tangible difference in the behavior of the simulation. Ke = â In the special case of a tetrahedral element, we use only one integration point. Note that while computing the element stiffness matrix for arbitrary elements by integration is more complex than in the tetrahedral case, this has only minor impact on the overall simulation complexity. For linear elasticity, the stiffness matrices of the elements are constant throughout the simulation, unless the discretization is changed. This can happen in simulations involving adaptive reï¬nement, or due to element splitting after fracture or cutting. Since stiffness matrices are computed in a preprocess, the computational complexity during the actual simulation is mainly dependent on the total number of nodes (see also Section 6). 3.5. Simulation Loop The discrete energy (13) leads to the discrete equations of motion Â¨ Ë M U + D U + K U = F, (17)

0

â âx

From the stress-strain relationship (4) we get the elementâs energy density similar to the continuous formulation (5): Ue = 1 T Ë u 2
Z
Ve

BT C B e e

Ë u =:

1 T Ë Ë u Ke u. 2

(12)

The elementâs 3k Ã 3k stiffness matrix Ke is built by integrating products of partial derivatives of the shape functions. In contrast to tetrahedral meshes with linear basis functions, these partial derivatives are not constant for arbitrary convex elements. Hence, we perform numerical integration to compute Ke , which will be discussed in Section 3.4. Note that for linear elasticity, Ke is only computed in the rest state of the material, i. e. in a state where all elements are guaranteed to be convex (see also Section 6.1). Once the elementsâ stiffness matrices Ke are precomputed, the global 3n Ã 3n stiffness matrix K is assembled [Bat95]. If we denote by U the vector of nodal displacements [uT , . . . , uT ]T , the discrete version of the elastic energy (5) n 1 becomes 1 U(u) = UT K U. (13) 2 3.4. Integration In order to compute the per element stiffness matrix Ke = R T Ve Be CBe , we have to integrate over each element. For linear tetrahedral elements, these integrals are trivial to compute since Be is constant over the element. For other simple element shapes, for example hexahedral elements, integrals can be evaluated using Gauss quadrature. For irregularly shaped elements, such quadrature rules are unwieldy. Instead, we approximate the integrals using a low number
c The Eurographics Association and Blackwell Publishing 2007.

where M and D are the mass and damping matrices, respectively, and F represents external forces [Bat95]. We employ mass lumping to obtain a diagonal mass matrix M. Assuming constant density per element, the mass of each element can be trivially computed from its volume. We then take the volume fractions Âµe introduced in Section 3.4 i

Wicke et al. / A Finite Element Method on Convex Polyhedra

(a)

(b) (a) (b) (c) Figure 6: Removing sliver elements: (a) A sliver element and its neighbors. (b) New nodes are created at edge intersections. (c) After tessellating the sliver plane, new faces are connected to their neighboring elements. The faces in the sliver plane are colored with the color of both elements they are connected to. Note that the shape of the adjacent elements is not changed, only their connectivity is modiï¬ed to eliminate the sliver. cal problems during simulation, since the gradients of basis functions inside such elements cannot be evaluated robustly. Following Shewchuck [She02a, She02b], we call elements that are (almost) planar due to degenerated edges needles, while planar elements without degenerated edges are called slivers. Needles are easy to avoid: Whenever a node is created (during initial meshing or remeshing due to topological changes), it is snapped to existing nodes if incident edges would become too short. Most widely available meshing software, such as TetGen, can control the minimum edge length, and checking for nearby nodes during cutting is relatively easy. Slivers are more problematic. One such element conï¬guration in the tetrahedral case is shown in Fig. 5 (a). For general convex polyhedra, more complicated sliver elements are also possible, see Fig. 5 (b) for an example. Slivers are notoriously hard to avoid. Remeshing algorithms based on constrained Delaunay tetrahedralization insert more nodes into adjacent elements and remesh the neighborhood of the sliver element. This process is costly, and is not guaranteed to be local [She03]. Since we are not restricted to tetrahedral elements, we can instead merge the sliver element with neighboring elements. This process consists of the following steps (see Fig. 6 for an illustration): We ï¬rst compute a least-squares plane through the element, which we call the sliver plane. All vertices of the sliver element are projected onto the sliver plane. If this creates nodes that are too close to each other, they are merged. Then, all edges in the sliver plane are intersected and new nodes are inserted at the intersection points. Finally, the sliver plane is retessellated and each new face is connected to the two elements that were attached to the old faces it intersects. The sliver element can then be deleted. Note that this procedure does not change the volume of the adjacent elements. Therefore, no new degenerate elements are created by removing the sliver.
c The Eurographics Association and Blackwell Publishing 2007.

Figure 5: Sliver elements: (a) A tetrahedral sliver element. Note that all faces can have reasonable areas, and no edge is too short. (b) Allowing arbitrary convex polyhedra can lead to more complex slivers. to obtain a mass for each node by summation over all incident elements: mi = â ÂµeVe Ïe , i
e

(18)

where Ïe is the density of element e. Our experiments suggest that the volume ratio Âµe is a good approximation of the i integral over the shape function Ïi within the element. The linear elasticity model (3) is not invariant to rotations. We use stiffness warping [MG04] in order to control linearization artifacts. This method requires that we compute per-element rotation matrices Re . The shape matching method described by MÃ¼ller et al. [MG04] only works for tetrahedral elements. Therefore, we adopt the registration method presented by Horn [Hor87] instead, which has the additional advantage of being stable even for degenerate planar elements. Once the per-element rotations are known, the global stiffness matrix K has to be reassembled using the rotated element stiffness matrices RT Ke Re . e Finally, implicit Euler integration is used to solve for the dynamic behavior of the object. Since most real-world deformable objects are strongly damped, the numerical damping introduced by the integration scheme is acceptable. For undamped simulations, symplectic integration can be used [KWTâ 06]. Note that even though the construction of the basis function is more complicated than the construction using constant strain tetrahedra or other simple elements, the complexity of the resulting equation system only depends on the number of nodes. Hence, using arbitrary convex polytopes instead of simpler element shapes does not result in a slower simulation. On the contrary, after some topological changes in the domain, tetrahedral remeshing is likely to have produced more elements and nodes than necessary for arbitrary convex elements. 4. Sliver Removal Contrary to tetrahedral meshes, it is unclear what criteria determine the quality of a convex polyhedral element. However, our experiments suggest that bad elements are typically almost planar. These elements give rise to numeri-

Wicke et al. / A Finite Element Method on Convex Polyhedra

(a)

(b)

(a)

(b)

Figure 7: (a) The bottom element is split along a plane. New simulation nodes (red) are added where the cutting plane intersects the original geometry of the element. (b) New integration samples are created in all elements that were changed by the split (shaded blue). Not all neighboring elements need to be updated. (c) If the elements were tetrahedral before the sliver was removed, exactly one new node is created using this technique. The neighboring elements have ï¬ve nodes each after the sliver is deleted. In more complex cases, more nodes might be inserted. Projecting the nodes of a sliver element onto the sliver plane may lead to slightly non-convex elements in the neighborhood. However, this is not a problem for our method, since mean value coordinates, from which our basis functions are derived, are well-behaved even for non-convex elements [JSW05]. 5. Cutting Changing the topology of the simulation mesh reveals the strengths of our method. As our only requirement to the mesh is that all elements must be convex, maintaining a valid simulation mesh after cutting operations is easy. In this section, we review the atomic operations necessary to cut meshes consisting of convex elements. We ï¬rst discuss the case of elements that are split entirely by a plane, before moving on to progressive cuts through elements. 5.1. Splitting Elements Splitting a convex polytope along a plane results in two convex polytopes. Thus, after planar element split operations, no remeshing is necessary in order to maintain a valid discretization of the simulation domain. Wherever the splitting plane intersects existing edges, new simulation nodes are created. We compute displacement samples for the new nodes using our interpolant u, which is linear on the edges of the discretization. During these edge splits, care has to be taken not to create nodes too close to existing nodes to avoid degenerate edges. In practice, nodes that would be created too close to existing nodes are snapped to the existing geometry. For all elements that were changed in the process, new integration samples are computed. In order to avoid computing integration samples multiple times, reinitialization of element integration samples is deferred until the end of the timestep. Fig. 7 illustrates the procedure. Note
c The Eurographics Association and Blackwell Publishing 2007.

(d)

Figure 8: (a) Two elements are cut with a polygonal cut shape (blue). (b) All intersected elements are split along the cutting plane. (c) The polygon edges are intersected with the existing edges of the mesh, and new nodes are inserted at intersections. Faces in the cutting plane are split to create a consistent tessellation. (d) Nodes inside the cut shape are duplicated, the material is separated along the cut. that t-junctions might be created during splitting. This is not a problem, since the only requirement to the discretization is that all elements are convex. 5.2. Progressive Cuts When progressive cuts are considered, elements are not necessarily split entirely in a single timestep. Instead, we have to deal with an arbitrary surface intersecting the element [BGTG03, SHGS06]. We therefore describe how to cut the simulation mesh with arbitrary planar polygons. Any given cut surface can be tessellated and the simulation mesh is sequentially cut with each of the resulting polygons. As our cut shape, consider a polygon with vertices p1 . . . pk , lying in a cutting plane P. We ï¬rst split all elements that intersect the cut shape along P, as described in Section 5.1. Then, we insert simulation nodes at the polygon points p1 . . . pk , and connect them with edges. The polygon edges are intersected with edges in the simulation mesh and all intersection points are added as new simulation nodes. The faces in the cut plane are now split to accommodate the new nodes and edges. We enforce that all generated faces are convex. Finally, all simulation nodes inside the cut shape can be duplicated, and their incident elements are separated along the cutting plane. Fig. 8 illustrates the necessary steps. If there are no simulation nodes inside the cut shape, the cut cannot open. In such cases, we insert one additional simulation node at the centroid of the cut shape, and connect it with edges to the polygon nodes at p1 . . . pk , thus creating a pocket in the material. Note that for non-tetrahedral elements, cuts through a single element might not be planar. In these cases, the surface

Wicke et al. / A Finite Element Method on Convex Polyhedra

Fig. 1 2 9 10

Start End #Nodes #Elem #Nodes #Elem 24 1 24 1 184 31 184 31 64 27 1214 60 24079 8278 46132 44118

avg. time/ frame [s] 0.012 0.22 0.8 (0.04) 6.08 (3.56)

Figure 9: A block of material is sliced. Very few additional elements are created as tetrahedral subdivision is not necessary. The bottom row shows the elements. Note that even though many nodes are created to accurately represent the cut surface, elements do not need to be split.

Table 1: Node count, element count, and computation time. The time in parenthesis is the computation time for the dynamic update not including recomputation of basis functions.

within the element has to be tessellated after its edges have been intersected. The element is then sequentially cut with all faces of the tessellation as described above. We approximate the surface in each element by the triangulation of the intersection points on edges of the elements. 6. Results and Discussion Table 1 gives simulation times for the scenes shown here, as well as element and node counts. Timings were measured on a Pentium 4, 3GHz, and do not include rendering time. Fig. 1 shows a single element with 24 nodes that falls on a slope and deforms on impact. Note that due to the nonlinearity of basis functions, even a single element can undergo nonlinear deformations. Another example of elasticity using convex polyhedra is shown in Fig. 2. The elements in this example were created by repeatedly splitting a cube with random planes. The elements in this example have 8 to 32 nodes. Simple cuts are shown in Fig. 9. A cube consisting of 3 Ã 3 Ã 3 hexagonal elements is sliced. During the ï¬rst cut, three elements are added. Note that contrary to an implementation using tetrahedral elements only, elements do not have to be subdivided in order to accommodate new vertices, leading to fewer elements and nodes. Nevertheless, the cut surface is represented accurately, and smooth, nonlinear deformations are possible. Fig. 10 shows more complicated cuts. Elements created by cutting operations are regular elements and can be cut again. We used TetGen to generate an initial tetrahedral mesh. After all cuts are complete, 51% of the elements are still tetrahedral, the elements with the highest number of nodes has 27 nodes. Performing the same sequence of cuts using a state of the art tetrahedral subdivision method [SHGS06] results in more than 75000 nodes and more than 300000 elements, even if the cuts are executed nonprogressively. The exact number of nodes and elements depends on snapping thresholds.

Highly optimized code is available for tetrahedral FE simulation. On purely tetrahedral models, our implementation of the above algorithm is slower than these methods. However, the theoretical complexity in these cases is the same. As soon as topological changes are considered, the number of elements and nodes in the discretization grows faster when only tetrahedral elements are allowed. 6.1. Limitations Our method is limited to linear elasticity. Nonlinear elasticity would require evaluating the basis functions and their gradients also for the deformed state of the simulation mesh. This is possible in principle, but the elements may not be convex in the deformed state. While our basis functions are smooth even for non-convex elements (contrary to Wachspress coordinates), they lose the property of positivity. One possible approach might be to subdivide the deformed elements into convex parts in each time step. Irving et al. [ITF06] treat problems arising for nonlinear strain in hexahedral elements, however, their method is not directly applicable to arbitrary convex polyhedra. In shell-like situations, strain concentrates at element boundaries. This artifact can be observed in Fig. 9, see also the accompanying video. Note that this limitation applies to all ï¬nite element methods with only C0 continuity across element boundaries, including constant strain tetrahedra. So far, the faces of elements have to be decomposed into triangles in order to evaluate the basis functions. Although we have not experienced numerical difï¬culties caused by face triangulation, a formulation that does not require triangular faces would of course be more elegant. 7. Conclusion and Future Work We have presented a novel ï¬nite element method based on discretization of the domain into convex elements. The basis functions within these elements are derived from recently introduced 3D mean value coordinates. These basis functions fulï¬ll all necessary criteria to prove convergence of our method. In the case of tetrahedral elements, the functions are linear, and constant strain tetrahedra emerge as a special case of our approach.
c The Eurographics Association and Blackwell Publishing 2007.

Wicke et al. / A Finite Element Method on Convex Polyhedra

Figure 10: Slicing the Stanford Bunny. The cut trajectories are accurately represented. We can cut extremely thin slices without mesh restructuring â the simulation method is stable in these cases. Our method is more ï¬exible than a pure tetrahedron-based approach. Splitting elements does not require remeshing, reducing the number of elements and nodes created during cutting operations, especially if consecutive cuts through the same region are considered. As future work, we plan to do a thorough numerical analysis of the proposed approach, including comparisons regarding accuracy. The effect of our integration heuristic on accuracy and convergence needs to be examined. Meshing a domain into a set of convex polyhedra, as opposed to tetrahedra, is also an open problem. Acknowledgments We would like to thank Bernd Bickel for his work on the raytraced illustrations and Denis Steinemann for comparison data. We are grateful to Christoph Schwab for the helpful discussion. Martin Wicke is funded by the Swiss National Commision for Technology and Innovation (CTI), project no. 7560.1 ESPP-ES. References
[Bat95] BATHE K.-J.: Finite Element Procedures. Prentice Hall, 1995. [BG00] B IELSER D., G ROSS M.: Interactive Simulation of Surgical Cuts. In Proceedings of Paciï¬c Graphicsâ00 (2000), pp. 116â 125. [BGTG03] B IELSER D., G LARDON P., T ESCHNER M., G ROSS M.: A State Machine for Real-Time Cutting of Tetrahedral Meshes. In Proceedings of Paciï¬c Graphicsâ03 (2003), pp. 377â 386.
c The Eurographics Association and Blackwell Publishing 2007.

[BNC96] B RO -N IELSEN M., C OTIN S.: Real-time Volumetric Deformable Models for Surgery Simulation Using Finite Elements and Condensation. In Proceedings of Eurographicsâ96 (1996), pp. 57â66. [Chu96] C HUNG T. J.: Applied Continuum Mechanics. Cambridge University Press, New York, 1996. [DDCB01] D EBUNNE G., D ESBRUN M., C ANI M.-P., BARR A. H.: Dynamic Real-Time Deformations using Space and Time Adaptive Sampling. In Proceedings of SIGGRAPHâ01 (2001), pp. 31â36. [FKR05] F LOATER M. S., KOS G., R EIMERS M.: Mean Value Coordinates in 3D. Computer Aided Geometric Design 22 (2005), 623â631. [Flo03] F LOATER M. S.: Mean Value Coordinates. Computer Aided Geometric Design 20, 1 (2003), 19â27. [GKS02] G RINSPUN E., K RYSL P., S CHRÃDER P.: CHARMS: A Simple Framework for Adaptive Simulation. In Proceedings of SIGGRAPHâ02 (2002), pp. 281â290. [HF06] H ORMANN K., F LOATER M. S.: Mean Value Coordinates for Arbitrary Planar Polygons. Transactions on Graphics 25, 4 (2006), 1424â1441. [Hor87] H ORN B. K. P.: Closed-Form Solution of Absolute Orientation using Unit Quaternions. Journal of the Optical Society of America 4 (1987), 629â642. [ITF06] I RVING G., T ERAN J., F EDKIW R.: Tetrahedral and Hexahedral Invertible Finite Elements. Graphical Models 68, 2 (2006), 66â89. [JLW07] J U T., L IEPA P., WARREN J.: A General Geometric Construction of Coordinates in a Convex Simplicial Polytope. Computer Aided Geometric Design (2007). preprint. [JSW05] J U T., S CHAEFER S., WARREN J.: Mean Value Coordinates for Closed Triangular Meshes. In Proceedings of SIGGRAPHâ05 (2005), pp. 561â566.

Wicke et al. / A Finite Element Method on Convex Polyhedra [JSWM05] J U T., S CHAEFER S., WARREN J., M.D ESBRUN: Geometric Construction of Coordinates for Convex Polyhedra using Polar Duals. In Proceedings of the Symp. on Geometry Processingâ05 (2005), pp. 181â186. [KGCâ 96] KOCH R. M., G ROSS M. H., C ARLS F. R., VON B ÃREN D. F., F RANKHAUER G., PARISH Y. I. H.: Simulating Facial Surgery Using Finite Element Models. In Proceedings of SIGGRAPHâ96 (1996), pp. 421â428. [KWTâ 06] K HAREVYCH L., W EIWEI , T ONG Y., K ANSO E., M ARSDEN J. E., S CHRÃDER P., D ESBRUN M.: Geometric, Variational Integrators for Computer Animation. In Proceedings of the Symp. on Computer Animationâ06 (2006), pp. 43â51. [Lan06] L ANGER T.: Spherical Barycentric Coordinates. In Proceedings of the Symp. on Geometry Processingâ06 (2006), pp. 81â88. [MBF04] M OLINO N., BAO Z., F EDKIW R.: A Virtual Node Algorithm for Changing Mesh Topology during Simulation. In Proceedings of SIGGRAPHâ04 (2004), pp. 385â392. [MG04] M ÃLLER M., G ROSS M.: Interactive Virtual Materials. In Proceedings of Graphics Interfaceâ04 (2004), pp. 239â246. [MKNâ 04] M ÃLLER M., K EISER R., N EALEN A., PAULY M., G ROSS M., A LEXA M.: Point-Based Animation of Elastic, Plastic and Melting Objects. In Proceedings of the Symp. on Computer Animationâ04 (2004), pp. 141â151. [NMKâ 06] N EALEN A., M ULLER M., K EISER R., B OXERMAN E., C ARLSON M.: Physically Based Deformable Models in Computer Graphics. Computer Graphics Forum 25, 4 (2006), 809â836. [OBH02] OâB RIEN J. F., BARGTEIL A. W., H ODGINS J. K.: Graphical Modeling and Animation of Ductile Fracture. In Proceedings of SIGGRAPHâ02 (2002), pp. 291â294. [OH99] OâB RIEN J. F., H ODGINS J. K.: Graphical Modeling and Animation of Brittle Fracture. In Proceedings of SIGGRAPHâ99 (1999), pp. 137â146. [PKAâ 05] PAULY M., K EISER R., A DAMS B., D UTR &#233; P., G ROSS M., G UIBAS L. J.: Meshless Animation of Fracturing Solids. In Proceedings of SIGGRAPHâ05 (2005), pp. 957â964. [RGTC98] ROTH M., G ROSS M., T URELLO S., C ARLS F. R.: A Bernstein-BÃ©zier Based Approach to Soft Tissue Modeling. In Proceedings of Eurographicsâ98 (1998), pp. 285â294. [She02a] S HEWCHUCK J.: What Is a Good Linear Finite Element? Interpolation, Conditioning, and Quality Measures. In Proceedings of the 11th International Meshing Roundtable (2002), pp. 115â126. [She02b] S HEWCHUCK J.: What Is a Good Linear Finite Element? Interpolation, Conditioning, Anisotropy, and Quality Measures. unpublished extended version, 2002. [She03] S HEWCHUCK J.: Updating and Constructing Constrained Delaunay and Constrained Regular Triangulations by Flips. In Proceedings of the 19th Annual Symposium on Computational Geometry (2003), pp. 181â190. [SHGS06] S TEINEMANN D., H ARDERS M., G ROSS M., S ZEKELY G.: Hybrid Cutting of Deformable Solids. In Proceedings of the IEEE VRâ06 (2006), pp. 35â42. [SM06] S UKUMAR N., M ALSCH E. A.: Recent Advances in the Construction of Polygonal Finite Element Interpolants. Archives of Computational Methods in Engineering 13, 1 (2006), 129â 163.
c The Eurographics Association and Blackwell Publishing 2007.

[SOG06] S TEINEMANN D., OTADUY M. A., G ROSS M.: Fast Arbitrary Splitting of Deforming Objects. In Proceedings of the Symp. on Computer Animationâ06 (2006), pp. 63â72. [Suk98] S UKUMAR N.: The Natural Element Method in Solid Mechanics. PhD thesis, Northwestern University, Chicago, USA, 1998. [TF88] T ERZOPOULOS D., F LEISCHER K.: Modeling Inelastic Deformation: Viscoelasticity, Plasticity, Fracture. In Proceedings of SIGGRAPHâ88 (1988), pp. 269â278. [TPBF87] T ERZOPOULOS D., P LATT J., BARR A., F LEISCHER K.: Elastically Deformable Models. In Proceedings of SIGGRAPHâ87 (1987), pp. 205â214. [Wac71] WACHSPRESS E. L.: A Rational Basis for Function Approximation. In Lecture Notes in Mathematics (1971), vol. 228, Springer, pp. 223â252. [Wac75] WACHSPRESS E. L.: A Rational Finite Element Basis. Academic Press, 1975. [War96] WARREN J.: Barycentric Coordinates for Convex Polytopes. Advances in Computational Mathematics 6 (1996), 97â 108.

Appendix A: Derivatives of Shape Functions Consider a convex polytope with vertices at positions xi , i = 1 . . . k. Recalling (9) from page 4, we obtain for the gradient of the basis function Ïi Ïi = âÏi = âx wi âk wl â wi âk l=1 l=1 âk w l l=1
2

wl

.

(19)

With the one-ring vertices of vertex i enumerated as x j , the gradient of the weight wi is wi = â j
c j, j+1Vi, j, j+1 âc j, j+1 Vi, j, j+1 + 2 Vi, j, j+1 ( ci, j V jâ1, j+1, j +ci, j V jâ1, j+1, j )Vi, jâ1, j Vi, j, j+1 â 2 2 Vi, jâ1, j Vi, j, j+1 ci, j V jâ1, j+1, j(Vi, jâ1, j Vi, j, j+1 + Vi, jâ1, j Vi, j, j+1 ) . 2 2 Vi, jâ1, j Vi, j, j+1

(20) The gradient of a tetrahedron volume Va,b,c has the magnitude of one third the triangle area A(a, b, c) and points in the direction of the triangle normal: (xc â xa ) Ã (xb â xa ) . (21) 6 Ë We deï¬ne di = x â xi and di = di / di . The gradient of the term ca,b is given by Va,b,c = ca,b =
1 6

da Â· db da Ë Ë arccos(da Â·db ) Ë Ë da Ãdb
Ë Ë arccos(da Â·db ) Ë Ë da Ãdb

Ë

Ë

Ë

Ë db + db da

â da â db + . (22) = 1, (22)

Ë Ë (da Ã db ) Ã (xb â xa )
Î± sin Î± x and limxâ0 sin x

Note that since = can be robustly evaluated in all cases.

