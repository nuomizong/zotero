4D Printing for Freeform Surfaces: Design Optimization of Origami and Kirigami Structures
Tsz-Ho Kwok1,2 , Charlie C.L. Wang1 , Dongping Deng2 , Yunbo Zhang1,3, Yong Chen2â
1 Department 2 Epstein

of Mechanical and Automation Engineering, The Chinese University of Hong Kong

Department of Industrial and Systems Engineering, University of Southern California
3 School

of Mechanical Engineering, Purdue University

A self-folding structure fabricated by additive manufacturing can be automatically folded into a demanding 3D shape by actuation mechanisms such as heating. However, 3D surfaces can only be fabricated by self-folding structures when they are ï¬attenable. Most generally designed parts are not ï¬attenable. To address the problem, we develop a shape optimization method to modify a non-ï¬attenable surface into ï¬attenable. The shape optimization framework is equipped with topological operators for adding interior/boundary cuts to further improve the ï¬attenability. When inserting cuts, selfintersection is locally prevented on the ï¬attened 2D pieces. The total length of inserted cuts is also minimized to reduce artifacts on the ï¬nally folded 3D shape. Keywords: Additive manufacturing, Flattenable, Selffolding, Origami, Kirigami, Computer-Aided Design 1 Introduction Additive manufacturing (AM) is a promising technique for fabricating Three-Dimensional (3D) complex shapes, which are difï¬cult to be fabricated by traditional manufacturing processes. Currently, most AM processes are layerbased. However, such approach has drawbacks such as fabrication speed is slow and the built parts have anisotropic stiffness (i.e., weaker in one direction comparing to others). Recently, inspired by Origami and Kirigami [1,2], a new AM technique based on self-folding structures has been developed to overcome the problems of the conventional layerbased fabrication approach [3, 4]. The self-folding approach this is also called 4D printing. In other ï¬elds, self-folding structures have also attracted a lot of attentions in biomedical and robotic applications (e.g., [5, 6]). Instead of directly fabricating the designed 3D shape, this new manufacturing method ï¬rst fabricates a two-dimensional (2D) part. Then, the part will be self-folded into the designed 3D shape using certain stimulating conditions (e.g., heat or magnetic). Models fabricated by this method have reconï¬gurable shapes,

and the procedure of fabrication is fast since only a few active/passive layers need to be made by additive manufacturing. 1.1 Motivation Not every 3D shape can be made by a 2D self-folding structure. To fabricate a model by self-folding, the 3D shape must be ï¬attenable â i.e., it can be ï¬attened into a 2D pattern without stretching. A 3D surface that has such a geometric property is called ï¬attenable. A designed 3D shape is often non-ï¬attenable, and some geometric details cannot be reconstructed if such a shape is fabricated by a non-optimized self-folding structure (refer to an example in the top row of Fig.1). In the prior work of self-folding structures (e.g., [3]), the 3D models to be fabricated are cut into strips in order to make them ï¬attenable. Nevertheless, artifacts are left at the places where cuts are introduced after folding. The more the cuts, the more artifacts are resulted on the ï¬nal folded part. In this paper, we aim at tackling this problem by optimizing a designed surface that is fabricated by self-folding structures. The following two questions will be answered: 1. Given a 3D shape M that is not ï¬attenable, how to optimize the shape of M into a ï¬attenable one M â² while minimizing the shape similarity error between M and Mâ² ? 2. When cuts need to be added in order to get a shape that is more similar to M, how to minimize the number and the length of cuts on M â² ? Moreover, self-intersection must be prevented on the ï¬attened 2D piece of M â² . Before ï¬nding answers of the above questions, we review the related literatures on selffolding structures and geometric computation approaches. 1.2 Related Works Self-folding structures (also called self-transforming or self-evolving structures) are usually designed to deform their shapes in a pre-deï¬ned way, where the shape variation can

â Corresponding

author: yongchen@usc.edu, (213) 740-7829

Fig. 1. For an input freeform surface to be fabricated by Origami-structure â the face model, our shape optimization can generate a 2D pattern for producing a self-folding structure by AM, which can be folded into a face model by heating (see the top row). Cuts can be automatically added onto the model to further improve the shape similarity of fabricated surface comparing to the input model. Adding too many cuts can generate unwanted artifacts on the surface of fabricated part â see the bottom-left corner for an example.

be induced by different physical stimulations to fold, expand, shrink and curl. The idea was ï¬rst developed by using hydrophilic materials that can be activated when being submerged in water. Thereafter, different self-folding mechanisms have been developed in the form of planar sheets by using different folding principles â e.g., shape memory materials [7], bilayer structures [8â10], inhomogeneous materials [11], and Shrinky-Dinks ï¬lms [12]. They can be triggered by different conditions, including thermal [13,14], microwaves [15], or humidity [16, 17]. The Shrinky-Dinks ï¬lm shrinks when it is exposed to an environment having a temperature higher than the transition temperature of the ï¬lm. By controlling the area of exposure on a ï¬lm surface, the bending movements can be designed. Using this idea, our recent paper [4] has calibrated the mapping between the width of a hinge (in the form of exposed ï¬lm) and the bending angle of this hinge under heating. Many other researches have also demonstrated the self-folding techniques using different approaches. Nevertheless, the previous works mainly focus on the transformation of simple shapes, for which manual modeling was used in their construction (e.g., [18]). Recently, Raviv et al. [19] showed how to construct and simulate a complex solid structure that bends and stretches over time; however, the work only considers a 2D grid skeleton. In this paper, we aim at automatically designing self-folding structures for fabricating 3D freeform surfaces. Given a 3D shape, computing its corresponding 2D pattern is known as the surface ï¬attening problem in ComputerAided Design/Manufacturing (CAD/CAM) [20]. The computation of surface ï¬attening is usually formulated as minimizing different surface metrics, such as angle, distance, area. However, no mapping can fully reduce the distortion on

a general 3D shape, and the distortion increases signiï¬cantly when the freeform surfaces are more complex in shape [21]. Kilian et al. [22] presented an optimization-based computational framework for the design and reconstruction of general developable surfaces. They optimize a pair of models in the form of 3D mesh and 2D pattern while maintaining an isometric mapping between them. However, models with high surface complexity have not been considered, where topological operations need to be performed. Speciï¬cally, cuts need to be added to reduce the distortion. Sheffer [23] proposed a method based on a minimum spanning tree that passes through points with high Gaussian curvature to compute cuts with a minimal total length. Wang et al. [24] introduced cutting paths starting from a point with maximum Gaussian curvature to the surface boundary to reduce stretches in surface ï¬attening. In both methods, cuts are added in the way of linking critical points and the surface boundary; however, such cuts maybe long and have the risk of introducing selfintersections on the ï¬attened 2D piece. This paper proposes a different strategy to add cuts in a more effective and safe way. The approaches based on directly optimizing a 3D shape to improve its ï¬attenability converges slowly. For instance, Wang [25] introduced the Flattenable Laplacian (FL) mesh and used Newtonâs method to optimize the mapping to be isometric. The problem is formulated as a constrained nonlinear optimization problem, and a scheme akin to multigrid solver was employed to improve the convergence of the computation. Other direct optimization approaches such as [26, 27] also have similar problems. Different from the prior work, we conduct a ï¬attening/folding deformation approach in this work.

1.3 Main Results We ï¬rst ï¬atten a 3D surface M into a 2D pattern D with minimal stretching. The 2D pattern is then folded into a shape M (1) similar to M while keeping the rigidity of each fragment on D. After that, M (1) is ï¬attened into a new 2D pattern D(1) , which will be folded back to get a better approximation of M. Iteratively applying the aforementioned ï¬attening and the folding steps can result in a pair of 2D and 3D models < D(n) :: M (n) >, where D(n) and M (n) are isometric and M (n) gives a good approximation of M. When cuts are needed to further reduce the error between M (n) and M, most of the prior approaches add cuts from the interior of a surface to its boundary. Our study ï¬nds that adding such long cuts may not be optimal in many cases. There are different types of non-ï¬attenable surfaces. While adding cuts to boundary is appropriate for elliptic surfaces, it could lead to unwanted self-intersection for hyperbolic surfaces. It is also known that a 2D pattern with self-intersection cannot be fabricated using a self-folding structure. In this research, a novel interior cutting scheme is introduced. An algorithm for progressively applying interior and boundary cuts has been developed. Based on it, our method can prevent self-intersection on 2D patterns and reducing the total cutting length at the same time. The technical contributions of this work are: 1. We develop a new computation tool for designing selffolding structures from a general 3D freeform surface. 2. We propose a framework of iterative ï¬attening/folding to optimize the ï¬attenability of an input 3D surface, and simultaneously ï¬nd the ï¬attenable 3D shape as well as its corresponding 2D pattern. 3. We develop a hybrid cutting algorithm, which can prevent self-intersection on 2D patterns and minimize the surface deï¬ects that caused by the added cuts. Experimental tests using the fabrication method of 4D printing have been performed to verify the effectiveness of the developed design optimization framework for self-folding structures.

Fig. 2.

An illustration for the working principle of self-folding [4].

(Top) The self-folding structure is printed on a shrinking ï¬lm with body and constraining layers. It is bended when heat is applied. (Bottom) The test case of a self-folded crane model is shown.

is used [28]. Fig.2 illustrates the described working principle and shows a crane example that is self-folded from a designed 2D pattern. After modeling and calibrating the 2D patterns on the active layer, we can control the bending angle on every hinge by designing different 2D patterns on a hinge. Speciï¬cally, the bending angle (Î±) depends on the thicknesses of the active layer (h) and the passive layers (d), as well as the width of a hinge (L). 2.2 Terminology and Mathematical Deï¬nitions The necessary terminology and mathematical deï¬nitions of our work are presented in this section. First of all, the computation of design optimization is taken on an abstractive graph of the self-folding structure that is deï¬ned as follows. Deï¬nition 1 The abstractive graph of a self-folding structure is represented by a mesh surface M = {F, E,V }, where F, E and V are the sets of faces, edges and vertices, respectively. Referring to the self-folding structure, F deï¬nes the building blocks on the passive layer, E deï¬nes the hinges where the bending happens, and V gives the geometric shape in both 3D and 2D. To simplify the analysis and the computation, only two-manifold mesh surfaces are considered in this study. Each interior edge of a two-manifold mesh has two adjacent faces. The angle between the normals of two neighboring faces in 3D deï¬ned the bending angle of the corresponding hinge. When there are ne interior edges, we need to determine ne hinges with the set of bending angles as {Î±1 , Î±2 , . . . , Î±ne }. Deï¬nition 2 For each vertex i in V , there is a position vi in 3D and a corresponding 2D planar coordinate pi . The 2D pattern of a self-folding structure is denoted by

2 Methodology 2.1 Fabrication by Additive Manufacturing In our previous work [4], a fabrication method based on additive manufacturing has been presented for self-folding structures. This method will be employed in the physical tests for verifying the design results that are generated by our approach. We brieï¬y introduce the principle of the fabrication approach here. A multi-layered structure with both active and passive materials is employed, where different material layers undergo various ratios of volumetric shrinkage after heating. As a result, a structure made in this way can be self-folded into a desired conï¬guration. In our setup, prestrained polystyrene ï¬lms that shrink under heating â the Shrinky-Dinks ï¬lms [12] â are used as the layer of active material. The layers of passive materials are produced from photocurable resin by additive manufacturing â the maskimage-projection-based stereolithography (MIP-SL) process

between the faces in 3D and 2D. Such rigidity measurement can be considered as a weak form of the isometry and ï¬attenability metrics. For each triangle f â M with three vertices at (v1 v2 v3 ) in 3D and (p1 p2 p3 ) in 2D, we add the fourth accessory point v4 along the unit normals of the triangle rooted at the center of f . Similar, p4 is also added for the corresponding triangle in D.
Fig. 3. For a triangle with vertices shape in blue by an afï¬ne transformation rotation matrix R from T using SVD.

(v1 v2 v3 ) (left) deformed a T, we can extract the pure

Ë Remark 4 The transformation from 2D to 3D is T = PPâ1 with P = [vt1 â vt4 vt2 â vt4 vt3 â vt4 ] Ë P = [pt â pt pt â pt pt â pt ]
1 4 2 4 3 4

D, on which the vertices are placed at {i â V |pi }. Remark 1 The mapping, Î : M â D, need to be isometric as the building blocks in F are inelastic. When giving the 3D and 2D shapes of M and D, whether Î is isometric can be checked by the invariance of edge length. Remark 2 only if The mapping, Î : M â D, is isometric if and

by aligning the centers of 3D and 2D coincident. Note that, the planar positions are also represented as 3D vectors in this formulation. In general, T is not a rigid transformation (see Fig.3 for an illustration). Its nearest rigid transformation R can be obtained by ï¬rst computing the Singular Value Decomposition (SVD) of T: T = UÎ£Vâ¤ , and then eliminating the scaling matrix Î£ as R = UVâ¤ . Based on this, the rigidity of Î can be evaluated by the following metric. Deï¬nition 4 The rigidity of mapping Î : M â D is deï¬ned by the Frobenius norm Â· F as Ergd =

Eiso =

âeâE

â(

vs vq â pspq )2 â¡ 0

(1)

where s and q are two vertices of the edge e. From differential geometry [29], it is known that only developable surfaces have isometric mappings to planar shapes. The mathematical deï¬nition of developable surface is given on differentiable surfaces relating to Gaussian curvature. Generally, a surface is developable if and only if the Gaussian curvature at any point is zero except the boundary points, which do not have Gaussian curvature. Here, we adopt a discrete interpretation of developable surface and name it as ï¬attenable (or non-ï¬attenable) by using the deï¬nitions in [25]. Deï¬nition 3 For a triangular mesh vertex v, if and only if the summed inner angle Î¸(v) around it is identical to 2Ï, the triangles around it can be ï¬attened onto a plane without distortion; such a vertex is called ï¬attenable vertex. Remark 3 A triangular mesh patch is ï¬attenable when all its interior vertices are ï¬attenable, which can be measured by a metric E f lt = â(Î¸(v) â 2Ï)2 â¡ 0 with all interior vertex v. The problem of the isometric metric Eiso and the ï¬attenable metric E f lt is that the direct computation based on them does not lead to an optimization framework that can converge fast (see [21, 25]). Instead, we deï¬ne a new function based on measuring the rigidity of the transformation (2)

k=1

â

nf

Tk â Rk

2 F.

(3)

Similar to this formulation, when a transformation is from 3D to 2D (e.g., in the ï¬attening), T is formulated in an inË verse way as T = PPâ1 . Generally, designed 3D freeform surfaces are nonï¬attenable. As a result, we need to compute 2D pieces that can be folded back into the shapes similar to the designed surfaces. To conduct such optimization, a metric is needed to evaluate the shape similarity between a shape M â² that is folded back from a 2D piece and the designed 3D shape M. Deï¬nition 5 Assume M â² and M have the same connectivity. The shape approximation error is deï¬ned as Eapx = â vi â vâ² 2 , i
i=1 nv

(4)

where vi and vâ² are the positions of a vertex on M and M â² . i 2.3 Algorithm Overview To fabricate a designed 3D shape by a self-folding structure, the current practice is to introduce many cuts on the input surface so that the surface is tessellated into a strips. Nevertheless, as mentioned before, unwanted artifacts are also created for the added cuts. We develop a design optimization approach to address the problem by minimizing the shape approximation error between the designed surface and the surface that is folded from a planer piece. When

M via the repeated process of ï¬attening and folding. When ï¬attening a 3D surface, the stretch caused by the difference between the 2D and 3D surfaces should be minimized. After getting a 2D pattern, it will be folded to approximate the input 3D shape M. The steps of ï¬attening and folding are iteratively applied until both the approximation error Eapx and the rigidity error Ergd have been minimized. We stop the iteration when neither Eapx nor Ergd drops any more. Note that, in this shape optimization, the mesh topology is not adjusted. Both ï¬attening and folding operations only add deformations on the model. Therefore, only vertices of a mesh are moved during the iterations of the shape optimization. The ï¬nal positions of vertices are what we are interested in this design stage. 3.1 Elastic Flattening Flattening a surface M into a 2D pattern is in fact introducing a deformation from 3D to 2D by eliminating one dimension. The ï¬attening process simulates an elastic deformation with the isometric energy minimized. Directly formulating the optimization by Eiso will make the problem highly non-linear, and results in a very slow convergence. To overcome this difï¬culty, a weak form Ergd will be used instead. The 2D shape D can be obtained by moving the mesh points of M and determining the values of the 2D positions {pi } as argmin Ergd .
{pi }ââ2

Fig. 4. Algorithm overview. The details of ï¬attening and folding simulation are presented in Sections 3.1 and 3.2 respectively. Our hybrid cutting insertion algorithm will be introduced in Section 4.

cut insertion cannot be avoided, we attempt to add cuts asshort-as-possible. In other words, both the geometry and the topology of the input mesh M will be optimized. The overview of our algorithm is illustrated in Fig.4. Our algorithm has two nested loops of iterations. Inner Loop: The inner loop takes care of the shape optimization to improve the ï¬attenablity of a given shape by iteratively applying ï¬attening/folding deformations. The positions of vertices in 3D and 2D meshes are optimized together to minimize both the approximation error Eapx and the isometric error Eiso (by Ergd ). Outer Loop: When Eapx obtained after running the inner loop of the shape optimization is too high, cuts are iteratively added in the outer loop. In each step of iteration, a cut is applied carefully in order to prevent selfintersections in 2D pattern. Operations are developed to generate as-short-as-possible cuts to preserve the quality of the fabricated surface. After applying cuts in the outer loop, the inner loop of shape optimization is run again to further improve the shape approximation. Working together, the computation taken by these two levels of iterations converges rather quickly. The framework proposed in this paper provides a useful tool for designers when using the 4D-printing technique to fabricate self-folding structures.

(5)

There are two sets of unknowns in this optimization â the set of planar positions {pi } and the set of rotation matrices on faces {Rk }. They are correlated to each other. To decouple this, we linearize the numerical computation in two orthogonal directions by using the local/global strategy. Speciï¬cally, when the initial positions in 2D are known, we can treat {pi } as known and compute {Rk } by SVD applied on Ë Tk = Pk Pâ1 . As SVD is taken locally on each face, the comk putation can be completed very efï¬ciently. For the ï¬rst iteration, the initial values of {pi } are determined by the least square conformal map [30]. In the later iterations, planar positions determined in the previous step are used to calculate {Rk }. After obtaining the rotation matrices, new values of Ë {pi } are computed in the global sense. As Tk = Pk Pâ1 is in k a linear form of the planar positions, Eqn.(5) can be rewritten into a least-square system argmin
x={pi ââ2 }

Ax â b 2,

3 Shape Optimization Our idea in optimizing a non-ï¬attenable 3D shape M is to iteratively get 2D patterns that are nearly isometric to

where A is a sparse matrix derived from {Tk }, and b is a vector containing entries from {Rk }. These two steps are then iterated until converged, and the result is a 2D pattern D ï¬attened from the input 3D shape M. However, if the 3D shape itself is not ï¬attenable, Ergd can hardly be minimized into zero. In such cases, we simulate

this matches well with the physical phenomena happened in nature. In summary, our shape optimization framework can effectively compute a pair of 2D/3D shapes for approximating an input 3D shape. In next section, topological operations will be added to further improve the design optimization on self-folding structures.

Fig. 5. Shape optimization: (Left) A highly non-ï¬attenable surface â half sphere â is input to our system. (Middle) The 2D pattern computed by our system. (Right) The simulated 3D shape folded up from the 2D pattern.

the folding process on D to get a folded shape M â² that is assimilar-as possible to M. 3.2 Folding Simulation In this simulation, a 2D pattern D is folded to approximate the given 3D shape M. As only bending along the edges are allowed, the isometric energy Eiso is demanded to be zero during the process of folding. The deformation can be simulated by moving the vertices of D to get the 3D positions vi which is driven by minimizing the shape approximation error, that is argmin Eapx
{vi ââ3 }

4 Cut Insertion The framework of shape optimization presented in Section 3 can reduce the isometric error in ï¬nding a ï¬attenable shape that is a good approximation of a non-ï¬attenable shape. However, if the shape is highly non-ï¬attenable (e.g., the face models as shown in Fig.1), the part fabricated from the computed 2D pattern will have large approximation error. Consequently, cuts must be added to reduce the surface stretch during ï¬attening. Accordingly, a better 2D pattern can be obtained that may result in a better 3D folding result. When inserting a cut, the following two requirements need to be fulï¬lled: 1. The cuts will not lead to self-intersections (locally) in the 2D pattern; 2. The total length of the inserted cuts needs to be minimized. For requirement 1, it will be too difï¬cult to foresee any global self-intersections that maybe introduced before the cut is really applied. Therefore, in determining cut insertions, it should at least guarantee no local self-intersection, and we leave the checking of the global self-intersection after inserting the cut. We are motivated by Deï¬nition 3 and Remark 3 to add cuts through those vertices with the sum of surface angle, Î¸(Â· Â· Â· ), that are far different from 2Ï. Speciï¬cally, there are two kinds of non-ï¬attenable vertices: one is with Î¸(v p ) < 2Ï (called elliptic vertex), another one has Î¸(v p ) > 2Ï (called hyperbolic vertex), which are illustrated in Fig.6. For a nonï¬attenable vertex with Î¸(v p ) < 2Ï, when unfolding its adjacent faces into 2D, the incident angles are forced to become larger (stretched). In contrast, for the surface with Î¸(v p ) > 2Ï, the incident angles are enforced to be smaller under ï¬attening (compressed). These two different nonï¬attenable local surfaces actually encounter two different types of potential energy, which should be released in different ways. Therefore, we introduce the interior cut and the boundary cut to deal with these two different situations. A boundary cut is a cut linking a non-ï¬attenable vertex and its nearest boundary vertex on the input surface. An interior cut is a cut only added at two neighboring edges of a nonï¬attenable vertex, which introduces a new interior hole on the input surface. Both operators changes the topology of an input surface. i) For an elliptic vertex, the results of applying different types of cuts are given as follows. Interior cut: As the incident angles are under stretched, if an interior cut is made, while the angles are restoring

s.t., Eiso = 0.

(6)

Again, to improve the convergence of computation, the weak form of isometric metric â the rigidity energy Ergd is used to replace Eiso . After using the Lagrange multiplier, the nonconstrained optimization is taken as argmin Eapx + Î»Ergd
{vi ââ3 }

(7)

to compute the folded shape of D. The penalty coefï¬cient Î» controls the inï¬uence of the rigidity during the deformation. If Î» is too small, it becomes an elastic deformation that is not what we want. However, if an extremely large coefï¬cient Î» is chosen, Eapx will be ignored and it is hard to fold D. Therefore, a reasonable large value should be chosen. In our simulation, the penalty coefï¬cient Î» = 10.0 is employed. It is easy to ï¬nd that the formula in Eqn.(7) is in the quadratic form and results in a fast convergence. To demonstrate the functionality of our system, we apply the ï¬attening/folding simulation to a highly non-ï¬attenable surface â hemisphere (refer to Fig.5 for an illustration). Although it is impossible to ï¬nd a 2D pattern without stretch, our approach can ï¬nd a perfect circular disk that is the best approximation for the unfolded 2D pattern. Also, the shape warped back from the planar disk shows a good approximation of the hemisphere. The major defect comes from the unwanted wrinkles appeared on the folding result; however,

Fig. 6.

Different cuts are to be added at vertices with different local

shapes. (Top row) For an elliptic vertex, adding an interior cut will lead to self-intersection. Therefore, boundary cuts are usually added to resolve the non-ï¬attenable problem. (Bottom row) The situation is reversed for a hyperbolic vertex. Boundary cuts lead to self-intersection while inserting an interior cut can resolve the problem.

balanced if the newly created two groups have similar areas. Less stretch will be transferred to other vertices around v p when an interior cut is added in this way. The algorithm for inserting an interior cut is presented as follows. Assume there are n incident edges {e1 , . . . , en } around v p , we need to ï¬nd a pair of edges, (ei , e j ), that are the best candidates to fulï¬ll the above criteria. As n is small, a simple brute-force search can be applied. First, edges with any endpoint on the boundary are eliminated from the list of incident edges as they violate the ï¬rst criterion. After this step, if there are only one edge left in the candidate list, the interior cut on v p is skipped. Secondly, we loop through all the incident edges in this list to construct pairs of edges. A pair of edges (ei , e j ) is considered as a candidate pair if the angle between ei and e j is greater than Ï at v p . Lastly, among 2 all these pair of edges, the pair with the smallest total edge length is selected as an interior cut to be inserted. 4.2 Boundary Cut For an elliptic surface M (i.e., Î¸(v p ) < 2Ï), boundary cuts are applied. Starting from the point v p , the cut is continuously extended until it reaches Mâs boundary. The shortest path from v p to the boundary of M is desired. Hence, we ï¬rst build an undirected graph G based on the connectivity of M, where vertices of M become vertices on G and edges on G are converted from Mâs edges with their edge lengths as their weights. Using v p as the target and all boundary vertices on M as sources, the multi-source Dijkstraâs algorithm [31] is employed to compute the one-to-many shortest path. Then, all edges on the shortest path are opened up to construct a boundary cut. 4.3 Algorithm with Hybrid Cutting As shown in the algorithm overview (see Fig.4), cuts are added only when the shape approximation error is higher than a threshold. The approximation error is produced when a 2D pattern cannot be folded into the given 3D shape â i.e., the approximation error is directly related to the ï¬attenability of a given surface. To efï¬ciently reduce the approximation error, we identify the most non-ï¬attenable points and insert an appropriate cut to make it ï¬attenable. In addition, we know that a boundary cut is usually much longer than an interior cut. Therefore, we try to minimize the approximation error by using interior cuts ï¬rst, and boundary cuts are only applied when it is necessary. Given a threshold of the allowed approximation error (Îµ), the algorithm with the developed hybrid cutting strategy is given as follows: 1 Run the shape optimization and get a pair of optimized 2D/3D models M (m) and D(m) , and compute the approximation error Îµ(vi ) at each vertex vi â M (m) as the distance between vi and its corresponding point in the input model M. 2 If maxiâV {Îµ(vi )} â¤ Îµ (the given tolerance), the model M (m) is good enough and the algorithm stops. Otherwise, cuts will be computed.

to its original size, the edges will be pushed out and the adjacent faces will intersect with each other (see Fig.6a). Boundary cut: A boundary cut can separate and extend the boundary of the input surface. Self-intersection is prevented (see Fig.6b). ii) For a hyperbolic vertex, an inverse conclusion can be made as follows. Interior cut: Adding an interior cut at the vertex will introduce two boundary vertices with obtuse surface angles. Therefore, the condition with Î¸(v p ) > 2Ï on 3D can be satisï¬ed (see Fig.6c). Boundary cut: A boundary cut is not suitable for the hyperbolic surface. As the local area of the vertex is larger than what can be given by a planar shape, selfintersection cannot be avoided at this vertex vp with Î¸(v p ) > 2Ï (see Fig.6d).

4.1 Interior Cut The interior cut is only applied to a hyperbolic vertex v p (i.e., Î¸(v p ) > 2Ï). When adding an interior cut, the following criteria are demanded. 1. The cut does not reach any existing boundaries. 2. The cut is as-short-as-possible. 3. The cut is as-straight-as-possible. The ï¬rst criterion is obvious; if it is not satisï¬ed, the cut becomes a boundary cut. The second criterion comes from the observation that adding a long cut can easily lead to signiï¬cant visual artifact on the part that is fabricated by selffolding structures. The last criterion relates to the effectiveness on releasing potential energy by adding a local interior cut. An interior cut actually separates the faces adjacent to v p into two groups, and the potential energy is adsorbed by each of the groups. A heuristic, which has also been veriï¬ed by our experiments, is that the energy distribution is well

A1 Routine of interior cuts only: For all hyperbolic vertices, locate the one with maximal surface angle (i.e., v p = argmaxvi (Î¸(vi ))). A2 If Î¸(v p ) > 2Ï + Î¾ is found, apply an interior cut to it and go back to Step 1. Otherwise, output the computed results. B1 Routine of boundary/interior cuts: Locate the vertex with the largest derivation from ï¬attenable (i.e., v p = argmaxvi (Î¸(vi ) â 2Ï)2). B2 If Î¸(v p ) < 2Ï â Î¾, a boundary cut is applied; otherwise, an interior cut is applied if Î¸(v p ) > 2Ï + Î¾. B3 If a cut is made, go back to Step 1; otherwise, output the computed results. A fuzzy condition with a threshold Î¾ has been added when detecting non-ï¬attenable vertices to avoid over-cutting the nearly ï¬attenable regions. We take Î¾ = Ï/16 in all our tests. In the algorithm, two routines are used to provide a better control on the balance between the approximation error and the length of cuts (i.e., the surface quality of the ï¬nal folded parts). Also, interior cuts have a higher priority than boundary cuts. For example, in the face model as shown in Fig.7a, the features of nose and mouth disappear in the shape optimization result without introducing any cuts. After applying the routine of interior cuts, we have already been able to see the proï¬le of the nose and mouth (refer to Fig.7b). When sharper proï¬les are demanded on these features, the routine of boundary/interior cuts are activated to further insert boundary/interior cuts (a result can be seen in Fig.7c).
Fig. 8. The mask images generated for fabricating the face model

with only interior cut shown in Fig.7. There are in total ï¬ve layers, including two body layers, two constraining layers, and one layer of Shrinky-Dinks ï¬lm in the center.

deï¬ections of a wide beam, i.e., 1 âEd = MÎ±, 2 E â¤I , R(1 â v2)

M=

(8)

4.4 Interactive Tools In the design process, different applications may have different requirements on the inserted cuts. Therefore, our design platform also provides interactive tools for users to specify the regions in which cuts are preferred (or prohibited). This intension from designers can be easily incorporated into the above algorithm by: 1. Removing all the vertices of the prohibited regions from the cut insertion algorithm; 2. Giving a preference weight on the vertices that are in the preferred regions; 3. Modifying the weights of edges in the preferred/prohibited regions when using Dijkstraâs algorithm to compute the path of a boundary cut. Users can also directly pick edges to insert cuts. In addition, our system provides a function to report and visualize the self-intersections on the ï¬attened 2D patterns.

where âEd is the energy used in generating the deformation, M is the required moment for bending, E â¤ , v are the Flexural Modulus and the Poisson ratio of the resin material, and I = bd 3 12 . In summary, as the thickness of the active layer h and the passive layer d are ï¬xed, all variables in the formulation are constants, except the bending angle Î± at a hinge and its width L. Therefore, we can perform a set of experiments with different L values to calibrate its relationship with Î±. For more details of the formulation and experiments, please refer to [4]. Based on the experimental calibrations, we can compute L by a given Î± (in radian) using h ). d3

L = (Î± â 0.46)/(0.1

5 Implementation Details for Fabrication After the given 3D shape is optimized and the corresponding 2D pattern has been found, it is ready to generate information for fabrication. In our previous work [4], we have modeled the elastic deformation on the hinge as large

To fabricate self-folding structures using the MIP-SL process, we need to generate mask images with grayscale values at pixels from the 2D patterns [32]. The mask image for the body layers can be generated by shrinking half distance of LW that is computed above on each edge. Since our self-folding structure is a sandwiched design, we have to print on both front and back sides of the shrinking ï¬lm. The same mask images are used for the body layers at both sides. See Figs.2 and 8 for illustrations. Note that, hinges with nearly zero bending angles are considered as rigid body when generating the mask images. Another mask image to be generated is the constraining layer. When a constraint is added on one side of a hinge, the structure will be bent to the other side (refer to Fig.2 for the principle). As a result, two different mask images have to be produced at opposite sides of the ï¬lm (see the right column in Fig.8).

Fig. 7.

For a highly non-ï¬attenable input â the face model, only applying the shape optimization (without cuts) results in a shape with large

shape approximation error â the nose and the mouth disappear. The overlaid red lines are the contour of the input shape. The result can be improved by adding an interior cut. A ï¬nal result with high similarity as input can be obtained by our hybrid cut insertion algorithm, in which both the interior and boundary cuts are added.

6 Experimental Results We have implemented the presented optimization approach as a prototype software system using C++. TAUCS library [33] is employed as the numerical solver of linear equations. Different examples have been tested in our framework, and both numerical and physical tests have been performed to verify the optimization results. Running on a standard PC with Intel(R) Core(TM) i7-4790 CPU @ 3.60GHz, the statistical data on computational time is shown in Table 1. It can be found that the computation complexity is mainly based on the number of triangles of the input model. In general, the algorithm is converged within seconds. Table 1 also shows the necessary number of iterations required for a converged computation in all the examples. It can be seen from the data that as the face model is highly non-ï¬attenable, it takes more steps to converge (i.e., 26 steps in total). In contrast, even the car model has many triangles, as it is modeled for the sheet metal fabrication, if has a better ï¬attenability and takes only 6 steps to converge. To compare the folded shapes with/without the presented optimization step, we measure the Hausdorff distance between the result and the given 3D shape by the publicly available software, Metro [34]. The statistics are shown in Table 2. Here, the shape approximation errors in terms of the Hausdorff distances are measured in the four different stages throughout the optimization process: (1) before optimization, (2) after ï¬attenability-based shape optimization, (3) with only interior cuts inserted, and (4) with both interior and boundary cuts inserted. As 2D patterns are not available as the input, we take the resultant 3D shape after running the shape optimization for one step (i.e., M (1) ) as the
Table 1. Statistics on Convergence and Computational Time

Table 2.

Statistics on Shape Approx. Errorsâ  in Different Stages

Input Model Face Flower Car
â  Hausdorff

Shape Optimization Before 2.02 / 8.42 0.71 / 1.86 1.09 / 4.33 After 1.57 / 9.98 0.54 / 1.82 0.25 / 2.13

Cut Insertion Interior 1.08 / 6.04 â 0.18 / 1.26 Both 0.94 / 5.80 0.11 / 0.67 0.13 / 1.25

distances are measured for indicating shape approx. errors in different stages, and they are reported in the format of [average / maximum].

shape before optimization. Three examples are shown in the table: a ï¬ower blade model (Fig.9), a face model (Fig.7), and a car-body model (Fig.11). In all of these examples, the shape approximation errors decrease during all the optimization steps. There is only one exception â the ï¬ower blade model, which does not have any hyperbolic vertex. Thus, no data is reported for the stage of inserting interior cuts. In addition to numerical computation, physical tests have been performed to verify the effectiveness of our approach. The tests are taken on the face model (see Fig.1), the ï¬ower blade model (see Fig.9), and a wave shape model (see Fig.10). For the blade model, we pick the 2D pattern generated by the shape optimization in the fabrication, which can be folded without any cuts. However, for the face model, the fabricated result is far away from the given shape when no cut is inserted (refer to Fig.1). Therefore, a better result can be obtained when fabricating the model from the 2D pattern by adding interior-only cuts. In Fig.1, we also show the fabricated part with artifacts that are caused by inserted cuts with long edge length. In the wave shape model, the originally designed ï¬llets make it non-ï¬attenable. For such an input shape, the edges become sharpened in the optimized shape, i.e., the ï¬llets are removed with the main edges remained. The fabricated part is also shown in Fig.10. The effectiveness of our approach has been successfully demonstrated by the examples.

Model Face Flower Wave Car

Size (#tri) 41 22 884 758

#iter 26 5 14 6

Time (s) 0.86 0.13 7.06 2.71

The size of model is reported as the number of triangles (#tri), and #iter is the number of iteration steps until converged.

Fig. 10.

An example of wave shape. (a) The ï¬llets in the input model make the model non-ï¬attenable. (b) The edges in the optimized shape

are sharpened to improve its ï¬attenability, and (c) the mask image that only includes the sharp edges. (d) The fabricated result.

Fig. 11. An example of car-body. Given the input model (top-left) that is not ï¬attenable, the iterations of ï¬attenability-based shape optimization can signiï¬cantly improve the 3D shape folded from 2D patterns (see the ï¬rst row, from M (1) to M (n) ). The shape approximation error can be further improved by ï¬rst inserting interior-only cuts and then adding both boundary and interior cuts (see the second row and the zoom windows). The corresponding 2D patterns are also shown at the bottom row.

7 Conclusion and Discussion In this paper, we present a design optimization framework for using additive manufacturing to fabricate 2D Origami or Kirigami structures that can be self-folded into a target 3D shape. The challenge of designing such a selffolding structure is that only ï¬attenable surfaces can be selffolded from a planar Origami or Kirigami structure. However, designers wish to have the ï¬exibility of designing 3D freeform surface according to their needs. A generally designed 3D freeform surface is rarely ï¬attenable. As a result, we propose a shape optimization framework to deform a pair of 3D/2D patches to 1) retain the ï¬attenability and 2) minimize the shape approximation error to the given model. Not only geometric shape but also topology of an input surface are optimized in our approach to meet the design demands. An insight presented in this work is that inserting interior cuts at the local hyperbolic regions will gain more beneï¬ts. Together with boundary cuts, a hybrid algorithm has been developed to handle the cut insertion for topological optimization. Experimental results have veriï¬ed the effectiveness of our framework in designing self-folding structures

for 3D freeform surfaces. Our method still has a few limitations. First, we have optimized the ï¬attenability of a given shape by enforcing the rigidity of folding between a pair of 3D/2D mesh models. However, self-collision may occur during the self-folding process. In our future work, a collision-aware simulation for ï¬attening and folding will be investigated by introducing the variable of time to prevent collision during the dynamic process of deformations. Second, we have simpliï¬ed the input mesh before applying it to our framework to reduce the degrees of freedom for optimization. This pre-simpliï¬cation strategy may introduce topological obstacle into the procedure of optimization. We plan to develop a dynamic procedure to adaptively simplify the input mesh according to the behavior during the ï¬attening/folding simulation. Third, our cutting strategies presented in this paper try to reduce the shape approximation error without considering the structure stiffness. The FEM results will be incorporated to develop new cutting strategies in our future work. Finally, we assume there is no fabrication error in this paper, because the main focus of the paper is the design optimization for fabri-

Fig. 9.

An example of ï¬ower blades. (Top row) The input digital

model shown in front and side view, and our framework can optimize it into a ï¬attenable shape. (Middle row) The mask images for body and constraining layers generated by our system. (Bottom row) The 2D pattern is fabricated according to the mask images and then selffolded into the desired 3D shape after heating. Multiple ï¬ower blades are put together to get the ï¬nal product â a lamp.

cation instead of the fabrication itself. To address the fabrication errors and related effects, we plan to investigate some inspection-based research by employing 3D scanners to analyze the fabrication error and to further verify the outcome of our design optimization platform in the future.

Acknowledgements The research work reported in this paper was partially supported by NSF CMMI 1151191, and the HKSAR Research Grants Council (RGC) General Research Fund (GRF), CUHK/14207414.

References [1] Lang, R. J., 2011. Origami Design Secrets: Mathematical Methods for an Ancient Art. CRC Press, Boca Raton, FL. [2] Zhang, K., Qiu, C., and Dai, J. S., 2015. âHelical kirigami-enabled centimeter-scale worm robot with shape-memory-alloy linear actuatorsâ. Journal of Mechanisms and Robotics, 7(2), p. 021014.

[3] An, B., Miyashita, S., Tolley, M. T., Aukes, D. M., Meeker, L., Demaine, E. D., Demaine, M. L., Wood, R. J., and Rus, D., 2014. âAn end-to-end approach to making self-folded 3D surface shapes by uniform heatingâ. In IEEE International Conference on Robotics and Automation (ICRA), pp. 1466â1473. [4] Deng, D., and Chen, Y., 2015. âOrigami-based selffolding structure design and fabrication using projection based stereolithographyâ. J. Mech. Des., 137(2). [5] Park, J.-R., Slanac, D. A., Leong, T. G., Ye, H., Nelson, D. B., and Gracias, D. H., 2008. âReconï¬gurable microï¬uidics with metallic containersâ. Journal of Microelectromechanical Systems, 17(2), April, pp. 265â271. [6] Azam, A., Laï¬in, K. E., Jamal, M., Fernandes, R., and Gracias, D. H., 2011. âSelf-folding micropatterned polymeric containersâ. Biomedical Microdevices, 13(1), pp. 51â58. [7] Peraza-Hernandez, E., Hartl, D., Galvan, E., and Malak, R., 2013. âDesign and optimization of a shape memory alloy-based self-folding sheetâ. Journal of Mechanical Design, 135, p. 111007. [8] Ionov, L., 2011. âSoft microorigami: self-folding polymer ï¬lmsâ. Soft Matter, 7, pp. 6786â6791. [9] Shim, T. S., Kim, S.-H., Heo, C.-J., Jeon, H. C., and Yang, S.-M., 2012. âControlled origami folding of hydrogel bilayers with sustained reversibility for robust microcarriersâ. Angewandte Chemie International Edition, 51(6), pp. 1420â1423. [10] Stoychev, G., Turcaud, S., Dunlop, J. W. C., and Ionov, L., 2013. âHierarchical multi-step folding of polymer bilayersâ. Advanced Functional Materials, 23(18), pp. 2295â2300. [11] Ahmed, S., Lauff, C., Crivaro, A., McGough, K., Sheridan, R., Frecker, M., von Lockette, P., Ounaies, Z., Simpson, T., Lien, J.-M., and Strzelec, R., 2013. âMulti-ï¬eld responsive origami structures: Preliminary modeling and experimentsâ. In Proceedings of the ASME IDETC/CIECIE, August 4-7, Portland, Oregon, USA, p. V06BT07A028. [12] Liu, Y., Boyles, J. K., Genzer, J., and Dickey, M. D., 2012. âSelf-folding of polymer sheets using local light absorptionâ. Soft Matter, 8, pp. 1764â1769. [13] Wang, M.-F., Maleki, T., and Ziaie, B., 2008. âEnhanced 3-D folding of silicon microstructures via thermal shrinkage of a composite organic/inorganic bilayerâ. Microelectromechanical Systems, Journal of, 17(4), Aug, pp. 882â889. [14] Ge, Q., Qi, H. J., and Dunn, M. L., 2013. âActive materials by four-dimension printingâ. Applied Physics Letters, 103(13). [15] Yasu, K., and Inami, M., 2012. âPopapy: Instant paper craft made up in a microwave ovenâ. In Advances in Computer Entertainment, A. Nijholt, T. Romo, and D. Reidsma, eds., Vol. 7624 of Lecture Notes in Computer Science. Springer Berlin Heidelberg, pp. 406â 420. [16] Smela, E., 2003. âConjugated polymer actuators for biomedical applicationsâ. Advanced Materials, 15(6),

pp. 481â494. [17] Ionov, L., 2012. âBiomimetic 3d self-assembling biomicroconstructs by spontaneous deformation of thin polymer ï¬lmsâ. J. Mater. Chem., 22, pp. 19366â19375. [18] Tibbits, S., 2014. â4D printing: Multi-material shape changeâ. Architectural Design, 84(1), pp. 116â121. [19] Raviv, D., Zhao, W., McKnelly, C., Papadopoulou, A., Kadambi, A., Shi, B., Hirsch, S., Dikovsky, D., Zyracki, M., Olguin, C., Raskar, R., and Tibbits, S., 14. âActive printed materials for complex self-evolving deformationsâ. Sci. Rep., 4. [20] Wang, C. C. L., Smith, S., and Yuen, M. M. F., 2002. âSurface ï¬attening based on energy modelâ. ComputerAided Design, 34(11), pp. 823â833. [21] Sander, P. V., Snyder, J., Gortler, S. J., and Hoppe, H., 2001. âTexture mapping progressive meshesâ. In SIGGRAPH: Proceedings of the 28th annual conference on Computer graphics and interactive techniques, ACM, pp. 409â416. [22] Kilian, M., FlÂ¨ ry, S., Chen, Z., Mitra, N. J., Sheffer, o A., and Pottmann, H., 2008. âCurved foldingâ. ACM Transactions on Graphics, 27(3), pp. #75, 1â9. [23] Sheffer, A., 2002. âSpanning tree seams for reducing parameterization distortion of triangulated surfacesâ. In Proceedings of Shape Modeling International, pp. 61â 68. [24] Wang, C. C. L., Wang, Y., Tang, K., and Yuen, M. M. F., 2004. âReduce the stretch in surface ï¬attening by ï¬nding cutting paths to the surface boundaryâ. ComputerAided Design, 36(8), pp. 665â677. [25] Wang, C. C. L., 2008. âTowards ï¬attenable mesh surfacesâ. Computer-Aided Design, 40(1), pp. 109â122. [26] Decaudin, P., Julius, D., Wither, J., Boissieux, L., Sheffer, A., and Cani, M.-P., 2006. âVirtual garments: A fully geometric approach for clothing designâ. Computer Graphics Forum (Eurographicsâ06 proc.), 25(3), sep. [27] Liu, Y., Pottmann, H., Wallner, J., Yang, Y.-L., and Wang, W., 2006. âGeometric modeling with conical meshes and developable surfacesâ. ACM Trans. Graph., 25(3), July, pp. 681â689. [28] Zhou, C., Chen, Y., Yang, Z., and Khoshnevis, B., 2013. âDigital material fabrication using mask-imageprojection-based stereolithographyâ. Rapid Prototyping Journal, 19(3), pp. 153â165. [29] do Carmo, M. P., 1976. Differential Geometry of Curves and Surfaces. Prentice-Hall. [30] LÂ´ vy, B., Petitjean, S., Ray, N., and Maillot, J., 2002. e âLeast squares conformal maps for automatic texture atlas generationâ. ACM Trans. Graph., 21(3), July, pp. 362â371. [31] Dijkstra, E., 1959. âA note on two problems in connexion with graphsâ. Numerische Mathematik, 1(1), pp. 269â271. [32] Zhou, C., Chen, Y., and Waltz, R. A., 2009. âOptimized mask image projection for solid freeform fabricationâ. Journal of Manufacturing Science and Engineering, 131(6), p. 061004.

[33] TAUCS: A library of sparse linear solver. http://www.tau.ac.il/ stoledo/taucs/. [34] Cignoni, P., Rocchini, C., and Scopigno, R., 1998. âMetro: Measuring error on simpliï¬ed surfacesâ. Computer Graphics Forum, 17(2), pp. 167â174.

