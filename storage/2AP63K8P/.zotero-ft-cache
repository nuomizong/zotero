EUROGRAPHICS 2005

STAR â State of The Art Report

Physically Based Deformable Models in Computer Graphics
Andrew Nealen1 , Matthias MÃ¼ller2,3 , Richard Keiser3 , Eddy Boxerman4 and Mark Carlson5
Discrete Geometric Modeling Group, TU Darmstadt 2 NovodeX / AGEIA 3 Computer Graphics Lab, ETH ZÃ¼rich Department of Computer Science, University of British Columbia 5 DNA Productions, Inc.
1

4

Abstract Physically based deformable models have been widely embraced by the Computer Graphics community. Many problems outlined in a previous survey by Gibson and Mirtich [GM97] have been addressed, thereby making these models interesting and useful for both ofï¬ine and real-time applications, such as motion pictures and video games. In this paper, we present the most signiï¬cant contributions of the past decade, which produce such impressive and perceivably realistic animations and simulations: ï¬nite element/difference/volume methods, mass-spring systems, meshfree methods, coupled particle systems and reduced deformable models based on modal analysis. For completeness, we also make a connection to the simulation of other continua, such as ï¬uids, gases and melting objects. Since time integration is inherent to all simulated phenomena, the general notion of time discretization is treated separately, while speciï¬cs are left to the respective models. Finally, we discuss areas of application, such as elastoplastic deformation and fracture, cloth and hair animation, virtual surgery simulation, interactive entertainment and ï¬uid/smoke animation, and also suggest areas for future research. Categories and Subject Descriptors (according to ACM CCS): I.3.5 [Computer Graphics]: Physically Based Modeling I.3.7 [Computer Graphics]: Animation and Virtual Reality

1. Introduction Physically based deformable models have two decades of history in Computer Graphics: since Lasseterâs discussion of squash and stretch [Las87] and, concurrently, Terzopoulos et. alâs seminal paper on elastically deformable models [TPBF87], numerous researchers have partaken in the quest for the visually and physically plausible animation of deformable objects and ï¬uids. This inherently interdisciplinary ï¬eld elegantly combines newtonian dynamics, continuum mechanics, numerical computation, differential geometry, vector calculus, approximation theory and Computer Graphics (to name a few) into a vast and powerful toolkit, which is being further explored and extended. The ï¬eld is in constant ï¬ux and, thus, active and fruitful, with many visually stunning achievements to account for. Since Gibson and Mirtichâs survey paper [GM97], the ï¬eld of physically based deformable models in Computer Graphics has expanded tremendously. Signiï¬cant contributions were made in many key areas, e.g. object modelc The Eurographics Association 2005.

Figure 1: Hookeâs Law, from De Potentia Restitutiva [1678]. ing, fracture, plasticity, cloth animation, stable ï¬uid simulation, time integration strategies, discretization and numer-

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

ical solution of PDEs, modal analysis, space-time adaptivity, multiresolution modeling and real-time simulation. Nonphysical models, such as parametric curves and surfaces and free-form deformations, are not discussed in this report. The inclined reader is therefore encouraged to browse more recent literature on t-splines [SZBN03] [SCFâ 04], spacewarping [MJBF02] [LKGâ 03] [BK05] and methods based on differential surface properties [SLCOâ 04] [YZXâ 04] [BK04] [LSLCO05] [NSACO05] [IMH05]. For advances in character skinning see e.g. [WP02] [KJP02] [JT05]. Since we are not able to cover basic elasticity theory and continuum mechanics in this report, we would like to point out that a nice review of the history of elasticity theory, starting with the discovery of Hookeâs Law in 1660 (Fig. 1) and leading up to the general equations of Navier in 1821, is given in [Lov27]. Furthermore, great introductions to continuum mechanics and dynamics can be found in [WB97] and in general textbooks, such as [Chu96] [Coo95] [BW97] [Gdo93] [BLM00]. For application speciï¬c presentations, we refer the reader to a number of recent works. For cloth simulation, there is the text by House and Breen [HB00], as well as the recent, extensive tutorial by Thalmann et al. [MTCKâ 04]. For hair simulation, there is the (already slightly dated) overview by Thalmann et al. [MTHK00]; the paper by Volino and Thalmann [VMT04] gives a good, more recent overview. Collision detection and haptic forcefeedback rendering for deformable objects are other challenging and active areas of research. For a summary of recent work in these ï¬elds, we refer the reader to the report by Teschner et al. [TKHâ 05] and the course notes of Lin and Otaduy [LO05]. In this report we take a model based point of view, motivated by the fact that there are many readily available physical models for very similar applications, i.e. we can animate an elastically or plastically deforming solid with many different underlying models, such as mass-spring systems, ï¬nite elements or meshfree methods. We furthermore make a distinction between Lagrangian methods, where the model consists of a set of points with varying locations and properties, and Eulerian methods, where model properties are computed for a set of stationary points. To give a coarse overview, we describe recent developments for â¢ Lagrangian Mesh Based Methods â Continuum Mechanics Based Methods â Mass-Spring Systems â¢ Lagrangian Mesh Free Methods â Loosely Coupled Particle Systems â Smoothed Particle Hydrodynamics (SPH) â Mesh Free Methods for the solution of PDEs â¢ Reduced Deformation Models and Modal Analysis â¢ Eulerian and Semi-Lagrangian Methods â Fluids and Gases â Melting Objects

In each section we present the basic model formulation, recent contributions, beneï¬ts and drawbacks, and various areas of application. The section on ï¬uids, gases and melting objects contains an overview of recent work and establishes the connection to the ï¬eld of physically based deformable models. A complete survey on the animation of ï¬uids and gases would easily ï¬ll its own report and is therefore beyond our scope. Our goal is to provide an up-to-date report to the Computer Graphics community, as an entry point for researchers and developers who are new to the ï¬eld, thereby complementing the existing survey paper [GM97]. 2. Background 2.1. Continuum Elasticity A deformable object is typically deï¬ned by its undeformed shape (also called equilibrium conï¬guration, rest or initial shape) and by a set of material parameters that deï¬ne how it deforms under applied forces. If we think of the rest shape as a continuous connected subset M of R3 , then the coordinates m â M of a point in the object are called material coordinates of that point. In the discrete case M is a discrete set of points that sample the rest shape of the object. When forces are applied, the object deforms and a point originally at location m (i.e. with material coordinates m) moves to a new location x(m), the spatial or world coordinates of that point. Since new locations are deï¬ned for all material coordinates m, x is a vector ï¬eld deï¬ned on M. Alternatively, the deformation can also be speciï¬ed by the displacement vector ï¬eld u(m) = x(m) â m deï¬ned on M (see Fig. 2). From u(m) the elastic strain Îµ is computed (Îµ is a dimensionless quantity which, in the (linear) 1D case, is simply âl/l). A spatially constant displacement ï¬eld represents a translation of the object with no strain. Therefore, it becomes clear that strain must be measured in terms of spatial variations of the displacement ï¬eld u = u(m) = (u, v, w)T . Popular choices in Computer Graphics are 1 ÎµG = (âu + [âu]T + [âu]T âu) 2 1 ÎµC = (âu + [âu]T ), 2 (1) (2)

where the symmetric tensor ÎµG â R3x3 is Greenâs nonlinear strain tensor and ÎµC â R3x3 its linearization, Cauchyâs linear strain tensor. The gradient of the displacement ï¬eld is a 3 by 3 matrix ï£¹ ï£® u,x u,y u,z (3) âu = ï£° v,x v,y v,z ï£» , w,x w,y w,z where the index after the comma represents a spatial derivative. The material law (or constitutive law) is used for the computation of the symmetric internal stress tensor Ï â R3x3 for
c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

each material point m based on the strain Îµ at that point (Ï is measured as force per unit area, where 1Pascal = 1Pa = 1N/m2 ). Most Computer Graphics papers use Hookeâs linear material law Ï = E Â· Îµ, (4)

ï¬rst order O(ât), second order O(ât 2 ), etc. In the ï¬eld of physically based animation in Computer Graphics, stability is often much more important than accuracy. The integration scheme presented above is called explicit because it provides explicit formulas for the quantities at the next time step. Explicit methods are easy to implement but they are only conditionally stable, i.e. stable only if ât is smaller than a stability threshold (see [MHTG05] for a formalization). For stiff objects this threshold can be very small. The instability is due to the fact that explicit methods extrapolate a constant right hand side blindly into the future as the above equations show. For a simple spring and a large ât, the scheme can overshoot the equilibrium position arbitrarily. At the next time step the restoring forces get even larger resulting in an exponential gain of energy and ï¬nally an explosion. This problem can be solved by using an implicit scheme that uses quantities at the next time step t + ât on both sides of the equation x(t + ât) = x(t) + âtv(t + ât) (10) v(t + ât) = v(t) + âtF(v(t + ât), x(t + ât),t). (11) The scheme is now called implicit because the unknown quantities are implicitly given as the solution of a system of equations. Now, instead of extrapolating a constant right hand side blindly into the future, the right hand side is part of the solution process. Remarkably, the implicit (or backward) Euler scheme is stable for arbitrarily large time steps ât (There is, however, a lower time step limit which, for practical purposes, poses no problem). This gain comes with the price of having to solve an algebraic system of equations at each time step (linear if F() is linear, non-linear otherwise). A simple improvement to the forward Euler scheme is to swap the order of the equations and use a forward-backward scheme v(t + ât) = v(t) + âtF(v(t), x(t),t) x(t + ât) = x(t) + âtv(t + ât). (12) (13)

where E is a rank four tensor which relates the coefï¬cients of the stress tensor linearly to the coefï¬cients of the strain tensor. For isotropic materials, the coefï¬cients of E only depend on Youngâs modulus and Poissonâs ratio. 2.2. Time Integration In order to simulate dynamic deformable solids, we need to know the time dependent world coordinates x(m,t) of all points in M. Given x(m,t), we can subsequently display the conï¬gurations x(0), x(ât), x(2ât), .. resulting in an animation of the object. Here ât is a ï¬xed time step of the simulation and x(t) represents the entire vector ï¬eld at time t. The unknown vector ï¬elds x(t) are not given directly but implicitly as the solution of a differential equation, namely Newtonâs second law of motion of the form Â¨ x = F(Ë , x,t), x (5)

Â¨ Ë where x and x are the second and ï¬rst time derivatives of x, respectively and F() a general function given by the physical model of the deformable object. In order to ï¬nd the solution x(t), this second order differential equation is often rewritten as a coupled set of two ï¬rst order equations Ë x = v Ë v = F(v, x,t), (6) (7)

Ë where the new quantity v represents x. A discrete set of values x(0), x(ât), x(2ât), .. of the unknown vector ï¬eld x which is needed for the animation can now be obtained by numerically solving (i.e. integrating) this system of equations. Numerical integration of ordinary differential equations is the subject of many textbooks (e.g. [PTVF92, AP98]). See [HES02] for an excellent overview in the context of deformable modeling in computer graphics. We give a few examples here which appear in subsequent sections. The simplest scheme is explicit (or forward) Euler integration, where the time derivatives are replaced by ï¬nite Ë Ë differences v(t) = [v(t + ât) â v(t)]/ât and x(t) = [x(t + ât) â x(t)]/ât. Substituting these into the above equations and solving for the quantities at the next time step t + ât yields x(t + ât) = x(t) + âtv(t) v(t + ât) = v(t) + âtF(v(t), x(t),t). (8) (9)

The update to v uses forward Euler, while the update to x uses backward Euler. Note that the method is still explicit; v(t + ât) is simply evaluated ï¬rst. For non-dissipative systems (ie. when forces are independent of velocities), this reduces to the second order accurate Stoermer-Verlet scheme. The forward-backward Euler scheme is more stable than standard forward Euler integration, without any additional computational overhead. 3. Lagrangian Mesh Based Methods 3.1. The Finite Element Method The Finite Element Method (FEM) is one of the most popular methods in Computational Sciences to solve Partial Differential Equations (PDEâs) on irregular grids. In order to use the method for the simulation of deformable objects, the object is viewed as a continuous connected volume as

Time integration schemes are evaluated by two main criteria, their stability and their accuracy. Their accuracy is measured by their convergence with respect to the time step size ât, i.e.
c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics
xi

u(m) x(m) m

mi

~ u (m) ~ (m) x

into the PDE. In the Galerkin method, the approximation which minimizes the residue is sought. In other words, we look for an approximation whose residue is perpendicular to the subspace of functions deï¬ned by Eq. 16. Many papers in Computer Graphics use a simple form of the Finite Element method for the simulation of deformable objects, sometimes called the explicit Finite Element Method, which is quite easy to understand and to implement (e.g. [OH99], [DDCB01], [MDMâ 02]). The explicit Finite Element Method is not to be confused with the standard Finite Element Method being integrated explicitly. The explicit Finite Element Method can be integrated either explicitly or implicitly. In the explicit Finite Element approach, both, the masses and the internal and external forces are lumped to the vertices. The nodes in the mesh are treated like mass points in a mass-spring system while each element acts like a generalized spring connecting all adjacent mass points. The forces acting on the nodes of an element due to its deformation are computed as follows (see for instance [OH99]): given the positions of the vertices of an element and the ï¬xed basis functions, the continuous deformation ï¬eld u(m) inside the element can be computed using Eq. 16. From u(m), the strain ï¬eld Îµ(m) and stress ï¬eld Ï(m) are computed. The deformation energy of the element is then given by E=
V

m

(a)

(b)

Figure 2: In the Finite Element method, a continuous deformation (a) is approximated by a sum of (linear) basis functions deï¬ned inside a set of ï¬nite elements (b). in Section 2.1 which is discretized using an irregular mesh. Continuum mechanics, then, provides the PDE to be solved. The PDE governing dynamic elastic materials is given by ÏÂ¨ = â Â· Ï + f, x (14)

where Ï is the density of the material and f externally applied forces such as gravity or collision forces. The divergence operator turns the 3 by 3 stress tensor back into a 3 vector ï£¹ ï£® Ïxx,x + Ïxy,y + Ïxz,z (15) â Â· Ï = ï£° Ïyx,x + Ïyy,y + Ïyz,z ï£» , Ïzx,x + Ïzy,y + Ïzz,z representing the internal force resulting from a deformed inï¬nitesimal volume. Eq. 14 shows the equation of motion in differential form in contrast to the integral form which is used in the Finite Volume method. The Finite Element Method is used to turn a PDE into a set of algebraic equations which are then solved numerically. To this end, the domain M is discretized into a ï¬nite number of disjoint elements (i.e. a mesh). Instead of solving for the spatially continuous function x(m,t), one only solves for the discrete set of unknown positions xi (t) of the nodes of the mesh. First, the function x(m,t) is approximated using the nodal values by Ë x(m,t) = â xi (t)bi (m),
i

Îµ(m) Â· Ï(m)dm,

(17)

where the dot represents the componentwise scalar product of the two tensors. The forces can then be computed as the derivatives of the energy with respect to the nodal positions. In general, the relationship between nodal forces and nodal positions is nonlinear. When linearized, the relationship for an element e connecting ne nodes can simply be expressed as fe = Ke ue ,
3ne

(18)

(16)

where bi () are ï¬xed nodal basis functions which are 1 at node i and zero at all other nodes, also known as the Kronecker Delta property (see Fig. 2). In the most general case of the Finite Element Method, the basis functions do not have this property. In that case, the unknowns are general parameters which can not be interpreted as nodal values. SubË stituting x(m,t) into Eq. 14 results in algebraic equations for the xi (t). In the Galerkin approach [Hun05], ï¬nding the unknowns xi (t) is viewed as an optimization process. When Ë substituting x(m,t) by the approximation x(m,t), the inï¬nitely dimensional search space of possible solutions is reduced to a ï¬nite dimensional subspace. In general, no function in that subspace can solve the original PDE. The approximation will generate a deviation or residue when substituted

where fe â R contains the ne nodal forces and ue â R3ne the ne nodal displacements of an element. The matrix Ke â R3ne x3ne is called the stiffness matrix of the element. Because elastic forces coming from adjacent elements add up at a node, a stiffness matrix K â R3nx3n for an enire mesh with n nodes can be formed by assembling the elementâs stiffness matrices K = â Ke .
e

(19)

In this sum, the elementâs stiffness matrices are expanded to the dimension of K by ï¬lling in zeros at positions related to nodes not adjacent to the element. Using the linearized elastic forces, the linear algebraic equation of motion for an entire mesh becomes (u = x â x0 ) Â¨ Ë Mu + Du + Ku = fext , where M â R
nxn

(20)
nxn

is the mass matrix, D â R

the damping

c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

matrix and fext â Rn externally applied forces. Often, diagonal matrices are used for M and D, a technique called mass lumping. In this case, M just contains the point masses of the nodes of the mesh on its diagonal. The vectors x and x0 contain, respectively, the actual and the rest positions of the nodes. The Finite Element method only produces a linear system of algebraic equations if applied to a linear PDE. If a linear strain measure is used and Hookeâs law for isotropic materials is substituted into 14, LamÃ©âs linear PDE results: ÏÂ¨ = Âµâu + (Î» + Âµ)â(â Â· u), x (21) where the material constants Î» and Âµ can be computed directly from Youngâs modulus and Poissonâs ratio. This equation is solved in [DDBC99] in a multiresolution fashion. Using discretized versions of the Laplacian (â = â2 ) and gradient-of-divergence (â(âÂ·)) operators, they solve the LamÃ© equation on an irregular, multiresolution grid. The system is optimized for limited deformations (linearized strain) and does not support topological changes. Based on Gaussâ Divergence Theorem, the discrete operators are further evolved in [DDCB00], which leads to greater accuracy through deï¬ned error bounds. Furthermore, the cubic octree hierarchy employed in [DDBC99] is succeeded by a nonnested hierarchy of meshes, in conformance with the redeï¬ned operators, which leads to improved shape sampling. In [DDCB01] the previous linearized physical model is replaced by local explicit ï¬nite elements and Greenâs nonlinear strain tensor. To increase stability the simulation is integrated semi-implicitly in time [DSB99]. OâBrien et al. [OH99] and [OBH02] present a FEM based technique for simulating brittle and ductile fracture in connection with elastoplastic materials. They use tetrahedral meshes in connection with linear basis functions bi () and Greenâs strain tensor. The resulting nonlinear equations are solved explicitly and integrated explicitly. The method produces realistic and visually convincing results, but it is not designed for interactive or real-time use. In addition to the strain tensor, they use the so-called strain rate tensor (the time derivative of the strain tensor), to compute damping forces. Other studies on the visual simulation of brittle fracture are [SWB00] and [MMDJ01]. Bro-Nielsen and Cotin [BNC96] use linearized ï¬nite elements for surgery simulation. They achieve signiï¬cant speedup by simulating only the visible surface nodes (condensation), similar to the BEM. Many other studies successfully apply the FEM to surgery simulation, such as (but surely not limited to) [GTT89], [CEOâ 93], [SBMH94], [KGCâ 96], [CDA99], [CDA00], [PDA00] and [PDA01]. As long as the equation of motion is integrated explicitly in time, nonlinear elastic forces resulting from Greenâs strain tensor pose no computational problems. The nonlinear formulas for the forces are simply evaluated and used directly to integrate velocities and positions as in [OH99]. As
c The Eurographics Association 2005.

Figure 3: The pitbull with its inï¬ated head (left) shows the artifact of linear FEM under large rotational deformations. The correct deformation is shown on the right. mentioned earlier (Section 2.2), explicit integration schemes are stable only for small time steps while implicit integration schemes allow arbitrarily large time steps. However, in the latter case, a system of algebraic equations needs to be solved at every time step. Linear PDEâs yield linear algebraic systems which can be solved more efï¬ciently and more stably than nonlinear ones. Unfortunately, linearized elastic forces are only valid for small deformations. Large rotational deformations yield highly inaccurate restoring forces (see Fig. 3). To eliminate these artifacts, MÃ¼ller et al. extract the rotational part of the deformation for each ï¬nite element and compute the forces with respect to the non-rotated reference frame [MG04]. The linear equation 18 for the elastic forces of an element (in this case a tetrahedron) is replaced by f = RK (RT x â x0 ),
12x12

(22)

where R â R is a matrix that contains four 3 by 3 identical rotation matrices along its diagonal. The vector x contains the actual positions of the four adjacent nodes of the tetrahedron while x0 contains their rest positions. The rotation of the element used in R is computed by performing a polar decomposition of the matrix that describes the transformation of the tetrahedron from the conï¬guration x0 to the conï¬guration x. This yields stable, fast and visually pleasing results. In an earlier approach, they extract the rotational part not per element but per node [MDMâ 02]. In this case, the global stiffness matrix does not need to be reassembled at each time step but ghost forces are introduced. Another solution to this problem is proposed in [CGCâ 02]: each region of the ï¬nite element mesh is associated with the bone of a simple skeleton and then locally linearized. The regions are blended in each time step, leading to results which are visually indistinguishable from the nonlinear solution, yet much faster. An adaptive nonlinear FEM simulation is described by Wu et al. [WDGT01]. Distance, surface and volume preservation for triangular and tetrahedral meshes is outlined in [THMG04]. Grinspun et al. introduce conforming, hierarchical, adaptive reï¬nement methods (CHARMS) for general ï¬nite elements [GKS02], reï¬ning basis functions instead of elements. Irving et al. [ITF04] present a method which robustly handles large deformation and element inversion by

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

computing a problem-speciï¬c diagonalization of the deformation gradient, from which the forces are derived. MÃ¼ller et al. [MTG04] propose simulating and fracturing objects represented by surface meshes, by embedding the surface in a cuboid element voxelization (Fig. 4). This domain embedding strategy is also used by James et al. in their squashing cubes simulator [JBT04]. To support topological changes while maintaining well-shaped elements, Molino et al. create duplicates of the original elements in their virtual node algorithm [MBF04].

There is a more direct way to get to the nodal forces of an element, using the Method of Finite Volumes. The stress tensor Ï can be used to compute the internal force f per unit area with respect to a certain plane orientation as f = Ïn, (23)

where the normalized vector n is the normal on that plane. Thus, the total force acting on the face A of a ï¬nite element is given by the surface integral fA =
A

ÏdA.

(24)

When linear basis functions are used, the stress tensor is constant within an element. Then, for planar element faces, the surface integral reduces to the simple product fA = AÏn, (25)

Figure 4: Embedding a topologically inconsistent surface mesh in hexahedral ï¬nite elements for deformation simulation and fracturing [MTG04]. 3.2. The Method of Finite Differences If the object M is sampled using a regular spatial grid, the equation of motion 14 can be discretized using ï¬nite differences. The method of Finite Differences is easier to implement than the general Finite Element Method. However, it is difï¬cult to approximate the boundary of an arbitrary object with a regular mesh. Also, local adaptations are only possible with irregular meshes. Pioneering work in the ï¬eld of physically based animation was carried out by Terzopoulos and his co-workers. In their seminal paper [TPBF87] the dynamics of deformable models are computed from the potential energy stored in the elastically deformed body. For volumetric objects, they deï¬ne the deformation energy as the weighted matrix norm of the difference between the metric tensors of the deformed and original shape, integrated over the entire continuum (two and one dimensional objects involve further weighted norms of second and third order tensors). The continuous variational (or directional) derivative of this energy functional (the elastic force) is discretized using the Method of Finite Differences (FD), and the simulation is moved forward through time by semi-implicit integration. This work is further evolved in [TF88] and [TW88] where the model is extended to cover plasticity and fracture. 3.3. The Finite Volume Method In the explicit Finite Element Method, the forces acting on the nodes of an element are computed as the derivatives of the deformation energy with respect to the nodal positions, where the deformation energy is computed via 17.

where the scalar A is the area of the face and n its normal. To get the nodal forces, one loops over all the faces Ai of the element and distributes the force fAi evenly among the nodes adjacent to that face. Teran et al. [TBHF03] use this method to simulate skeletal muscle. They also use a geometrically motivated way to compute strain which leads to an intuitive way of integrating the equations of motion. 3.4. The Boundary Element Method The Boundary Element Method (BEM) is an interesting alternative to the standard Finite Element approach because all computations are done on the surface (boundary) of the elastic body instead of on its volume (interior). For a very good introduction to the subject see [Hun05]. Roughly speaking, the integral form of the equation of motion is transformed into a surface integral by applying the Green-Gauss theorem. The method achieves substantial speedup because the three dimensional problem is reduced to two dimensions. However, the approach only works for objects whose interior is composed of a homogenous material. Also, topological changes (e.g. fractures) are more difï¬cult to handle than in the explicit FEM approach where only local changes to the stiffness matrix or the connectivity of the elements need to be done. In the ArtDefo System [JP99] surface nodes are simulated using the Boundary Element Method and a database of precomputed reference boundary value problems (RBVPs). By employing a fast update process, which exploits coherence, accurate real-time deformation simulation is achieved. In [JP02b] the RBVPs are expressed in terms of linear elastostatic Greenâs functions (LEGFMs) and multiple RBVPâs are linked via interface boundary conditions, resulting in a multizone elastokinematic model, which properly simulates large nonlinear relative strains. The system is further augmented by multiresolution Greenâs functions (wavelet Greenâs functions) in [JP03], with which large-scale objects can be simulated.
c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

3.5. Mass-Spring Systems Mass-spring systems are arguably the simplest and most intuitive of all deformable models. Instead of beginning with a PDE such as Eq. 14 and subsequently discretizing in space, we begin directly with a discrete model. As the name implies, these models simply consist of point masses connected together by a network of massless springs. The state of the system at a given time t is deï¬ned by the positions xi and velocities vi of the masses i = 1..n. The force fi on each mass is computed due to its spring connections with its neighbors, along with external forces such as gravity, friction, etc. The motion of each particle is then govÂ¨ erned by Newtonâs second law fi = mi xi , which for the entire particle system can be expressed as MÂ¨ = f(x, v) x (26)

Physical bodies are not perfectly elastic; they dissipate energy during deformation. To account for this, viscoelastic springs are used to damp out relative motion. Thus, in addition to (27), each spring exerts a viscous force. It is common to model this as fi = kd (v j â vi ) (28)

where kd is the springâs damping constant. This is unfortunate, as it damps rigid body rotations. Worse still, when modeling cloth it damps bending and wrinkling â a key feature of these objects. It is preferable to use fi = kd ( vTj xi j i xTj xi j i )xi j (29)

where M is a 3n Ã 3n diagonal mass matrix. Thus, massspring systems "only" require the solution of a system of coupled ordinary differential equations (ODEs). This is done via a numerical integration scheme as described in Section 2.2.

where vi j = v j â vi . This projects the velocity difference onto the vector separating the masses, and only allows a force along that direction. In the literature, the concept of a mass-spring system is often more general than the canonical example given above. These models are still represented by point masses and a ï¬xed connectivity, but the notion of a spring is generalized. Often the name "particle system" is used instead, which is perhaps a more ï¬tting name. (Though they should be distinguished from the models found in Section 4.1, which have no ï¬xed connectivity.) In any case, the term "mass-spring system" is very suggestive, and will most likely persist. In more general particle systems, such as those found in [BHW94, BW98, THMG04], deformation energies are deï¬ned. These are often derived from soft constraints that are to be maintained in the model; given some constraint of the form C(x) = 0, an associated energy is deï¬ned as ks T 2 C (x)C(x). These energies are minimized at the modelâs rest state, and are used to enforce the preservation of mesh distances, angles, areas, volumes, etc. Particle forces are then computed as the derivatives of the energies with respect to the particle positions fi = â âE . âxi (30)

shear spring

point mass structural spring

Figure 5: A mass-spring system. Depicted in Fig. 5 is a simple example of a volumetric mass-spring system (similar to that in [CZKM98]). The masses are regularly spaced in a lattice. They are connected together along the twelve edges of each hexahedron by "structural" springs. Masses on opposite corners of each hexahedron are connected together by "shear" springs. These springs cause the solid to resist longitudinal and shear deformations respectively, and their rest lengths deï¬ne the undeformed state of the body. Typically, the spring types have different properties; and for anisotropic materials each springsâ properties also depend on its orientation. Springs are commonly modeled as being linearly elastic; the force acting on mass i, generated by a spring connecting i and j together is xi j (27) fi = ks (|xi j | â li j ) |xi j | where xi j is the difference between the two massesâ position vectors (x j â xi ), ks is the springâs stiffness and li j is its rest length.
c The Eurographics Association 2005.

Each energy term typically involves only a few particles. In the case of a distance constraint, we are back to our simple, linear spring model described above. However, for other constraints and energies, we must imagine more general spring types: angular, bending, areal, volumetric, etc. 3.5.1. Early Work Mass-spring networks ï¬rst saw use in Computer Graphics for facial modeling [PB81, Wat87]. These early works solve static problems of the form (18). Soon after, dynamic models were introduced to model skin, fat and muscle [CHP89, TW90, WT91]. The locomotion of simple creatures such as snakes,

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

worms and ï¬sh [Mil88, TT94] was simulated using massspring systems. In these systems, spring rest-lengths vary over time to simulate muscle actuation. In work by Terzopoulos et al. [TPF89] the equations of thermal conductivity are used to simulate heat transfer in a volumetric mass-spring system. Each springâs stiffness is determined by its temperature, which is set to zero once the melting threshold is exceeded. A discrete ï¬uid model (similar to those presented in Section 4.1) is applied to particles for which all connecting springs have melted. Breen et al. [BHW94] presented a particle system to model cloth. They posited that cloth is a mechanism of warp and weft ï¬bres â not a continuum â and that mass-spring systems are thus more appropriate than Finite Element techniques for modeling cloth. Using measured data from the Kawabata Evaluation System [Kaw80], they took care in formulating their energy functions for stretching, bending and trellising (shearing), and predicted the static drape of real materials quite accurately. Since [BHW94], particle systems have dominated the cloth simulation literature â although new FEM formulations (such as the one described in [EKS03]) continue to be proposed. 3.5.2. Drawbacks and Improvements Particle systems tend to be intuitive and simple to implement. Moreover, they are computationally efï¬cient and handle large deformations with ease. However, unlike the Finite Element and ï¬nite difference methods, which are built upon elasticity theory, mass-spring systems are not necessarily accurate. Primarily, most such systems are not convergent; that is, as the mesh is reï¬ned, the simulation does not converge on the true solution. Instead, the behavior of the model is dependent on the mesh resolution and topology. In practice, spring constants ks are often chosen arbitrarily, and one can say little quantitatively about the material being modeled. In addition, there is often coupling between the various spring types. For instance, the "shear" springs of the model in Fig. 5 also resist stretching. For medical applications, as well as for virtual garment simulation in the textile industry, greater accuracy is required. For applications such as ï¬lm and games, this lack of accuracy may be acceptable; convincing animations have been produced using these systems. However, a judicious choice of model is still advised, as the behavior of the material being modeled can be highly mesh dependent. Several researchers have explored and have tried to mitigate the accuracy issues in mass-spring systems. Kass [Kas95] presents a simple equivalence in one dimension between a mass-spring system and a corresponding ï¬nite difference spatial discretization. Eischen and Bigliani [HB00] perform a comparison between a Finite Element model and a carefully tuned particle system, which gave similar experimental results for small deformations. Etzmuss et al. [EGS03] carefully derive a cloth particle system from a continuous formulation by a ï¬nite difference dis-

Figure 6: Cloth carefully modeled using a mass-spring system. Image courtesy of Robert Bridson, UBC. cretization. Their model is convergent, and they show how to choose spring constants based on continuous material parameters. These more accurate particle systems, however, only apply to rectangular meshes. Like ï¬nite difference techniques, they do not generalize easily to triangular (or tetrahedral) meshes. Volino and Thalmann [VMT97] present a triangular mesh which attempts to model the physical properties of cloth regardless of edge orientations. However, the accuracy of their method is unclear. Baraff and Witkin [BW98] model cloth using a triangular mesh, deriving in-plane particle forces from a continuum formulation. Their approach supports anisotropic behavior, but is not convergent. In [BC00], the authors present a novel mass-spring system which gives consistent results (though it is not convergent) for tetrahedral and hexahedral meshes, independent of the orientation of the elements. In their system, springs emanate from the barycenter of each element along principle coordinate axes and are attached to element faces; forces acting on each particle are then computed via interpolation. Their approach also allows the user to control anisotropic material behavior. Teschner et al. [THMG04] model volumes and surfaces using tetrahedral and triangular meshes respectively. They employ generalized springs which preserve distances, areas and volumes. Their model is efï¬cient, convergent (though it does not incorporate continuous material properties), and supports plastic deformation. Bending models for surfaces tend to be particularly adhoc; Bridson et al. [BMF03] present a physically correct bending model for triangle meshes by isolating the bending mode from all other modes of deformation (Fig. 7). Grinspun et al. present a similar bending model for the simulation of discrete shells [GHDS03]. An interesting approach is to use learning algorithms to search for mesh parameters. (See [BTHâ 03, BSSH04] and references therein.) Bhat et al. use simulated annealing to estimate the spring constants in a cloth mesh. They employ Baraff and Witkinâs model [BW98], and use video of real cloth as their reference for comparison. Bianchi et al. use a genetic algorithm to identify spring constants as well as mesh topology in a volumetric mass-spring system. They
c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

Figure 7: A bending model for triangle meshes with nonzero rest angles [BMF03]. The model on the right has signiï¬cantly stronger bending resistance, giving it a "water bottle" effect. Image courtesy of Robert Bridson, UBC. compare their results to FEM reference solutions, and obtain close correspondence. While such methods are general, they are computationally expensive and require reference solutions; moreover, the results of a speciï¬c search may not hold for different mesh resolutions. Adaptive meshing techniques are particularly complicated by the non-convergent behavior of many mass-spring systems, as they require modeling at multiple resolutions. (Another difï¬culty is the handling of so called T-junctions between regions of differing resolutions, though this problem must also be addressed in FEM and other methods.) A number of authors have addressed this issue for cloth simulation. In these systems, splitting/merging criterion are often based on bending angles between triangles. Villard and Borouchaki [VB02] apply adaptive reï¬nement to a simple, convergent model based on quadrilateral meshes. They show consistent results between meshes of multiple resolutions, maintaining rich detail at reduced computation times. Earlier work by Hutchinson et al. [HPH96] takes a similar approach, though the convergence of their model is not clear as they couple their spatial and time discretizations together in an ad-hoc manner. Li and Volkov [LV05] present an adaptive framework for triangular cloth meshes, avoiding the problematic T-junctions. They present attractive results, though their physical model is not convergent. Finally, a number of researchers have sought to improve the realism of particle systems by modeling nonlinear material properties. For instance, Eberhardt et al. [EWS96] base their spring model on measured cloth data to model hysteresis effects; Choi and Ko [CK02] approximate clothâs buckling response using a ï¬fth order polynomial. 3.5.3. Time Integration Once a force model is chosen, the particle system is stepped forward in time via a numerical integration scheme as in Section 2.2. Time integration schemes have received particular attention in the cloth simulation literature (see [HES02]). As cloth is often modeled by mass-spring systems, we further discuss the subject of time integration here. Cloth is a highly anisotropic material due to its structure: it resists bending weakly, but has a relatively strong resistance to stretching. When simulating a highly stiff volume
c The Eurographics Association 2005.

of material, one can employ a reduced deformation model, such as modal analysis (see Section 5) â and in the limit, use a rigid body model. Clearly, this cannot be done with cloth. We are interested in visualizing the large scale, outof-plane folding and wrinkling of cloth, however we must still deal with these planar energies in our model. Numerically speaking, the resulting ODE system (26) is stiff ; that is, it possesses a wide range of eigenvalues. This forces us to take excessively small time steps when using an explicit scheme. Provot [Pro95] tackles the issue of stiffness by using much weaker stretching energies and then post-processing the cloth mesh at each time step, iteratively enforcing constraints. Springs that are stretched by more than 10% are relaxed (shortened). This in turn stretches nearby neighboring springs which are then relaxed, and so on until convergence is obtained. This, in effect, also models the biphasic nature of cloth â small deformations are resisted weakly until a threshold is reached, whereupon stiffness dramatically increases. In practice, this method gives efï¬cient, attractive results, though convergence is not guaranteed. Baraff and Witkin [BW98] present a linear implicit scheme which allows for large time steps while maintaining stability. This has proven to be a robust and efï¬cient solution to the stiffness problem, and has become a popular technique. Speciï¬cally, they apply a backward Euler scheme to Eq. 26, giving âx âv = ât vn + âv M â1 f(xn + âx, vn + âv) (31)

where xn = x(t) and vn = v(t). This is a nonlinear equation in âx and âv. A linear implicit version of (31) is obtained by using a ï¬rst order Taylor series expansion of f f(xn + âx, vn + âv) = fn + âf âf âx + âv âx âv (32)

âf âf where âx and âv are the Jacobian matrices of the particle forces with respect to position and velocity respectively. In their paper, Baraff and Witkin derive expressions for the Jacobians of the various internal forces in their model. Due to the local connectivity structure of the mesh, these are sparse matrices. They then solve the resulting linear system at each time step

Aâv = b, where

(33)

âf âf â ât 2 M â1 ) (34) âv âx âf (35) and b â¡ âtM â1 (fn + ât vn ). âx They solve this system, in the presence of constraints, using a modiï¬ed preconditioned conjugate gradient solver (MPCG). This is equivalent to applying one Newton iteration to Eq. 31. Although solving this system increases the A â¡ (I â âtM â1

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

Figure 8: Decomposing cloth into parts which can be solved more efï¬ciently [BA04]. computational cost at each time step, this is more than offset by the ability to take large steps when desired. However, as illustrated by Desbrun et al. [DSB99], the larger the time step size, the more artiï¬cial damping is added to the system. Others have since attempted to improve upon Baraff and Witkinâs approach. Desbrun et al. [DSB99] precompute the linear part of A, achieving an O(n), unconditionally stable scheme. Their technique, however, is inaccurate and does not generalize well to large systems. Kang et al. [KCCâ 00] improve upon this approximation, but ultimately are only replacing the CG iterations of [BW98] with a single, Jacobilike iteration. Volino and Magnenat-Thalmann [VMT00] use a weighted implicit-midpoint method that appeared to give attractive results, but which is less stable and may be difï¬cult to tune in practice. Choi and Ko [CK02] use the more accurate second-order backward difference formula (BDF2); moreover, their coupled compression/bending model improves the stability of the system, eliminating the need for ï¬ctitious spring damping. Instead of applying an implicit scheme to the entire system, a number of researchers have employed implicitexplicit (IMEX) schemes [ARW95]. The essential idea is to separately treat the stiff and non-stiff parts of the ODE, handling the stiff parts with an implicit method and the non-stiff parts with an explicit method. This combines the stability of an implicit scheme where needed with the simplicity and efï¬ciency of an explicit scheme where possible. Hauth et al. [HES02] base their IMEX splitting on connection type: stretch springs are handled implicitly, whereas shear and bend "springs" are handled explicitly. This simpliï¬es implementation and improves the sparsity of A â and thus the cost of solving Eq. 33. The authors also use BDF2, and embed their linear solver within a Newton solver, making theirs a fully (as opposed to linear) implicit technique. Boxerman and Ascher [BA04] take a similar approach, optimizing their IMEX splitting adaptively based on a local stability criterion. Each spring is handled either explicitly or implicitly, based on time step, local mesh resolution and material properties. They then take further advantage of the improved system sparsity to decompose the mesh into components which can be solved more efï¬ciently (Fig. 8). Bridson et al. [BMF03] apply a similar IMEX splitting to cloth as that used for advection-diffusion equa-

tions [ARW95], applying an implicit method to the damping term and an explicit method to the elastic term. This is appropriate when damping plays a signiï¬cant role, as damping imposes quadratic time step restrictions with respect to mesh size (as opposed to a linear one for elastic terms). They incorporate this within a second order accurate integration scheme, and include a strain limiting step. Coupled with their careful handling of bending and collisions, they produced visually stunning cloth animations.

4. Lagrangian Mesh Free Methods 4.1. Loosely Coupled Particle Systems Particle systems were developed by Reeves [Ree83] for explosion and subsequent expanding ï¬re simulation in the movie "Star Trek II: The Wrath of Khan". The same technique can also be used for modeling other fuzzy objects such as clouds and water, i.e. objects that do not have a well-deï¬ned surface. Particles are usually graphical primitives such as points or spheres, however, they might also represent complex group dynamics such as a herd of animals [Rey87]. Each particle stores a set of attributes, e.g. position, velocity, temperature, shape, age and lifetime. These attributes deï¬ne the dynamical behavior of the particles over time and are subject to change due to procedural stochastic processes. Particles pass through three different phases during their lifetime: generation, dynamics and death. In [Ree83], particles are points in 3D space which represent the volume of an object. A stochastic process generates particles in a predetermined generation shape which deï¬nes a region about its origin into which the new particles are randomly placed. Attribute values are either ï¬xed or may be determined stochastically. Initially, particles move outward away from the origin with a random speed. During the dynamics phase, particle attributes might change as functions of both time and attributes of other particles. Position is updated by simply adding the velocity. Finally, a particle dies if its lifetime reaches zero or if it does not contribute to the animation anymore, e.g. if it is outside of a region of interest. A particle is rendered as a point light source which adds an amount of light depending on its color and transparency attribute. Motion blurring is very easy to achieve by rendering a particle as a streak using its position and velocity. An advantage of particles is their simplicity, which enables the animation of a huge number of particles for complex scenes. The procedural deï¬nition of the model and its stochastic control simpliï¬es the human design of the system. Furthermore, with particle hierarchies, complicated fuzzy objects such as clouds can be assembled and controlled. Although the particles are simulated omitting inter-particle forces, the resulting animations are convincing and fast for inelastic phenomena. Therefore, the technique has been widely employed in movies and video games. Examples of modeling waterfalls, ship wakes, breakc The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

ing waves and splashes using particle systems can be found in [FR86, Pea86, Gos90, Sim90, OH95]. Particles which interact with each other depending on their spatial relationship are referred to as spatially coupled particle systems [Ton92]. The interactions between particles evolve dynamically over time, thus, complex geometry and topological changes can be easily modeled using this approach. Tonnesen presented a framework for physically based animation of solids and liquids based on dynamically coupled particles which represent the volume of an object [Ton91, Ton98]. Each particle pi has a potential energy Ïi which is the sum of the pairwise potential energies Ïi j between pi and all other other particles p j , i.e. Ïi =

ranging from stiff to ï¬uid-like behavior. By coupling the dissociation energy with thermal energy such that the total system energy is conserved, objects can be melted and frozen. Furthermore, thermal expansion and contraction can be simulated by adapting the equilibrium separation distance d0 to the temperature. One problem of particle systems is that the surface is not explicitly deï¬ned. Blinn [Bli82] proposed using an algorithm which was developed to model electron density maps of molecular structures. A Gaussian potential Ïi (x) = 2 beâad (which is often called a blob) is assigned to each particle, where a and b are constants and d = x â xi is the distance from an arbitrary point x in space to the particleâs position xi . A continuously deï¬ned potential ï¬eld Ï(x) in space is obtained by summing the contribution from each particle Ï(x) = â Ïi (x).
i

â Ïi j .
j=i

(36)

The force fi exerted on pi with position xi is then fi = ââxi Ïi = â â âxi Ïi j .
j=i

(40)

(37)

So far, all particles interact with each other, resulting in O(n2 ) complexity where n is the number of particles. The computational costs for computing the force can be reduced to O(n) when restricting the interaction to a neighborhood within a certain distance, and O(n log n) for neighbor searching. To avoid discontinuities at the neighborhood boundary, the potentials are weighted with a continuous, smooth and monotonically decreasing weighting function which depends on the distance to the particles and ranges from one at the particle position to zero at the neighborhood boundary. For deriving inter-particle forces, the Lennard-Jones potential ÏLJ is used: ÏLJ (d) = B A â , dn dm (38)

The surface is then deï¬ned as an iso-value S of Ï. This yields an implicit coating of the particle which handles topological changes such as splitting and merging by construction. For a more intuitive control of the surface, the constants a and b can be computed as a = âB/R2 and b = SeâB , where R is the radius in isolation and B the blobiness. The implicit coating of particles for soft inelastic substances undergoing topological changes pose challenging problems such as volume preservation, avoiding unwanted blending and contact modeling. These were addressed by Desbrun and Cani in a series of papers [Can93, DC94, DC95]. A hybrid model is used which is composed of two layers: Particles are used to simulate soft inelastic substances as described above, while an elastic implicit layer deï¬nes the surface of an object and is locally deformed during collisions. A problem of the implicit coating is that the volume may change signiï¬cantly during deformation, especially for splitting and merging. However, efï¬ciently computing the volume of a soft substance is not trivial. A territory of a particle pi is deï¬ned as the (volumetric) part Vi of the object where the ï¬eld contribution of pi is the highest. Note that territories form a partition of the implicit volume of an object. Each particle samples its territory boundary by sending a ï¬xed number of points called seeds in a set of distributed directions until they reach the boundary. The volume of a particle is approximated by simply summing up the distances from the particle to the seeds. The local volume variation can then be easily approximated for each particle, and the ï¬eld function is changed accordingly such that the volume is preserved. Another problem is that split object parts might blend with each other when they come close. To avoid this, an inï¬uence graph is built at each animation step by recursively adding the neighbors of a particle which are in its sphere of inï¬uence to the same inï¬uence connected component. Only the particles of the same component can interact and their ï¬eld functions are

where d is the distance between two particles, and n, m, B and A are constants. The Lennard-Jones potential is well known in molecular dynamics for modeling the interaction potential between pairs of atoms. It creates long-range attractive and short-range repulsive forces, yielding particles arranged into hexagonally ordered 2D layers in absence of external forces. A more convenient formulation, called the Lennard-Jones bi-reciprocal function, is written as Ï(d) = d d âeo (m( 0 )n â n( 0 )m ), mân d d (39)

where d0 is the equilibrium separation distance, and âe0 is the minimal potential (the magnitude is called the dissociation energy). Increasing the dissociation energy increases the stiffness of the model, while with the exponents n and m the width of the potential well can be varied. Therefore, large dissociation energy and high exponents yield rigid and brittle material, while low dissociation energy and small exponents result in soft and elastic behavior of the object. This allows the modeling of a wide variety of physical properties
c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

blended. However, the problem arises that two or more separated components might collide. For detecting a collision, the seed points on the iso-surface S are tested against the ï¬eld function of another component. For resolving interpenetrations between two components with potential functions Ï1 and Ï2 , exact contact surfaces are computed by applying negative compressing potentials g2,1 and g1,2 such that Ï1 + g2,1 = Ï2 + g1,2 = S, resulting in a local compression. To compensate the compression and ensure C1 continuity of the deformed surfaces, positive dilating potentials are applied in areas deï¬ned around the interpenetration zone [Can93, OC97]. For collision response, the compression potentials gi, j are computed for each colliding seed and then transmitted as response force to the corresponding particle. Additionally, the two components might be merged locally where the collision force exceeds a threshold. Szeliski and Tonnesen introduced oriented particles for deformable surface modeling [ST92, Ton98], where each particle represents a small surface element (called surfel). Each surfel has a local coordinate frame, given by the position of the particle, a normal vector and a local tangent plane to the surface. To arrange the particles into surfacelike arrangements, interaction potentials are deï¬ned which favor locally planar or locally spherical arrangements. The Lennard-Jones potential described above is used to control the average inter-particle spacing. The weighted sum of all potentials yields the energy of a particle, where the weights control the bending and stiffness of the surface. Variation of the particle energy with respect to its position and orientation yields forces acting on the positions and torques acting on the orientations, respectively. Using these forces and torques, the Newtonian equations for linear and angular motion are solved using explicit integration as described in Section 2.2. Recently, Bell et al. presented a method for simulating granular materials, such as sand and grains, using a particle system [BYM05]. A (non-spherical) grain is composed of several round particles, which move together as a single rigid body. Therefore, stick-slip behavior naturally occurs. Molecular dynamics (MD) is used to compute contact forces for overlapping particles. The same contact model is used for collision of granular materials with rigid bodies, or even between rigid-bodies, by simply sampling the rigid body surface with particles. 4.2. Smoothed Particle Hydrodynamics Smoothed Particle Hydrodynamics (SPH) is a Lagrangian technique where discrete, smoothed particles are used to compute approximate values of needed physical quantities and their spatial derivatives. Forces can be easily derived directly from the state equations. Furthermore, as a particlebased Lagrangian approach it has the advantage that mass is trivially conserved and convection is dispensable. This reduces both the programming and computational complexity

Figure 9: Simulating interface tension forces between ï¬uids of different polarity, temperature diffusion and buoyancy [MSKG05]. and is therefore suitable for interactive applications. A drawback of SPH is that it is not possible so far to exactly maintain the incompressibility of material. Following, we will give a short introduction of the SPH method and discuss applications in Computer Graphics. For a more detailed introduction we refer the reader to the excellent paper of Monaghan [Mon92]. A function A is interpolated at a position x from its neighboring particles using a summation interpolant: A(x) = â m j
j

Aj W (r, h), Ïj

(41)

where A j denotes the function value of a particle p j at x j (the interpolation point), m j and Ï j are the mass and density of a particle p j , respectively, and r = x â xj . W (r, h) is a smoothing kernel with the properties W (r, h)dr = 1 and limhâ0 W (x, h) = Î´(x), where h is the support radius and Î´ the Dirac-function. For efï¬ciency reasons, h is usually chosen such that the kernel W (r, h) has compact support. The choice of the smoothing kernel W (r, h) is very important. Often spline Gaussian kernels are used, see e.g. [Mon92] for a discussion of kernels. If W (r, h) is differentiable, a differentiable interpolant of a function can be derived by simply computing the gradient of W (r, h), i.e., âA(x) = â m j
j

Aj âW (r, h). Ïj

(42)

Therefore, there is no need for ï¬nite differences or a grid. To obtain higher accuracy the interpolant can be computed as ÏâA(x) = â(ÏA(x)) â A(x)âÏ. The density is estimated at an arbitrary point as Ï(x) = â m jW (r, h).
j

(43)

(44)

The particle densities could be computed for each time step. In practice, this is often not appropriate because the density drops close to the object boundary. Furthermore, difï¬culties arise when adapting the spatial resolution of the particles [DC99]. Instead, we can assign an initial density to each particle. The continuity equation (conservation of mass) is then used for computing the variation of density over time Ë Ïi = âÏi âvi , (45)

c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

Figure 10: An elastic solid is dropped onto a heated box and melts to a ï¬uid [KAGâ 05]. where the divergence of velocity âvi is approximated by âvi = 1 Ïi ï¬ll a sphere. The new particle is positioned at the center of gravity of the replaced ones. Its mass and velocity are computed such that mass and linear momentum are conserved. Considering the object as a set of smeared-out masses, the surface can be deï¬ned as an iso-surface of the mass density function [DC96]. This yields an implicit representation coherent with the physical model. Desbrun and Cani [DC98] improve this implicit coating of particles by using an active surface which evolves depending on a velocity ï¬eld, similar to snakes [KWT88]. Therefore, surface tension and other characteristics such as constant volume can be added to the surface model. 4.2.1. Applications SPH was introduced independently by Gingold and Monaghan [GM77] and Lucy [Luc77], for the simulation of astrophysical problems such as ï¬ssion of stars. Stam and Fiume introduced SPH to the Computer Graphics community to depict ï¬re and other gaseous phenomena [SF95]. They solve the advection-diffusion equation for densities composed of "warped blobs". Desbrun and Cani solve the state equations for the animation of highly deformable bodies using SPH [DC96]. They achieve the animation of inelastic bodies with a wide range of stiffness and viscosity. Lava ï¬ows are animated by coupling viscosity with a temperature ï¬eld and simulated heat transfer between the particles [SACâ 99]. By considering hair as a ï¬uid-like continuum, Hadap and Magnenat-Thalmann [HMT01] used a modiï¬ed formulation of SPH to simulate hair-hair interactions. PremoÅ¾e et al. introduced the use of the moving particle semi-implicit method (MPS) for simulating incompressible multiphase ï¬uids [PTBâ 03]. Impressive visual results were produced by coupling the physical particles with level sets for surface reconstruction. MÃ¼ller et al. presented a method based on SPH and new smoothing kernels, with which ï¬uids with free surfaces can be simulated at interactive rates with up to 5000 particles [MCG03]. Furthermore, they proposed a term to model surface tension effects. In [MSTâ 04], the interaction of Lagrangian ï¬uids and meshbased deformable solids are modeled by placing virtual boundary particles, so-called ghost particles [Mon94], on the surface of the solid objects according to Gaussian quadrature. Recently, the SPH method was extended in [MSKG05] so that the simulation of phenomena such as boiling water, trapped air and the dynamics of a lava lamp are possible (Fig. 9). Liquids with different polarities are simulated by

â m j (v j â vi ) Â· âW (r, h).
j=i

(46)

The disadvantage of this update of the density relative to the motion of the neighboring particles is that exact mass conservation is not guaranteed. The equations of motion are solved by deriving forces. E.g. the pressure force can be estimated using Eq. 43 fi
pressure

= âmi â m j (
j

Pj Pi + 2 )âW (r, h), 2 Ïi Ïj

(47)

where the force is symmetrized to fulï¬ll the action-reaction principle of Newtonâs third law. For keeping a constant rest density Ï0 , the pressure Pi is computed by a variation of the ideal gas state equation [DC96] Pi = k(Ï â Ï0 ), where k is a gas constant. For smoothed particles, local stability criteria have been found which, in conjunction with time-adaptive integration, yield both stable and efï¬cient animations. The CourantFriedrichs-Lewy (CFL) criterion requires that each particle i must not be passed by, giving a limit for the time step ât â¤ Î»h/c, where Î» is the Courant number and c is the speed of sound of the material, which is the maximum velocity of a deformation wave inside the material. Pressure waves propagate at speed c = âP/âÏ, therefore using Eq. 48 induces â c = k. Considering viscosity further decreases the maximum time step, see [Mon92] and [DC96] for details. Generally, the animation quality and accuracy increases with a higher number of particles. In [DC99], an adaptive framework is proposed where space and time resolutions are chosen automatically. Individual particles are reï¬ned where pressure differences are above a user-deï¬ned threshold. A reï¬ned particle pi with mass mi and volume mi /Ï0 is replaced by n particles with smaller volume and mass mi /n such that they occupy the same volume as pi . Considering the particles as spheres with radius proportional to their support radius, an individual support radius hi can be computed as hi = Î¾ 3 mi /Ï0 , where the constant Î¾ is chosen according to the desired average number of neighboring particles. Neighboring particles can be merged in stable areas where pressure is almost uniform. However, since a particle is isotropic, the neighboring particles should approximately
c The Eurographics Association 2005.

(48)

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

Figure 11: Highly plastic deformations and ductile fracture [PKAâ 05]. computing a body force which acts perpendicular to the interface of two liquids. The force is proportional to the curvature of the interface and the interface tension. Additionally, air particles are generated and deleted dynamically where air pockets are likely to be formed, making it possible to simulate trapped air. 4.3. Mesh Free Methods Interesting and fairly new approaches to deformable modeling are the so-called meshfree methods for the solution of partial differential equations, which originated in the FEM community approximately a decade ago ([NTVR92], [Suk03]). For an extensive and up-to-date classiï¬cation and overview of mesh-free methods, see [FM03], [Liu02] and also the excellent review paper [BKOâ 96]. A nice introduction to the element-free Galerkin method is given in [Ask97]. 4.3.1. Point-based Animations Recently, the combination of mesh-free physics with pointsampled surfaces [PZvBG00] in so-called point-based animations [pba04] have become popular. MÃ¼ller et al. introduced to the graphics community a mesh-free continuummechanics-based framework for the animation of elastic, plastic and melting objects [MKNâ 04]. Elastic body forces are derived via the strain energy density 1 U = (Îµ Â· Ï), (49) 2 where Îµ is the strain and Ï the stress tensor as described in Section 3.1. The elastic force per unit volume at a particle pi with material coordinates mi is computed using the directional derivative âui . For a Hookean material, i.e. Ï = E Â· Îµ (see Eq. 4), this yields 1 (50) fi = ââui U = â âui (Îµi Â· E Â· Îµi ) = âÏ Â· âui Îµi , 2 where Greenâs nonlinear strain tensor (see Eq. 1) is used for Îµi . For computing Îµi , the spatial derivatives of the displacement ï¬eld âui at mi is needed. To guarantee zero elastic forces for rigid body modes, the approximation of âui from the displacement vectors u j of the neighboring particles must be at least ï¬rst order accurate. Therefore, the Moving Least Squares method [LS81] with a linear basis is used which yields ï¬rst order accurate interpolation of point-sampled functions (contrary to the SPH approximation described in Section 4.2 which is not even zeroth-order accurate). For the following, we will only consider the xcomponent u of the displacement ï¬eld u = (u, v, w)T . The basic idea is to approximate a continuous scalar ï¬eld u(m) using a Taylor approximation. For particles p j close to a parË ticle pi we get a ï¬rst order approximation u j of the values u j as u j = ui + âu|mi Â· mi j , Ë (51)

where mi j = m j â mi and âu|mi = (u,x , u,y , u,z )T at mi . The index after the coma denotes a spatial derivative. The Ë weighted least-squares error ei of the approximation u j is given by Ë ei = â (u j â u j )2 wi j ,
j

(52)

where wi j is a normalized, continuously deï¬ned and monotonically decreasing weighting function. We want to ï¬nd the unknowns u,x , u,y and u,z such that the error e is minimized. Therefore, we set the derivatives of e with respect to u,x , u,y and u,z to zero, yielding three equations for the three unknowns
i â mi j mTj wi j j

âu|mi = â (u j â ui )mi j wi j .
j

(53)

Finally, we obtain the spatial derivatives of u(m) at mi as âu|mi = Aâ1

â(u j â ui )mi j wi j
j

,

(54)

where the inverse of A = â j mi j mTj wi j needs to be computed i only once per particle and can be used for computing the derivatives of v and w as well. With this approach, material properties ranging from stiff elastic to highly plastic can be simulated. In [KAGâ 05], the authors describe how to extend this range to viscous materials such as ï¬uids by merging the solid mechanics equation with the Navier-Stokes equations. Viscosity, pressure and surface tension forces are computed using SPH as described in Section 4.2 and added to the elastic force. Note that this allows the simulation of non-realistic materials such as elastic ï¬uids, similar to [GBO04]. The material properties such as stiffness, viscosity, plasticity and cohesion can be deï¬ned per particle. By coupling these properties to the temperature of a particle, local melting and freezing of objects can be achieved (Fig. 10). In the case of elastic materials which do not undergo
c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

any topological changes, the surface can be simply dragged along with the particles [MKNâ 04]. This is done by computing the displacement for each surface element (surfel) from the displacements of neighboring particles p j . The ï¬rst order approximation of âu at m j can be used to obtain a smooth displacement vector ï¬eld which is invariant under linear transformations: x(msi ) = msi + â Ï(msi , m j )(u j + âu|m j (m j â msi )),
j

range of materials can be fractured, from stiff elastic to highly plastic objects that exhibit brittle and/or ductile fracture. Collision detection of point-based models has been discussed for rigid [KZ04], quasi-rigid [PPG04] and deformable objects [KMHâ 04]. For rigid collision detection, a bounding sphere hierarchy is built with the surfels as leaves, which is suitable for time-critical collision detection [KZ04]. Pauly et. al [PPG04] compute a consistent contact surface and the traction distribution by solving a Linear Complementarity Problem (LCP). Collision response forces are computed from the local tractions and integration yields the total wrench that acts on the quasi-rigid bodies. Keiser et al. propose to decouple the collision handling and deformation to achieve stable and efï¬cient contact handling for deformable objects [KMHâ 04]. Collisions are detected using a high resolution surface sampled with surfels and a simple scheme is used to compute a consistent contact surface. A penalty force depending on its displacement onto the contact surface is computed for each surfel. These forces are then distributed to the neighboring particles where they are applied as external collision response forces in the next animation step. Wicke et al. propose a method for animating pointsampled thin shells [WSG05]. The geometric surface properties are approximated using splines (so-called ï¬bres) embedded in the surface. Physical effects such as plasticity and fracturing can be easily modeled. The authors also describe a skinning technique for point-sampled surfaces, with which a high-resolution surface can be animated using a sparse set of samples. 4.3.2. Meshless Deformations Based on Shape Matching MÃ¼ller et al. [MHTG05] propose a meshless method for animating deformable objects which does not ï¬t into any of the preceding categories. The nodes of a volumetric mesh are treated as point masses and animated as a simple particle system without connectivity. Then, at every time step, the original conï¬guration of the points (the rest state mesh) is ï¬tted to the actual point cloud in the least squares sense, using shape matching techniques for point clouds with correspondence. The ï¬tted rest shape yields goal positions for all point masses. Each point mass is then pulled towards its goal position while the displacement divided by the time step is added to the velocity of the point. This geometric integration scheme, although explicit, is shown to be unconditionally stable (Fig. 12).

(55) where msi and x(msi ) are the material and world coordinates of a surfel si , respectively, and Ï is a normalized weighting kernel. The deformation is computed and applied to both the center and the axes of a surfel. To adapt the sampling of the surface in case of stretching or compression, surfels can be split or merged similar to [PKKG03]. The animation of the physics particles combined with this surface skin allows the simulation of elastic and plastic materials of detailed models in real-time. Furthermore, Adams et al. [AKPâ 05] showed that the surface can be efï¬ciently raytraced by exploiting the deformation ï¬eld for bounding hierarchy updates. However, dragging the surface along with the particles fails if topological changes occur. In this case, an implicit representation can be used as discussed in the Section 4.2. In [MKNâ 04], this implicit representation is sampled with surfels. After an animation step the new position of the surfels is estimated using the displacement computation in Eq. 55. The deformed surfels are then projected onto the implicit surface. Finally, a resampling and relaxation scheme ensures that the surface is completely covered and uniformly sampled with surfels. In [KAGâ 05], the implicit representation is improved by applying energy potentials and geometric constraints which give better control over the surface. However, as the particle representation of the volume is usually much coarser than the surface representation, the implicit coating of the particles cannot represent ï¬ne detail of the surface. A possible solution is to use the explicit deformation approach of (55) for solids (with low temperature), the implicit representation for ï¬uids (with high temperature), and blend between the explicit and the implicit representation depending on the temperature for melting object parts. This way, surface detail smoothly fades out and the melting surface approaches the implicit representation. Freezing ï¬uids are handled analogously. The framework is extended in [PKAâ 05] to cope with fracturing (Fig. 11). Cracks are created at surfels where the main principal stress exceeds a threshold. The crack propagates in a plane perpendicular to the main principal stress, where the crack surface is dynamically sampled with surfels. Visibility tests detect neighboring particles, which are separated by a crack surface. A splitting, merging and termination operator handles the topological events which occur when cracks merge or branch. Furthermore, a resampling scheme adapts the particles resolution to handle small fractured object pieces. With the suggested methods a wide
c The Eurographics Association 2005.

Figure 12: Stability and the ability to recover from highly deformed or inverted conï¬gurations, shown in [MHTG05].

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

5. Reduced Deformation Models and Modal Analysis 5.1. Basic Formulation As described by James and Pai [JP04], given N undeformed point locations p = [p1 , . . . , pN ], a reduced deformation model approximates deformed point locations p by a linear superposition of M displacement ï¬elds (the columns Ui of U in Eq. 56). The amplitude of each displacement ï¬eld is given by the reduced coordinates q such that p = p + Uq, (56)

that M, C and K are normally symmetric positive deï¬nite). With g = Î¦T fext we can now express Eq. 59 as 3n independent scalar 2nd order differential equations Ë qi + (Î± + Î²Î»i )qi + Î»i qi = gi , Â¨ where Î»i is the i-th diagonal element of Î. With this decoupling, one can examine the eigenvalues, discard high frequency mode shapes, and thereby only use dominant modes (i.e. dominant columns Î¦i ). This can signiï¬cantly reduce computational cost. Furthermore, the motion components qi of the individual modes can now be computed independently and combined by linear superposition. In detail, each of these equations (60) has an analytical solution of the form qi = c1 er1 t + c2 er2 t , (61) (60)

as shown in Fig. 13. In [JP04] it is stated that the columns of U could arise from any possibly nonlinear black box process, such as an interpolation process, multiresolution modeling or nonlinear/linear modal analysis. The latter will be the focus of this section.

(a)

(b)

(c)

(d)

where the constants c1 and c2 depend on the initial condiË tions (qi and qi at a time t = t0 ), and the roots of the characteristic equation r2 + (Î± + Î²Î»i )r + Î»i = 0 are r1,2 = â(Î± + Î²Î»i ) Â± (Î± + Î²Î»i )2 â 4Î»i . 2 (62)

Figure 13: Reduced deformation models: (a) reference shape p, (b) displacement ï¬eld U1 , (c) displacement ï¬eld U2 , and (d) one possible deformed shape p = p + U1 + 0.5U2 . 5.2. Linear Modal Analysis Pentland and Williams [PW89] pioneered the use of reduced deformable models in Computer Graphics, using modal analysis. Given the mass, damping and stiffness matrices M, C and K, Eq. 20 can be decoupled into N = 3n linearly independent ordinary differential equations (ODEs) by solving the generalized eigenvalue problem MÎ¦Î = KÎ¦,
T T

The solution depends on the sign of R = (Î± + Î²Î»i )2 â 4Î»i : R > 0, R = 0 and R < 0 produces the overdamped (r1 , r2 real and different), critically damped (r1 , r2 real but repeated) and underdamped case (r1 , r2 are complex conjugates) respectively. If r1 , r2 are real then c1 , c2 are also real, if r1 , r2 are complex conjugate pairs then so will be c1 , c2 . In any case, qi in Eq. 61 will be a real value.

(57)

u

such that Î¦ MÎ¦ = I and Î¦ KÎ¦ = Î are diagonal matrices. The entries of Î contain the eigenvalues, and the columns of Î¦ = [Î¦1 Î¦2 . . . Î¦N ] contain the eigenvectors of Mâ1 K. Î¦ is often termed the modal matrix or modal displacement matrix, where the i-th column Î¦i represents the i-th mode shape, and the i-th entry of Î is proportional to the resonant frequency of the Î¦i . The columns of Î¦ form a basis (the modal basis, or eigenbasis) of 3n dimensional space, so any displacement u(t) = x(t) â x0 can be written as a linear combination of the columns u(t) = Î¦q(t). (58)

time

Figure 14: Underdamped (solid, blue) and critically damped (dashed, red) vibration. The black (dash-point) line is the plot of Â±eâ(Î±+Î²Î»i )t/2 . Most interest is given to the underdamped case, where damped oscillations occur, and for which Eq. 61 can be written as qi = eâ(Î±+Î²Î»i )t/2 (c1 cos Âµt + c2 sin Âµt), Âµ= 4Î»i â (Î± + Î²Î»i 2 )2 , (63) (64)

The vector q(t) contains the modal coordinates (or modal amplitudes). Substituting Eq. 58 into Eq. 20 and premultiplying by Î¦T yields Â¨ Ë Î¦T MÎ¦ q + Î¦T CÎ¦ q + Î¦T KÎ¦ q = Î¦T fext . (59) Note that for general damping, Î¦T CÎ¦ is dense, but if we assume proportional (Raleigh) damping C = Î±M + Î²K, then Î¦T CÎ¦ = Î±I + Î²Î is also diagonal (taking into consideration

see Fig. 14. This can be used to compute the response of a mode to an external force at some time t = t0 (see [HSO03]): ï¬rst, the generalized force fext must be transformed to modal
c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

Figure 16: Evolution of one mode shape in linear modal analysis (top row) and modal warping (bottom row). Image courtesy of Min Gyu Choi, Kwangwoon University. Figure 15: The ï¬rst four dominant low frequency mode shapes Î¦1 , . . . , Î¦4 of a constrained bar. The distortion inherent to linear modal analysis is most evident in the bottom right ï¬gure [BJ05]. coordinates by âtg = âtÎ¦T fext , and then c1 , c2 can be computed by substituting Eq. 63 into Eq. 60 and setting qi = 0 and qi = âtg [HSO03]. Naturally, the system of decoupled Ë ODEs (Eq. 60) can also be numerically integrated through time. 5.3. Applications and Other Reduced Models Interestingly, modal analysis was introduced to Computer Graphics in 1989, but only relatively few signiï¬cant contributions have been presented since then. The ï¬rst work of note is Stamâs application of modal analysis to the simulation of tree branches subjected to turbulence [Sta97]. James and Pai [JP02a] map runtime dynamics to graphics hardware: in a precomputation stage they build a so-called dynamic response texture (DyRT), where mode shapes Î¦i and other quantities are stored (see Fig. 15). At runtime, the modal coordinates q are computed from rigid bone transforms or external excitations. Finally, displacements are applied to the undeformed mesh by computing u = âi Î¦i qi for a few dominant low frequency modes using a vertex program running on graphics hardware. Whereas enforcing direct manipulation and collision constraints is relatively straightforward with node positions in Euclidean space, applying these in a modal basis can be somewhat unintuitive. Hauser et al. [HSO03] provide a solution, where generalized forces are computed for constrained nodes using the modal basis. Since the force computation involves evaluating a pseudoinverse using the singular value decomposition (SVD), only few constraints (up to ten in their examples) can be applied in a real-time simulation environment. Furthermore, they couple the deformable model with a rigid body reference frame and simulate dynamics, collisions and friction. In the above methods, a linear Cauchy strain model is
c The Eurographics Association 2005.

employed to obtain the stiffness matrix K, resulting in well known artifacts for large rotational deformations away from the rest shape (see Section 3.1 and Fig. 15). To suppress these artifacts, Choi and Ko [CK05] identify per-node rotations and extend the basic modal analysis formulation (Section 5.2) to accommodate these rotations, similar in spirit to the warped stiffness approach [MDMâ 02]. Although their modal warping procedure is not guaranteed to perform well for large deformations, their results show visually convincing improvements over the standard linear model (Fig.16). The decoupled ODEs are solved using semi-implicit numerical integration, instead of applying the analytical solution of Eq. 61. BarbiË and James [BJ05] take a different approach: inc stead of employing Cauchyâs linearized strain (Eq. 2) they use full quadratic Green strain (Eq. 1) throughout the entire computation, thereby necessitating the solution of a nonlinear version of Eq. 20 per time step. The otherwise computationally burdening implicit Newmark integration is greatly accelerated by carrying it out in reduced coordinates (also known as subspace integration), and thereafter performing the matrix multiplication of Eq. 56 in the fragment shader of current graphics hardware. For the generation of an appropriate reduced deformation basis U, which contains sufï¬cient nonlinear deformation, they provide a fully automatic method based on modal derivatives (Fig. 17), and also show how user-deï¬ned (force) sketches can assist a full unreduced ofï¬ine static solver in precomputing a suitable U. Note that due to the nonlinear coupling of modes, using independent harmonic oscillators as previously described (Eq. 61) does not sufï¬ce.

Figure 17: Using subspaces based on the ï¬rst few dominant vibration modes and their derivatives is sufï¬cient to describe large nonlinear deformations [BJ05].

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

Figure 18: A silver block catapulting some wooden blocks into an oncoming wall of water [CMT04]. A somewhat different model reduction strategy is devised by James and Fatahalian [JF03]: they entirely precompute collision, contact and dynamics (as well as co-parameterized global illumination) of deformable objects by limiting the range of interactions to a ï¬nite set of user impulses. The dynamic responses, termed impulse response functions (IRFs), each a chronological set of generalized deformation vectors, are dimensionality reduced using principal component analysis (PCA). At runtime, IRFs are blended based on user interaction. 6. Eulerian and Semi-Lagrangian Methods There are two general points of view we can take when describing an object that we wish to physically simulate. The main distinctions of the two view points is how they discretize an object in order to work with it numerically, and how they deï¬ne the boundary of the object itself. So far, this report has covered the Lagrangian point of view. As Section 2 explains, the Lagrangian point of view describes an object as a set of moving points (material coordinates) that travel around and change position over time; these points carry their material properties with them as they move through the world. Lagrangian techniques are a convenient way to deï¬ne an object as a connected mesh of points (Section 3) or simply a cloud of points (Section 4). The Eulerian point of view, on the other hand, looks at a stationary set of points and calculates how the material properties stored at those stationary grid points change over time. One of the drawbacks of changing to an Eulerian perspective is that the boundary of the object is no longer explicitly deï¬ned. This section covers Eulerian techniques as they are used in Computer Graphics, and focuses heavily on ï¬uids because ï¬uids are often deï¬ned in an Eulerian framework. This section will also explore how object boundaries are represented in the Eulerian framework. This section is not meant to give an exhaustive reference for Eulerian techniques; it is meant to give the reader an idea of what types of deformable and fuzzy objects have been simulated in an Eulerian framework. The Eulerian approach to ï¬uids was popularized by a series of papers by Foster and Metaxas [FM96], [FM97b], and [FM97a]. Their formulation solves the ï¬uid (Navier-Stokes) equations on a regular voxel grid and uses a ï¬nite difference formulation for all the differential equations. To understand the Eulerian framework, and how it differs from a Lagrangian one, we will look brieï¬y at how the NavierStokes equations (equations of motion for a ï¬uid) are formulated and solved for a single time step. We refer the reader to [Car04] for an in-depth discussion of liquids, and to [Sta03] for a practical implementation of a smoke simulator. There are two parts to the Navier-Stokes equations: âÂ·u = 0 ut = â(u Â· â)u + â Â· (Î½âu) â âp + f. (65) (66)

These two equations represent the conservation of mass and momentum for an incompressible ï¬uid. The vector ï¬eld ut is the time derivative of the ï¬uid velocity. The scalar pressure ï¬eld is pâ  , and Î½ is the kinematic viscosity. The vector ï¬eld f represents the body force per unit mass (usually just gravity). In this Eulerian formulation the quantities of the ï¬uid are stored in a grid of cells (a regular grid of cubes or voxels if you like). The velocity is stored on the cell faces and the pressure is stored at the center of the cells. This is commonly called a staggered (or MAC) grid. Notice that the position, x, of the ï¬uid is not deï¬ned; in this Eulerian frame work, the grid positions remain ï¬xed. Solving equations 65 and 66 is usually done in several steps (breaking up a PDE into simpler pieces and solving the pieces separately is known as operator splitting). The f term is simply scaled by the time step and added to the current velocity. The advection term, â(u Â· â)u, is then solved. One popular way to solve the advection term is with the semiLagrangian technique [Sta99] because it is stable for large time step sizes. The semi-Lagrangian technique continues as followsâto solve for the advection of any quantity through a velocity ï¬eld (in this case we are solving for the advection of the velocity ï¬eld through itself), the velocity at the grid point we wish to update is found, and a path is traced from the grid point backwards in time with that velocity to a new location.
â  In this formulation we assume a constant density and absorb it into the pressure term for simplicity.
c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

The quantity that we desire to update is then interpolated from the new location and that interpolated value is used as the updated quantity. It is interesting to note that if the time step is scaled so that the path traverses only a single cell, then the semi-Lagrangian technique is a ï¬rst order upwind technique. After advection, the viscosity term is solved. If the viscosity is expected to be large then an implicit technique should be used (see Section 2.2). At this point we have what can be called a best guess velocity: Ë u = u + ât[â(u Â· â)u + â Â· (Î½âu) + f], (67)

which does not take into account pressure or mass conservation (Eq. 65). The ï¬nal step, commonly called a pressureprojection, is in fact one of the reasons that Eulerian techniques are popular for ï¬uids. The trick of the pressureprojection step is to solve for a pressure such that subtracting that pressureâs gradient from the best guess velocity will give a ï¬nal velocity that conserves mass. So, we know two things: ï¬rst, the ï¬nal velocity, unew , must contain the pressure term which is missing from Eq. 67, so we add it back in to get Ë unew = u â âtâp. (68)

Figure 19: Melting bunny [CMVT02]. based on the velocity of the particle and a normal computed from the position of the other nearby particles. Foster and Metaxas also deï¬ne smoke as massless particles [FM97b]: they advect and diffuse an added temperature ï¬eld on the grid, and use that temperature to deï¬ne thermal buoyancy in the smoke to create turbulent motion. Stam [Sta99] uses a scalar density ï¬eld to deï¬ne quantities of smoke. These smoke densities are diffused on the grid and advected with the semi-Lagrangian technique (which Stam did not know about at the time, so when he published his seminal work he called the semi-Lagrangian technique the method of characteristics). Stam also adds buoyancy forces based on the local smoke density, and Fedkiw et al. [FSJ01] add a vorticity conï¬nement term to artiï¬cially increase small scale swirling motion which is lost when using semi-Lagrangian advection on coarse grids. Kim et al. [KLLR05] used the semi-Lagrangian technique with back and fourth error compensation and correction to keep both small and large scale swirling motion in the ï¬uid while maintaining stability. Their technique greatly reduces the dissipation present in the semi-Lagrangian technique, while maintaining its stability. Carlson et al. [CMVT02] add a temperature and variable viscosity ï¬eld to model solid objects that can melt into liquid (Fig. 19). In their model, a solid object is simply a ï¬uid with very high viscosity, and as the temperature rises the viscosity decreases, and the object melts into a liquid state. Like [FM96], the object in their simulation is deï¬ned by a set of massless particles, but instead of just rendering the particles they use a splatting technique to extract a mesh from the particles for rendering. Their method also animates the building of a sand castle, but only high viscosity is used to model the mud. More recently, Zhu and Bridson [ZB05] model sand as a

Second, we know the ï¬nal velocity has to conserve mass, so we plug Eq. 68 into Eq. 65 to get Ë â Â· unew = â Â· u â âtâ Â· (âp) = 0. Ë âtâ2 p = â Â· u (69)

Rearranging Eq. 69 gives us the following Poisson equation (70)

with which we must solve for p. We then plug p back into Eq. 68 to complete the pressure projection and ï¬nd our ï¬nal velocity. The ï¬nal velocity is incompressible (divergence free), and for a constant density ï¬uid this ensures mass conservation. Compressible ï¬uids can also conserve mass, but their density must change to do so (see [YOH00]). The system of equations formed by Eq. 70 is symmetric and positive deï¬nite (as long as there is at least one known Dirichlet boundary condition), and can be solved with a conjugate gradient method. Although the above explanation assumes a regular grid, it can also be carried out on an adaptively reï¬ned grid, such as an octree [SY02, LGF04]. In the rest of this section we will explore the numerous types of deformable objects that are modeled within an Eulerian framework. As the techniques are described we will also describe how the standard Navier-Stokes equations are changed in each case, and how the objects are represented. In the early work of Foster and Metaxas [FM96] liquid is displayed either as a height ï¬eld or a collection of massless particles. These massless particles are different from the material coordinate particles used in a Lagrangian simulation because they are passively moved in the velocity ï¬eld deï¬ned by the ï¬uid, and the particlesâ velocity is interpolated from the grid. Foster and Metaxas render liquid particles as smoothed ellipsoids [FM97a] with an orientation
c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

sion when discussing level sets and ï¬uids. Level sets are not used to solve the ï¬uid equations; they are used to deï¬ne the boundary of the ï¬uid (often called surface tracking), so that we know where to solve the ï¬uid equations. Another way to deï¬ne a ï¬uid surface is with an explicit polygonal mesh. A mesh representation not only allows a direct way to render the surface, but can also keep track of surface properties like texture coordinates. It can be difï¬cult to deal with topology changes, warping, and self intersection in a mesh if a single mesh is used. The contouring method described by Bargteil et al. [BGOS05] defeats these difï¬culties by re-deï¬ning a mesh each frame of the ï¬uid simulation. They also maintain a signed distance ï¬eld and show volume conservation on par with the particle level set method with octree reï¬nement.

Figure 20: Bunny made of sand [ZB05]. Image courtesy of Robert Bridson, UBC. continuum (ï¬uid) on an Eulerian grid (Fig. 20). They use a Lagrangian technique to move particles, then interpolate the velocity from the nearby particles on to the Eulerian grid. They then use the grid velocity to solve the pressure projection step. Thus, their technique combines the strengths of both the Lagrangian and Eulerian techniques. After solving the Navier-Stokes equations, they add in a model for sand. At each grid cell they identify the strain rate (Eq. 2) and use it to calculate stress forces in that cell. All connected groups of cells which can resist the inertia trying to make them slide have their velocity projected to rigid body motion. The velocity in all other cells get forces created by sliding frictional stress added to them. Their method also describes a way to build an implicit function from the particles for rendering. Carlson et al. [CMT04] project rigid bodies on an Eulerian grid to model their interaction with a ï¬uid (Fig. 18). A rigid body solver is run in tandem with a ï¬uid solver: at each frame, the rigid bodies that are in contact with ï¬uid are projected onto the ï¬uid, where their equations of motion are solved with a Navier-Stokes equation that is modiï¬ed with buoyancy and collision forces. After solving the ï¬uid equation they project the velocity in the rigid body cells to rigid body motion (effectively setting the strain rate to zero inside the cells that contain rigid bodies) and use that velocity for the next step of the rigid body solver. Foster and Fedkiw [FF01] were the ï¬rst in graphics to model the boundary of a ï¬uid as a level set. A level set, in this context, is an extra scalar ï¬eld, Ï, that stores the signed distance to the ï¬uid surface at each grid point. The change of Ï is computed each step with the level set equation, Ït + u Â· âÏ = 0, (71)

Figure 21: A dripping viscoelastic ï¬uid [GBO04]. Goktekin et al. [GBO04] animate viscoelastic substances (that display characteristics of both a liquid and a solid) by adding elastic terms to the basic Navier-Stokes equations (Fig. 21). The elastic terms are controlled by von Misesâs yield condition and a quasi-linear plasticity model. They keep track of a strain tensor ï¬eld that is advected throughout the ï¬uid grid, and its components are stored at edge centers (off-diagonal components) and cell centers (diagonal components). The surface of their ï¬uid is deï¬ned with a particle level set. Feldman et al. [FOK05] use an Eulerian grid based technique to model smoke, but they use an unstructured mesh, tetrahedra instead of cubes, near the boundary of complicated objects. Their hybrid mesh formulation allows them to model the boundary with curved or highly detailed objects in a more accurate fashion. In their paper they render smoke as a set of massless particles. 7. Conclusion Physically based deformable models have seen wide application in many ï¬elds of Computer Graphics, and research and development efforts are as active and fruitful as ever. As pointed out throughout this paper, no one model is suited best for any given application. Instead, many parameters and considerations need to be taken into account, such as model representations, the range of physical parameters, topological changes, realtime or interactive simulation, and so on.
c The Eurographics Association 2005.

which effectively updates the position of the iso-contour that delineates the ï¬uidâs surface. The level set method has become one of the most popular ways to deï¬ne a ï¬uidâs surface. It has the drawback of deï¬ning the surface only at Eulerian grid points, and thus rounding off high resolution details, but this drawback can be reduced by using the particle level set technique [EMF02], which patches the level set values with a group of particles that is passively advected with the surface. The level set can be directly ray traced with a root ï¬nder, or a mesh can be extracted from it with marching cubes. We would like to take note of a common confu-

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics

And even though such a seemingly exhaustive toolkit exists, with which very impressive results have been achieved, we still have quite a way to go until we can plausibly and interactively simulate the natural phenomena in our everyday lives. To quote Richard Feynman [FLS63] "The things with which we concern ourselves in science appear in myriad forms, and with a multitude of attributes. For example, if we stand on the shore and look at the sea, we see the water, the waves breaking, the foam, the sloshing motion of the water, the sound, the air, the winds and the clouds, the sun and the blue sky, and light; there is sand and there are rocks of various hardness and permanence, color and texture. There are animals and seaweed, hunger and disease, and the observer on the beach; there may be even happiness and thought. Any other spot in nature has a similar variety of things and inï¬uences. It is always as complicated as that, no matter where it is. Curiosity demands that we ask questions, that we try to put things together and try to understand this multitude of aspects as perhaps resulting from the action of a relatively small number of elemental things and forces acting in an inï¬nite variety of combinations." We think it is safe to say that this statement still holds, and probably will hold for years to come, a burden and a blessing alike to researchers in the ï¬eld. Yet even with the current methodology, the algorithms and models have seen somewhat limited application in production environments and video games. One reason for this is the lack of computational power: many of the presented techniques are inherently ofï¬ine, and can take hours or days to produce results. In the ï¬eld of interactive entertainment, small physically based deformable models are already being implemented, and thanks to developments such as the upcoming physics processing unit (PPU), this trend is likely to carry on. A second reason we see for a reluctancy to adopt these new methods is the limited control the users have over the resulting animations. Although this has been previously addressed, we see great potential in coupling more intuitive user interfaces with physically based simulations. Acknowledgements. We would like to thank the following people for their contributions, suggestions and general help in shaping and improving this paper: Bart Adams, Adam Bargteil, Robert Bridson, Min Gyu Choi, Nico Galoppo and Doug James.

[AP98]

A SCHER U., P ETZOLD L.: Computer Methods for Ordinary Differential Equations and Differential-Algebraic Equations. Society for Industrial & Applied Mathematics, 1998. 3 A SCHER U., RUUTH S., W ETTON B.: Implicit-explicit methods for timedependent pdeâs. SIAM J. Numer. Anal., 32 (1995), 797â823. 10 A SKES H.: Everything you always wanted to know about the Element-Free Galerkin method, and more. Tech. rep., TU Delft nr. 03.21.1.31.29, 1997. 14 B OXERMAN E., A SCHER U.: Decomposing cloth. In SCA â04: Proceedings of the 2004 ACM SIGGRAPH/Eurographics symposium on Computer animation (2004), pp. 153â161. 10 B OURGUIGNON D., C ANI M.-P.: Controlling anisotropy in mass-spring systems. In Computer Animation and Simulation â00 (2000), pp. 113â123. 8 BARGTEIL A. W., G OKTEKIN T. G., OâB RIEN J. F., S TRAIN J. A.: A semi-lagrangian contouring method for ï¬uid simulation. ACM Transactions on Graphics (in press) (2005). 20 B REEN D., H OUSE D., W OZNY M.: Predicting the drape of woven cloth using interacting particles. In SIGGRAPH â94 (1994), pp. 365â372. 7, 8
Ë BARBI C J., JAMES D. L.: Real-time subspace integration for St.VenantKirchhoff deformable models. ACM Transactions on Computer Graphics (ACM SIGGRAPH 2005) 24, 3 (2005). 17

[ARW95] [Ask97]

[BA04]

[BC00]

[BGOS05]

[BHW94] [BJ05]

[BK04] [BK05] [BKOâ 96]

B OTSCH M., KOBBELT L.: An intuitive framework for real-time freeform modeling. ACM Trans. Graph. 23, 3 (2004), 630â634. 2 B OTSCH M., KOBBELT L.: Real-time shape editing using radial basis functions. In Eurographics 2005, to appear (2005). 2 B ELYTSCHKO T., K RONGAUZ Y., O RGAN D., F LEMING M., K RYSL P.: Meshless methods: An overview and recent developments. Computer Methods in Applied Mechanics and Engineering 139, 3 (1996), 3â47. 14 B LINN J. F.: A generalization of algebraic surface drawing. ACM Trans. Graph. 1, 3 (1982), 235â256. 11 B ELYTSCHKO T., L IU W. K., M ORAN B.: Nonlinear Finite Elements for Continua and Structures. John Wiley & Sons Ltd., 2000. 2 B RIDSON R., M ARINO S., F EDKIW R.: Simulation of clothing with folds and wrinkles. In ACM SIGGRAPH/Eurographics Symposium Computer Animation (2003), pp. 28â36. 8, 9, 10 B RO -N IELSEN M., C OTIN S.: Real-time volumetric deformable models for surgery simulation using ï¬nite elements and condensation. Computer Graphics Forum 15, 3 (1996), 57â66. 5 B IANCHI G., S OLENTHALER B., S ZÃKELY G., H ARDERS M.: Simultaneous topology and stiffness identiï¬cation for mass-spring models based on fem reference deformations. In MICCAI (2) (2004), pp. 293â301. 8 B HAT K., T WIGG C., H ODGINS J. K., K HOSLA P., P OPOVIC Z., S EITZ S.: Estimating cloth simulation parameters from video. In ACM SIGGRAPH/Eurographics Symposium on Computer Animation (July 2003). 8 B ONET J., W OOD R. D.: Nonlinear continuum mechanics for ï¬nite element analysis. Cambridge Univ. Press, NY, 1997. 2 BARAFF D., W ITKIN A.: Large steps in cloth simulation. In Proceedings of SIGGRAPH 1998 (1998), pp. 43â54. 7, 8, 9, 10 B ELL N., YOU Y., M UCHA P. J.: Particle-based simulation of granular materials. ACM. to appear. 12 C ANI M.-P.: An implicit formulation for precise contact modeling between ï¬exible solids. In SIGGRAPH â93 (1993), pp. 313â320. 11, 12 C ARLSON M. T.: Rigid, Melting, and Flowing Fluid. PhD thesis, Georgia Institute of Technology, 2004. 18 C OTIN S., D ELINGETTE H., AYACHE N.: Real-time elastic deformations of soft tissues for surgery simulation. In IEEE Transactions on Visualization and Computer Graphics, vol. 5 (1). 1999, pp. 62â73. 5 C OTIN S., D ELINGETTE H., AYACHE N.: A hybrid elastic model allowing real-time cutting, deformations and force-feedback for surgery training and simulation. The Visual Computer 16, 8 (2000), 437â452. 5 C OVER S., E ZQUERRA N., OâB RIEN J., ROWE R., G ADACZ T., PALM E.: Interactively deformable models for surgery simulation. IEEE Computer Graphics and Applications 13, 6 (1993), 68â75. 5 C APELL S., G REEN S., C URLESS B., D UCHAMP T., P OPOVIC Z.: Interactive skeleton-driven dynamic deformations. In Proceedings of SIGGRAPH 2002 (2002), pp. 586â593. 5

[Bli82] [BLM00] [BMF03]

[BNC96]

[BSSH04]

[BTHâ 03]

[BW97] [BW98] [BYM05] [Can93] [Car04] [CDA99]

[CDA00]

[CEOâ 93]

References
[AKPâ 05] A DAMS B., K EISER R., PAULY M., G UIBAS L. J., G ROSS M., D UTRÃ P.: Efï¬cient raytracing of deforming point-sampled surfaces. In Proceedings of Eurographics (2005). To appear. 15 [CGCâ 02]

c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics
[CHP89] [Chu96] [CK02] [CK05] C HADWICK J., H AUMANN D., PARENT R.: Layered construction for deformable animated characters. In SIGGRAPH â89 (1989), pp. 243â252. 7 C HUNG T. J.: Applied Continuum Mechanics. Cambridge Univ. Press, NY, 1996. 2 C HOI K.-J., KO H.-S.: Stable but responsive cloth. In SIGGRAPH â02 (2002), pp. 604â611. 9, 10 C HOI M. G., KO H.-S.: Modal warping: Real-time simulation of large rotational deformation and manipulation. IEEE Transactions on Visualization and Computer Graphics 11, 1 (2005), 91â101. 17 C ARLSON M., M UCHA P. J., T URK G.: Rigid ï¬uid: Animating the interplay between rigid bodies and ï¬uid. ACM Transactions on Graphics 23, 3 (Aug. 2004), 377â384. 18, 20 C ARLSON M., M UCHA P., VAN H ORN III R. B., T URK G.: Melting and ï¬owing. In Proceedings of the 2002 ACM SIGGRAPH Symposium on Computer Animation (July 2002), pp. 167â174. 19 C OOK R. D.: Finite Element Modeling for Stress Analysis. John Wiley & Sons, NY, 1995. 2 C HEN Y., Z HU Q., K AUFMAN A., M URAKI S.: Physically-based animation of volumetric objects. In CA â98: Proceedings of the Computer Animation (1998), p. 154. 7 D ESBRUN M., C ANI M.-P.: Highly deformable material for animation and collision processing. In Fifth Eurographics Workshop on Animation, Simulation (septembre 1994). 11 D ESBRUN M., C ANI M.-P.: Animating soft substances with implicit surfaces. In Computer Graphics Proceedings (1995), ACM SIGGRAPH, pp. 287â290. 11 D ESBRUN M., C ANI M.-P.: Smoothed particles: A new paradigm for animating highly deformable bodies. In 6th Eurographics Workshop on Computer Animation and Simulation â96 (1996), pp. 61â76. 13 D ESBRUN M., C ANI M.-P.: Active implicit surface for animation. In Proceedings of Graphics Interface (1998), pp. 143â150. 13 D ESBRUN M., C ANI M.-P.: Space-Time Adaptive Simulation of Highly Deformable Substances. Tech. rep., INRIA Nr. 3829, 1999. 12, 13 D EBUNNE G., D ESBRUN M., BARR A., C ANI M.-P.: Interactive multiresolution animation of deformable models. In Eurographics Workshop on Computer Animation and Simulation â99 (1999), pp. 133â144. 5 D EBUNNE G., D ESBRUN M., C ANI M.-P., BARR A. H.: Adaptive simulation of soft bodies in real-time. In Computer Animation â00 (2000), pp. 15â20. 5 D EBUNNE G., D ESBRUN M., C ANI M.-P., BARR A.: Dynamic real-time deformations using space & time adaptive sampling. In Computer Graphics Proceedings (Aug. 2001), Annual Conference Series, ACM SIGGRAPH 2001, pp. 31â36. 4, 5 D ESBRUN M., S CHRÃDER P., BARR A. H.: Interactive animation of structured deformable objects. In Graphics Interface â99 (1999). 5, 10 E TZMUSS O., G ROSS J., S TRASSER W.: Deriving a particle system from continuum mechanics for the animation of deformable objects. IEEE Transactions on Visualization and Computer Graphics 9, 4 (2003), 538â550. 8 E TZMUSS O., K ECKEISEN M., S TRASSER W.: A fast ï¬nite element solution for cloth modelling. Proceedings of Paciï¬c Graphics 2003 (2003). 8 E NRIGHT D., M ARSCHNER S., F EDKIW R.: Animation and rendering of complex water surfaces. In SIGGRAPH â02 (2002), pp. 736â744. 20 E BERHARDT B., W EBER A., S TRASSER W.: A fast, ï¬exible, particlesystem model for cloth draping. IEEE Comput. Graph. Appl. 16, 5 (1996), 52â59. 9 F OSTER N., F EDKIW R.: Practical animation of liquids. In Proceedings of ACM SIGGRAPH 2001 (2001), pp. 23â30. 20 F EYNMAN R. P., L EIGHTON R. B., S ANDS M.: The Feynman Lectures on Physics: Volume I. Addison Wesley, 1963. 21 F OSTER N., M ETAXAS D.: Realistic animation of liquids. Graphical Models and Image Processing 58, 5 (1996), 471â483. 18, 19 F OSTER N., M ETAXAS D.: Controlling ï¬uid animation. In Proceedings CGI â97 (1997), pp. 178â188. Winner of the Androme Award 1997. 18, 19 [JP02b] [FM97b] F OSTER N., M ETAXAS D.: Modeling the motion of a hot, turbulent gas. In SIGGRAPH â97 (1997), pp. 181â188. 18, 19 [JBT04] [GKS02] [FM03] [FOK05] F RIES T.-P., M ATTHIES H. G.: Classiï¬cation and Overview of Meshfree Methods. Tech. rep., TU Brunswick, Germany Nr. 2003-03, 2003. 14 F ELDMAN B. E., OâB RIEN J. F., K LINGNER B. M.: Animating gases with hybrid meshes. In Proceedings of ACM SIGGRAPH 2005 (2005), p. (in press). 20 F OURNIER A., R EEVES W. T.: A simple model of ocean waves. In SIGGRAPH â86 (1986), pp. 75â84. 11 F EDKIW R., S TAM J., J ENSEN H. W.: Visual simulation of smoke. In SIGGRAPH â01 (2001), pp. 15â22. 19 G OKTEKIN T. G., BARGTEIL A. W., OâB RIEN J. F.: A method for animating viscoelastic ï¬uids. In Proc. of ACM SIGGRAPH (2004), vol. 23, pp. 463â468. 14, 20 G DOUTOS E. E.: Fracture Mechanics. Kluwer Academic Publishers, Netherlands, 1993. 2 G RINSPUN E., H IRANI A. N., D ESBRUN M., S CHRÃDER P.: Discrete shells. In Proceedings of the 2003 ACM SIGGRAPH/Eurographics Symposium on Computer animation (2003), pp. 62â67. 8 G RINSPUN E., K RYSL P., S CHRÃDER P.: CHARMS: A simple framework for adaptive simulation. In Proceedings of SIGGRAPH 2002 (2002), pp. 281â290. 5 G INGOLD R. A., M ONAGHAN J. J.: Smoothed particle hydrodynamics theory and application to non-spherical stars. Royal Astronomical Society, Monthly Notices 181 (1977), 375â389. 13 G IBSON S. F., M IRTICH B.: A survey of deformable models in computer graphics. Technical Report TR-97-19, MERL, Cambridge, MA, 1997. 1, 2 G OSS M. E.: Motion simulation: A real time particle system for display of ship wakes. IEEE Comput. Graph. Appl. 10, 3 (1990), 30â35. 11 G OURRET J.-P., T HALMANN N. M., T HALMANN D.: Simulation of object and human skin formations in a grasping task. In SIGGRAPH â89 (1989), pp. 21â30. 5 H OUSE D., B REEN D.: Cloth modeling and animation. A. K. Peters, Ltd., 2000. 2, 8 H AUTH M., E TZMUSS O., S TRASSER W.: Analysis of numerical methods for the simulation of deformable models. The Visual Computer (2002). Accepted for publication. 3, 9, 10 H ADAP S., M AGNENAT-T HALMANN N.: Modeling dynamic hair as continuum. In Eurographics Proceedings. Computer Graphics Forum (2001), vol. 20. 13 H UTCHINSON D., P RESTON M., H EWITT T.: Adaptive reï¬nement for mass/spring simulations. In Proceedings of the Eurographics workshop on Computer animation and simulation â96 (1996), pp. 31â45. 9 H AUSER K. K., S HEN C., OâB RIEN J. F.: Interactive deformation using modal analysis with constraints. In Graphics Interface â03 (2003). 16, 17 H UNTER P.: FEM/BEM Notes. University of Oakland, New Zealand, 2005. http://www.bioeng.auckland.ac.nz/cmiss/ fembemnotes/fembemnotes.pdf. 4, 6 I GARASHI T., M OSCOVICH T., H UGHES J. F.: As-rigid-as-possible shape manipulation. ACM Transactions on Graphics (ACM SIGGRAPH 2005) 24, 3 (2005). 2 I RVING G., T ERAN J., F EDKIW R.: Invertible ï¬nite elements for robust simulation of large deformation. In Proceedings of the 2004 ACM SIGGRAPH/Eurographics symposium on Computer animation (2004), pp. 131â140. 5
Ë JAMES D. L., BARBI C J., T WIGG C. D.: Squashing cubes: Automating deformable model construction for graphics. In Proceedings of the SIGGRAPH 2004 Conference on Sketches & Applications (2004). 6

[FR86] [FSJ01] [GBO04]

[CMT04]

[CMVT02]

[Gdo93] [GHDS03]

[Coo95] [CZKM98]

[DC94]

[GM77]

[DC95]

[GM97] [Gos90] [GTT89]

[DC96]

[DC98] [DC99] [DDBC99]

[HB00] [HES02]

[HMT01]

[DDCB00]

[HPH96]

[DDCB01]

[HSO03] [Hun05]

[DSB99] [EGS03]

[IMH05]

[EKS03]

[ITF04]

[EMF02] [EWS96]

[FF01] [FLS63] [FM96] [FM97a]

[JF03]

JAMES D. L., FATAHALIAN K.: Precomputing interactive dynamic deformable scenes. ACM Transactions on Graphics (Proceedings of ACM SIGGRAPH 2003) 22, 3 (2003), 879â887. 18 JAMES D. L., PAI D. K.: ArtDefo: accurate real time deformable objects. In SIGGRAPH â99 (1999), pp. 65â72. 6 JAMES D. L., PAI D. K.: DyRT: Dynamic response textures for real time deformation simulation with graphics hardware. In Proceedings of SIGGRAPH 2002 (2002). 17 JAMES D. L., PAI D. K.: Real time simulation of multizone elastokinematic models. In 2002 IEEE Intl. Conference on Robotics and Automation (2002). 6

[JP99] [JP02a]

c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics
[JP03] JAMES D. L., PAI D. K.: Multiresolution Greenâs function methods for interactive simulation of large-scale elastostatic objects. ACM Transactions on Graphics 22, 1 (2003), 47â82. 6 JAMES D. L., PAI D. K.: BD-Tree: Output-sensitive collision detection for reduced deformable models. ACM Transactions on Graphics (SIGGRAPH 2004) 23, 3 (Aug. 2004). 16 JAMES D. L., T WIGG C. D.: Skinning mesh animations. ACM Transactions on Graphics (SIGGRAPH 2005) 24, 3 (2005). 2 K EISER R., A DAMS B., G ASSER D., BAZZI P., D UTRÃ P., G ROSS M.: A uniï¬ed lagrangian approach to solid-ï¬uid animation. In Proceedings of the Eurographics Symposium on Point-Based Graphics (2005). To appear. 13, 14, 15 K ASS M.: An introduction to physically based modeling, chapter: Introduction to continuum dynamics for computer graphics. In SIGGRAPH 95 Course Notes (1995). 8 K AWABATA S.: The standardization and analysis of hand evaluation. The Textile Machinery Society of Japan (1980). 8 K ANG Y., C HOI J., C HO H., L EE D., PARK C.: Real-time animation technique for ï¬exible and thin objects. In WSCG 2000 (2000), pp. 322â 329. 10 KOCH R. M., G ROSS M. H., C ARLS F. R., VON B ÃREN D. F., FANKHAUSER G., PARISH Y. I. H.: Simulating facial surgery using ï¬nite element models. Computer Graphics 30, Annual Conference Series (1996), 421â428. 5 K RY P. G., JAMES D. L., PAI D. K.: Eigenskin: real time large deformation character skinning in hardware. In Proceedings of the 2002 ACM SIGGRAPH/Eurographics symposium on Computer animation (2002), pp. 153â159. 2 K IM B., L IU Y., L LAMAS I., ROSSIGNAC J.: Flowï¬xer: Using bfecc for ï¬uid simulation. (submitted). 19 K EISER R., M ÃLLER M., H EIDELBERGER B., T ESCHNER M., G ROSS M.: Contact handling for deformable point-based objects. In Proceedings of Vision, Modeling, Visualization VMVâ04 (Nov 2004), pp. 339â347. 15 K ASS M., W ITKIN A., T ERZOPOULOS D.: Snakes: active contour models. International Journal of Computer Vision 1, 4 (1988), 321â331. 13 K LEIN J., Z ACHMANN G.: Point cloud collision detection. In Proceedings of EUROGRAPHICS 2004 (2004), pp. 567â576. 15 L ASSETER J.: Principles of traditional animation applied to 3D computer animation. In SIGGRAPH â87 (1987), pp. 35â44. 1 L OSASSO F., G IBOU F., F EDKIW R.: Simulating water and smoke with an octree data structure. ACM Transactions on Graphics 23, 3 (Aug. 2004), 457â462. 19 L IU G. R.: Mesh-Free Methods. CRC Press, 2002. 14 L LAMAS I., K IM B., G ARGUS J., ROSSIGNAC J., S HAW C. D.: Twister: a space-warp operator for the two-handed editing of 3D shapes. ACM Trans. Graph. 22, 3 (2003), 663â668. 2 L IN M., OTADUY M.: Recent advances in haptic rendering and applications. Siggraph Course Notes (2005). 2 L OVE A.: A Treatise on the Mathematical Theory of Elasticity. Cambridge University Press, 1927. 2 L ANCASTER P., S ALKAUSKAS K.: Surfaces generated by moving least squares methods. Mathematics of Computation 87 (1981), 141â158. 14 L IPMAN Y., S ORKINE O., L EVIN D., C OHEN -O R D.: Linear rotationinvariant coordinates for meshes. ACM Transactions on Graphics (ACM SIGGRAPH 2005) 24, 3 (2005). 2 L UCY L. B.: A numerical approach to the testing of the ï¬ssion hypothesis. The Astronomical Journal 82, 12 (1977), 1013â1024. 13 L I L., VOLKOV V.: Cloth animation with adaptively reï¬ned meshes. In ACSC (2005), pp. 107â114. 9 M OLINO N., BAO Z., F EDKIW R.: A virtual node algorithm for changing mesh topology during simulation. ACM Trans. Graph. 23, 3 (2004), 385â 392. 6 M ÃLLER M., C HARYPAR D., G ROSS M.: Particle-based ï¬uid simulation for interactive applications. In Proceedings of the 2003 ACM SIGGRAPH/Eurographics Symposium on Computer animation (2003), pp. 154â159. 13 [OC97] [MTHK00] [MMDJ01] [MDMâ 02] M ÃLLER M., D ORSEY J., M C M ILLAN L., JAGNOW R., C UTLER B.: Stable real-time deformations. In Proceedings of the 2002 ACM SIGGRAPH/Eurographics symposium on Computer animation (2002), pp. 49â 54. 4, 5, 17 M ÃLLER M., G ROSS M.: Interactive virtual materials. In GI â04: Proceedings of Graphics Interface 2004 (2004), pp. 239â246. 5 M ÃLLER M., H EIDELBERGER B., T ESCHNER M., G ROSS M.: Meshless deformations based on shape matching. ACM Transactions on Computer Graphics (ACM SIGGRAPH 2005) 24, 3 (2005). 3, 15 M ILLER G. S. P.: The motion dynamics of snakes and worms. In SIGGRAPH â88 (1988), pp. 169â173. 8 M ILLIRON T., J ENSEN R. J., BARZEL R., F INKELSTEIN A.: A framework for geometric warps and deformations. ACM Trans. Graph. 21, 1 (2002), 20â51. 2 M ÃLLER M., K EISER R., N EALEN A., PAULY M., G ROSS M., A LEXA M.: Point based animation of elastic, plastic and melting objects. In Proceedings of the 2004 ACM SIGGRAPH/Eurographics symposium on Computer animation (2004), pp. 141â151. 14, 15 M ÃLLER M., M C M ILLAN L., D ORSEY J., JAGNOW R.: Real-time simulation of deformation and fracture of stiff materials. Proceedings of Eurographics Workshop on Animation and Simulation 2001 (2001). 5 M ONAGHAN J.: Smoothed particle hydrodynamics. Annu. Rev. Astron. Physics 30 (1992), 543. 12, 13 M ONAGHAN J. J.: Simulating free surface ï¬ows with SPH. J. Comput. Phys. 110, 2 (1994), 399â406. 13 M ÃLLER M., S OLENTHALER B., K EISER R., G ROSS M.: Particle-based ï¬uid-ï¬uid interaction. ACM. to appear. 12, 13 M ÃLLER M., S CHIRM S., T ESCHNER M., H EIDELBERGER B., G ROSS M.: Interaction of ï¬uids with deformable solids. In Computer Animation and Social Agents CASAâ04 (2004), pp. 159â171. 13

[JP04]

[MG04] [MHTG05]

[JT05] [KAGâ 05]

[Mil88] [MJBF02]

[Kas95]

[MKNâ 04]

[Kaw80] [KCCâ 00]

[KGCâ 96]

[Mon92] [Mon94] [MSKG05] [MSTâ 04]

[KJP02]

[KLLR05] [KMHâ 04]

[KWT88] [KZ04] [Las87] [LGF04]

[MTCKâ 04] M AGNENAT-T HALMANN N., C ORDIER F., K ECKEISEN M., K IMMERLE S., K LEIN R., M ESETH J.: Simulation of clothes for real-time applications. In Eurographics 2004, Tutorials 1: Simulation of Clothes for Real-time Applications (2004). 2 [MTG04] M ÃLLER M., T ESCHNER M., G ROSS M.: Physically-based simulation of objects represented by surface meshes. In Proceedings of Computer Graphics International (CGI) (Jun 2004), pp. 26â33. 6 M AGNENAT-T HALMANN N., H ADAP S., K ALRA P.: State of the art in hair simulation. In International Workshop on Human Modeling and Animation (June 2000), Korea Computer Graphics Society, pp. 3â9. 2 N EALEN A., S ORKINE O., A LEXA M., C OHEN -O R D.: A sketch-based interface for detail-preserving mesh editing. ACM Transactions on Computer Graphics (ACM SIGGRAPH 2005) 24, 3 (2005). 2 NAYROLES B., T OUZOT G., V ILLON P., R ICARD A.: Generalizing the ï¬nite element method: diffuse approximation and diffuse elements. Computational Mechanics 10, 5 (1992), 307â318. 14 OâB RIEN J. F., BARGTEIL A. W., H ODGINS J. K.: Graphical modeling and animation of ductile fracture. In Proceedings of SIGGRAPH 2002 (2002), pp. 291â294. 5 O PALACH A., C ANI M.: Local deformations for animation of implicit surfaces. In 13th Spring Conference on Computer Graphics (1997), StraÃer W., (Ed.), pp. 85â92. 12 OâB RIEN J. F., H ODGINS J. K.: Dynamic simulation of splashing ï¬uids. In CA â95: Proceedings of the Computer Animation (1995), p. 198. 11 OâB RIEN J. F., H ODGINS J. K.: Graphical modeling and animation of brittle fracture. In Proceedings of SIGGRAPH 1999 (1999), pp. 287â296. 4, 5 P LATT S. M., BADLER N. I.: Animating facial expressions. In SIGGRAPH â81 (1981), pp. 245â252. 7 Point based animation: Resource collection on the world wide web. http://www.pointbasedanimation.org, 2004. 14 P ICINBONO G., D ELINGETTE H., AYACHE N.: Real-time large displacement elasticity for surgery simulation: Non-linear tensor-mass model. Third International Conference on Medical Robotics, Imaging And Computer Assisted Surgery: MICCAI 2000 (Oct. 2000), 643â652. 5 P ICINBONO G., D ELINGETTE H., AYACHE N.: Nonlinear and anisotropic elastic soft tissue models for medical simulation. In Proceedings of the IEEE International Conference on Robotics and Automation (2001). 5

[NSACO05]

[Liu02] [LKGâ 03]

[NTVR92]

[OBH02]

[LO05] [Lov27] [LS81] [LSLCO05]

[OH95] [OH99]

[Luc77] [LV05] [MBF04]

[PB81] [pba04] [PDA00]

[MCG03]

[PDA01]

c The Eurographics Association 2005.

Nealen, MÃ¼ller, Keiser, Boxerman and Carlson / Physically Based Deformable Models in Computer Graphics
[Pea86] [PKAâ 05] P EACHEY D. R.: Modeling waves and surf. In SIGGRAPH â86 (1986), pp. 65â74. 11 PAULY M., K EISER R., A DAMS B., D UTRÃ P., G ROSS M., G UIBAS L. J.: Meshless animation of fracturing solids. In Proceedings of ACM Siggraph (2005). To appear. 14, 15 PAULY M., K EISER R., KOBBELT L. P., G ROSS M.: Shape modeling with point-sampled geometry. In Proceedings of ACM Siggraph (2003), pp. 641â650. 15 PAULY M., PAI D. K., G UIBAS L. J.: Quasi-rigid objects in contact. In Proceedings of the 2004 ACM SIGGRAPH/Eurographics symposium on Computer animation (2004), pp. 109â119. 15 [Ton91] [Pro95] [PTBâ 03] P ROVOT X.: Deformation constraints in a mass-spring model to describe rigid cloth behaviour. In Proc. Graphics Interface (1995), pp. 147â154. 9 [Ton92] P REMOZE S., TASDIZEN T., B IGLER J., L EFOHN A., W HITAKER R. T.: Particle-based simulation of ï¬uids. In Proceedings of Eurographics 2003 (2003), pp. 401â410. 13 P RESS W., T EUKOLSKY S., V ETTERLING W., F LANNERY B.: Numerical Recipes in C - The Art of Scientiï¬c Computing, 2nd ed. Cambridge University Press, 1992. 3 P ENTLAND A., W ILLIAMS J.: Good vibrations: Modal dynamics for graphics and animation. Compter Graphics (Proceedings of SIGGRAPH 1989) 23, 3 (1989), 215â222. 16 P FISTER H., Z WICKER M., VAN BAAR J., G ROSS M.: Surfels: Surface elements as rendering primitives. In Siggraph 2000, Computer Graphics Proceedings (2000), pp. 335â342. 14 R EEVES W. T.: Particle systems â a technique for modeling a class of fuzzy objects. ACM Trans. Graph. 2, 2 (1983), 91â108. 10 R EYNOLDS C. W.: Flocks, herds and schools: A distributed behavioral model. In SIGGRAPH â87 (1987), pp. 25â34. 10 S TORA D., AGLIATI P.-O., C ANI M.-P., N EYRET F., G ASCUEL J.D.: Animating lava ï¬ows. In Proceedings of Graphics Interface (1999), pp. 203â210. 13 S AGAR M. A., B ULLIVANT D., M ALLINSON G. D., H UNTER P. J.: A virtual environment and model of the eye for surgical simulation. In SIGGRAPH â94 (1994), pp. 205â212. 5 S EDERBERG T. W., C ARDON D. L., F INNIGAN G. T., N ORTH N. S., Z HENG J., LYCHE T.: T-spline simpliï¬cation and local reï¬nement. ACM Trans. Graph. 23, 3 (2004), 276â283. 2 S TAM J., F IUME E.: Depicting ï¬re and other gaseous phenomena using diffusion processes. In SIGGRAPH â95 (1995), pp. 129â136. 13 S IMS K.: Particle animation and rendering using data parallel computation. In SIGGRAPH â90 (1990), pp. 405â413. 11 S ORKINE O., L IPMAN Y., C OHEN -O R D., A LEXA M., RÃSSL C., S EI DEL H.-P.: Laplacian surface editing. In Proceedings of the Eurographics/ACM SIGGRAPH Symposium on Geometry processing (2004), pp. 179â 188. 2 S ZELISKI R., T ONNESEN D.: Surface modeling with oriented particle systems. Computer Graphics 26, 2 (1992), 185â194. 12 S TAM J.: Stochastic dynamics: Simulating the effects of turbulence on ï¬exible structures. Computer Graphics Forum 16, 3 (1997), 159â164. 17 S TAM J.: Stable ï¬uids. In SIGGRAPH â99 (1999), pp. 121â128. 18, 19 S TAM J.: Real-time ï¬uid dynamics for games. In Proceedings of the Game Developer Conference (March 2003). 18 S UKUMAR N.: Meshless methods and partition of unity ï¬nite elements. In of the Sixth International ESAFORM Conference on Material Forming (2003), pp. 603â606. 14 S MITH J., W ITKIN A., BARAFF D.: Fast and controllable simulation of the shattering of brittle objects. In Graphics Interface (May 2000). 5 S HI L., Y U Y.: Visual Smoke Simulation with Adaptive Octree Reï¬nement. Tech. Rep. UIUCDCS-R-2002-2311, University of Illinois at UrbanaChampaign, Dec. 2002. 19 S EDERBERG T. W., Z HENG J., BAKENOV A., NASRI A.: T-splines and t-nurccs. ACM Trans. Graph. 22, 3 (2003), 477â484. 2 T ERAN J., B LEMKER S., H ING V. N. T., F EDKIW R.: Finite volume methods for the simulation of skeletal muscle. In Eurographics/SIGGRAPH Symposium on Computer Animation (2003). 6 [ZB05] [WSG05] [TW90] [Ton98] [TF88] T ERZOPOULOS D., F LEISCHER K.: Modeling inelastic deformation: viscolelasticity, plasticity, fracture. In SIGGRAPH â88 (1988), pp. 269â278. 6 T ESCHNER M., H EIDELBERGER B., M ÃLLER M., G ROSS M.: A versatile and robust model for geometrically complex deformable solids. In Proceedings of Computer Graphics International (CGI) (Jun 2004), pp. 312â319. 5, 7, 8 T ESCHNER M., K IMMERLE S., H EIDELBERGER B., Z ACHMANN G., R AGHUPATHI L., F UHRMANN A., C ANI M.-P., FAURE F., M AGNETATT HALMANN N., S TRASSER W., VOLINO P.: Collision detection for deformable objects. Computer Graphics Forum 24, 1 (2005), 61â81. 2 T ONNESEN D.: Modeling liquids and solids using thermal particles. In Graphics Interface (June 1991), pp. 255â262. 11 T ONNESEN D.: Spatially coupled particle systems. 4.1 â 4.21. 11 T ONNESEN D.: Dynamically Coupled Particle Systems for Geometric Modeling, Reconstruction, and Animation. PhD thesis, University of Toronto, November 1998. 11, 12 T ERZOPOULOS D., P LATT J., BARR A., F LEISCHER K.: Elastically deformable models. In SIGGRAPH â87 (1987), pp. 205â214. 1, 6 T ERZOPOULOS D., P LATT J., F LEISCHER K.: Heating and melting deformable models (from goop to glop). In Graphics Interface â89 (1989), pp. 219â226. 8 T U X., T ERZOPOULOS D.: Artiï¬cial ï¬shes: physics, locomotion, perception, behavior. In SIGGRAPH â94 (1994), pp. 43â50. 8 T ERZOPOULOS D., W ITKIN A.: Physically based models with rigid and deformable components. IEEE Computer Graphics and Applications 8, 6 (1988), 41â51. 6 T ERZOPOULOS D., WATERS K.: Physically-based facial modeling, analysis, and animation. Journal of Visualization and Computer Animation 1, 1 (1990), 73â80. 7 V ILLARD J., B OROUCHAKI H.: Adaptive meshing for cloth animation. In 11th International Meshing Roundtable (Ithaca, New York, USA, 15â18 September 2002), Sandia National Laboratories, pp. 243â252. 9 VOLINO P., M AGNENAT-T HALMANN N.: Developing simulation techniques for an interactive clothing system. In Proceedings of the 1997 International Conference on Virtual Systems and MultiMedia (1997), p. 109. 8 VOLINO P., M AGNENAT-T HALMANN N.: Implementing fast cloth simulation with collision response. IEEE Computer Society (2000), 257â268. 10 VOLINO P., M AGNENAT-T HALMANN N.: Animating complex hairstyles in real-time. In VRST (November 2004). 2 WATERS K.: A muscle model for animation three-dimensional facial expression. In SIGGRAPH â87 (1987), pp. 17â24. 7 W ITKIN A., BARAFF D.: Physically based modeling: Principles and practice. Siggraph Course Notes (1995, 1997). 2 W U X., D OWNES M. S., G OKTEKIN T., T ENDICK F.: Adaptive nonlinear ï¬nite elements for deformable body simulation using dynamic progressive meshes. Eurographics (Sept. 2001), 349â358. 5 WANG X. C., P HILLIPS C.: Multi-weight enveloping: least-squares approximation techniques for skin animation. In Proceedings of the 2002 ACM SIGGRAPH/Eurographics symposium on Computer animation (2002), pp. 129â138. 2 W ICKE M., S TEINEMANN D., G ROSS M.: Efï¬cient animation of pointbased thin shells. In Proceedings of Eurographics â05 (2005), p. to appear. 15 WATERS K., T ERZOPOULOS D.: Modeling and animating faces using scanned data. Journal of Visualization and Computer Animation 2, 2 (1991), 123â128. 7 Y NGVE G. D., OâB RIEN J. F., H ODGINS J. K.: Animating explosions. In Proc. of SIGGRAPH (2000), Computer Graphics Proceedings, Annual Conference Series, pp. 29â36. 19 Y U Y., Z HOU K., X U D., S HI X., BAO H., G UO B., S HUM H.-Y.: Mesh editing with poisson-based gradient ï¬eld manipulation. ACM Trans. Graph. 23, 3 (2004), 644â651. 2 Z HU Y., B RIDSON R.: Animating sand as a ï¬uid. ACM Transactions on Graphics (Proc. of ACM SIGGRAPH 2005) (in press) (2005). 19, 20

[THMG04]

[PKKG03]

[TKHâ 05]

[PPG04]

[PTVF92]

[TPBF87] [TPF89]

[PW89]

[PZvBG00]

[TT94] [TW88]

[Ree83] [Rey87] [SACâ 99]

[VB02]

[SBMH94]

[VMT97]

[SCFâ 04]

[VMT00]

[SF95] [Sim90] [SLCOâ 04]

[VMT04] [Wat87] [WB97] [WDGT01]

[ST92] [Sta97] [Sta99] [Sta03] [Suk03]

[WP02]

[WT91]

[SWB00] [SY02]

[YOH00]

[YZXâ 04]

[SZBN03] [TBHF03]

c The Eurographics Association 2005.

