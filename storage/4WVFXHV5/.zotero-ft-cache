Cost-effective Printing of 3D Objects with Skin-Frame Structures
Weiming Wangâ ,â¡ Tuanfeng Y. Wangâ  Zhouwang Yangâ â Ligang Liuâ  Xin TongÂ§ Weihua Tongâ  Jiansong Dengâ  Falai Chenâ  Xiuping Liuâ¡ â  University of Science and Technology of China â¡ Dalian University of Technology Â§ Microsoft Research Asia

(a)

(b)

(c)

(d)

Figure 1: Given an input Horse model (a), our method generates a skin-frame structure (b), which is approximate to the model, to minimize the cost of material used in printing it. The frame structure is designed to meet various constraints by an optimization scheme. In (b) we remove the front part of the skin in order to show the internal structure of frame. (c) is the photo of an printed model by removing part of its skin to see the internal struts. (d) is the photo of the printed model generated by our method. A small red drawing pin is put under the object as a size reference in (c) and (d) respectively. The material usage in (d) is only 15.0% of that of a solid object.

Abstract
3D printers have become popular in recent years and enable fabrication of custom objects for home users. However, the cost of the material used in printing remains high. In this paper, we present an automatic solution to design a skin-frame structure for the purpose of reducing the material cost in printing a given 3D object. The frame structure is designed by an optimization scheme which signiï¬cantly reduces material volume and is guaranteed to be physically stable, geometrically approximate, and printable. Furthermore, the number of struts is minimized by solving an 0 sparsity optimization. We formulate it as a multi-objective programming problem and an iterative extension of the preemptive algorithm is developed to ï¬nd a compromise solution. We demonstrate the applicability and practicability of our solution by printing various objects using both powder-type and extrusion-type 3D printers. Our method is shown to be more cost-effective than previous works. CR Categories: I.3.5 [Computer Graphics]: Computational Geometry and Object Modeling; I.3.8 [Computer Graphics]: Applications; Keywords: 3D printing, fabrication, frame structure, sparsity optimization Links: DL PDF
author: yangzw@ustc.edu.cn (Zhouwang Yang)

1

Introduction

Additive manufacturing (3D printing) enables fabrication of physical objects from digital models where the printed objects are created by laying down successive layers of material [3DSystems 2012; Shapeways 2012]. During the last few years, research on computational techniques of 3D printing has received considerable attention for assisting users to generate desired manufacturable objects [Stava et al. 2012; Luo et al. 2012; Chen et al. 2013; PrÂ´ vost et al. e 2013]. However, reducing the material used in printing, which is an important problem due to its high cost, has not been well studied. The straightforward approach used in commercial printer packages [Shapeways 2012] is to uniformly hollow the 3D object by extruding the outer surface and creating a scaled-down version on its inside. The user has to choose a scaling factor (thickness of object) based on experience. A large factor may lead to material waste while a small factor could cause structural stability problem. Thus it is technically nontrivial for the hollowing method to simultaneously match the goals of saving material and maintaining physical stability in 3D printing.

â Corresponding

ACM Reference Format Wang, W., Wang, T., Yang, Z., Liu, L., Tong, X., Tong, W., Deng, J., Chen, F., Liu, X. 2013. Cost-effective Printing of 3D Objects with Skin-Frame Structures. ACM Trans. Graph. 32, 6, Article 177 (November 2013), 10 pages. DOI = 10.1145/2508363.2508382 http://doi.acm.org/10.1145/2508363.2508382. Copyright Notice Permission to make digital or hard copies of all or part of this work for personal or classroom use is granted without fee provided that copies are not made or distributed for proï¬t or commercial advantage and that copies bear this notice and the full citation on the ï¬rst page. Copyrights for components of this work owned by others than ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or republish, to post on servers or to redistribute to lists, requires prior speciï¬c permission and/or a fee. Request permissions from permissions@acm.org. Copyright Â© ACM 0730-0301/13/11-ART177 $15.00. DOI: http://doi.acm.org/10.1145/2508363.2508382

Figure 2: Common frame structures used in architecture. In this paper, we present an automatic method to minimize material cost of the object in 3D fabrication. The key idea is to âhollowâ the object by creating a lightweight frame structure (see Figure 2), made of a mesh of nodes and thin cylindrical struts with large voids among them inside the object (see Figure 1 (b)). Frame structures beneï¬t 3D printing in two aspects. First, the mass of object could
ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

177:2

â¢

W. Wang et al.

be signiï¬cantly reduced through the use of frame structures while maintaining its strength and stiffness [Gibson and Ashby 1999]. Second, frame structures provide sufï¬cient ï¬exibility and variability, which make them possible to meet a variety of constraints in 3D printing. We develop an optimization scheme to minimize the frame volume subject to various constraints such as stiffness, stability, geometrical approximation, self-balance, and printability. In order to eliminate redundant struts with negligible inï¬uence on the whole frame, the frame is also expected to have simple topology structure with minimal number of struts. The basic combinatorial nature of topology design, i.e., ï¬nding the optimal set of frame struts, which remains in structural optimization problems, has been proved to be NP-hard. Heuristic approaches such as genetic algorithms [Rajeev and Krishnamoorthy 1997] have been applied for structural optimization problems with stress and buckling constraints. However, these fairly general approaches are restricted to fairly small scale problems and are not suitable for 3D printing. Different from previous approaches, we convert the minimization of the number of struts (structure redundancy) into an 0 sparsity optimization of the radius vector of struts, which can be approximately solved by a reweighted 1 -norm optimization. Also we cannot expect to ï¬nd the globally optimal solution of achieving minimal frame volume and minimal strut number simultaneously. To this end, we formulate the problem as a multi-objective programming problem subject to a variety of constraints, and develop an iterative extension of the preemptive algorithm to ï¬nd a compromise solution. The algorithm starts by minimizing frame volume and then optimizes structure redundancy without increasing the frame volume. The above two optimizations are iterated until the volume of frame does not decrease. The frame structure generated by our algorithm is guaranteed to be physically stable, geometrically approximate, and printable (see Figure 1 (d)), which is cost-effective for printing. We have applied our algorithm on a variety of different models and successfully printed them using both powder-type printer and extrusiontype printer. The results show that our algorithm reduces material around 70% (from 66.3% to 92.1% in our experiments) with respect to the solid printing and achieves much better cost-effectiveness ratios than previous works.
Contributions

on ï¬nite element analysis of stress, the approach of [Stava et al. 2012] can strengthen printed objects by hollowing, local thickening, and adding extra struts. Different from the goal of our work, it does not always reduce the volume of printing material. Hollowing the objects is the most straightforward scheme to reduce material usage, and has been adopted in commercial printing packages [Shapeways 2012]. The hollowing method is simply to hollow an object and possibly to ï¬ll its interior with pre-deï¬ned lattices to enhance strength. The size and density of the lattices and the thickness of skin surface are heuristically chosen by users and is far from optimal on saving material in printing. Using lightweight structures for improving the strength and stiffness of objects has been studied in the ï¬eld of rapid manufacturing [Wang et al. 2005; Rosen et al. 2006], where the particle swarm optimization or generic algorithms were selected to search for design solutions. Patterned structures can also be mapped or synthesized into the interior of hollowed objects [Wang and Rosen 2002; Chen 2007]. However, the synthesized structures might not well adapt to high stress and there is no guarantee to obtain physically stable structures. So far these methods cannot simultaneously achieve the goals of saving material and maintaining physical stability and shape retention in 3D printing.
Patterned structure synthesis

In the ï¬eld of structural engineering, truss structures are ï¬exible and broadly used for structural optimization. Detailed reviews on various aspects of structural optimization can be found in the literature [Kirsch 1989; BendsÃ¸e and Sigmund 2003]. Structural size optimization, geometry optimization, and topology optimization are generally viewed as three different stages of structural optimization research. Using duality principles and non-smooth analysis, structural optimization problems with ï¬xed nodal positions can be reformulated as minmax (saddle point) problems. Then the multilevel approach was constructed to solve the min-max problems by treating the topology optimization as the inner problem [BendsÃ¸e et al. 1994]. Due to difference in the types of objectives and constraints, the approach cannot be applied to our optimization problem in 3D printing.
Truss structure design and optimization

Our contributions are summarized as follows.

â¢ We propose a novel approach for automatically generating a skin-frame structure to minimize material usage in 3D printing, taking into account structural stability, geometrical approximation, self-balance, and printability of the object. â¢ An 0 sparsity optimization is adopted to remove redundant struts with negligible inï¬uence on the whole frame. â¢ We formulate the problem of minimizing the frame volume and the structural redundancy as a multi-objective programming problem and develop an iterative extension of the preemptive algorithm to ï¬nd a compromise solution.

For structural optimization problems with complicated constraints, either approximate formulations or heuristic approaches (such as random search-based algorithms and branch-bound techniques) have been applied [Cheng 1995; Rajeev and Krishnamoorthy 1997; BendsÃ¸e and Sigmund 2003]. An optimization method has been presented in [Smith et al. 2002] for designing truss structures of macro-architectures, such as bridges, towers, roof supports and building exoskeletons. Based on a mode of failure (i.e., buckling), their method considers the truss as a set of beams connected by pin joints, where the beams are rotation-free and exert axial forces only. It cannot guarantee geometrical approximation, which is very important for 3D printed objects, because there is no variable to characterize the deformations of beams in their method. On the contrary, our proposed method is based on the elastic property of solid materials and takes into account the deformations of struts and shear stress as well as axial stress.

2

Related Work

3

Problem and Formulation

With 3D printers being more accessible to everyday users due to their rapid drop in price, more and more attention has been paid to fabrication techniques and applications. Quite a few topics in 3D fabrication, including structural analysis [Stava et al. 2012; Zhou et al. 2013], segmentation [Luo et al. 2012], articulated model generation [BÂ¨ cher a et al. 2012; Cal` et al. 2012], and balancing shape [PrÂ´ vost et al. Ä± e 2013], have been researched in computer graphics recently. Based
Geometry processing for 3D fabrication

Given an input mesh M , our goal is to generate a skinframe structure H to represent M such that the material cost used in printing H is as low as possible. The shape of H is expected to approximate M within a geometric error. Moreover, the design of H depends on the physical characteristics of the printing material including its tensile (or compression) strength Ï, shear strength Ï , tensile modulus Î³, shear modulus Âµ, and slenderness ratio Î±.
Problem

ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

Cost-effective Printing of 3D Objects with Skin-Frame Structures

â¢

177:3

di2 = vi2 â vi2 respectively, and the difference between them
e is de = di2 â di1 . Denote de = e e d2 e and deâ¥ = de â de as decomposition components of de along e and its orthogonal direction, respectively. Then the deformation of e should be within the ranges of axial stress and shear stress as: T

Figure 3: Illustration of the skin-frame structure. It consists of a thin skin (shown in orange) bounded by M and its offset M 1 with a distance of skin thickness hS and a frame composed of a set of nodes (shown in red spheres) and a set of struts (shown in blue cylinders).

de Î³ e deâ¥ Âµ e

Ï, e â E, Ï, e â E.

(2) (3)

Note that rotation and bending stress is weak and can be negligible. The deformations of nodes D = {di } are auxiliary variables in our optimization as they are coupled with the primary variables r.

The skin-frame structure H consists of a thin skin S and a frame structure T , as shown in Figure 3. S is a thin layer between M and its offset M 1 with a distance of skin thickness hS . T is created within the volume enclosed by M 1 . T is composed of a set of frame nodes V = {vi , i = 1, 2, Â· Â· Â· , |V |} which are located on M 1 and in the volume enclosed by M 1 , and a set of frame struts E = {ej , j = 1, 2, Â· Â· Â· , |E|} which are the edges connecting the nodes. Each node represents a geometric position and each strut ej â E is a cylindrical shape with radius rj and length lj . T can be seen as a graph of V and E with the geometry deï¬ning node positions and strut radii, and the topology deï¬ning the connectivity between nodes. To make it manufacturable by the printer, the strut radius should be no less than the minimum manufacturable size Î·. As we will see in Section 4, the set of skin nodes Vskin and the set of skin struts Eskin are ï¬xed in order to sustain the physical properties of the model surface, while the set of internal nodes Vint = V â Vskin and the set of internal struts Eint = E â Eskin will be set as variables in the optimizations.
Skin-frame structure

Compressive forces can cause a beam to bend out of shape and ultimately fail, which is known as Euler buckling (see the ï¬gure in the right). The struts are subject to buckling constraints according to rj lj /Î±, ej â Eskin , (4)
Buckling

and rj lj /Î±, ej â Eint , (5) where Î± is the slenderness ratio.

3.2

Other constraints

Other than the mechanism constraints on the frame, we have to consider other constraints to make the frame structure physically stable, geometrically approximate, and printable. The frame used in 3D printing is required to geometrically approximate the shape of input object. Thus the frame structure should not be deformed excessively to avoid apparent visual alteration, that is
Geometrical approximation

3.1

Mechanics analysis of frame structure

The mechanics of frame structures has been studied based on beam theory [Hughes 1987; Gibson and Ashby 1999] where frame struts are assumed to behave like simple beams under linear deformation. The ï¬nite element method (FEM) is used to derive the stiffness of the frame. The stiffness equation is given as:
Stiffness

di

,

i = 1, 2, Â· Â· Â· , |V |

(6)

K(V, r)D = F(r),

(1)

where is the geometric error. Note that the geometrical approximation is an extremely necessary constraint for 3D printing. Another geometric constraint function is âbarrierâ constraint, which keeps internal struts inside of the volume enclosed by M 1 . For each internal strut ej = vi1 vi2 â Eint , we let
Shape barrier

where V denotes geometric positions of the nodes V , K(V, r) is the stiffness matrix depending on nodal positions V and strut radii r, F(r) = {f1 , f2 , Â· Â· Â· , f|V | } are the (internal and external) forces acting on the nodes, and D = {d1 , d2 , Â· Â· Â· , d|V | } are the deformation quantities of the nodes caused by F(r). We consider the mass of the skin layer and the struts as the internal load in F by distributing the mass uniformly to their neighborhood nodes. External loads acting on the frame with any directions can be handled by adding the forces in F. For example, we can add forces in F to withstand external loads like a pinch grip. After the force F is speciï¬ed under a given load scenario, the deformations of nodes D can be solved from the linear system with some boundary conditions (e.g., ï¬xing one node and the z-axes of three other nodes). Because of elasticity, all struts are deformable when forces act on them. Considering a strut e = vi1 vi2 (see the ï¬gure on the right), it is deformed to e = vi1 vi2 . The displacements of two end nodes are di1 = vi1 â vi1 and
Elastic property

vi1 , vi2 â Cj

(7)

where Cj is the maximum convex region that contains ej but is enclosed by M 1 . This shape barrier constraint only needs to be considered in the geometry optimization where the positions of internal nodes are variables. To balance the printed object standing on a horizontal plane, the vertical projection Gproj of its gravity center G onto the plane should lie within the convex hull H of its contact points on the plane [PrÂ´ vost et al. 2013]. Thus we have the constraint e
Balance

Gproj â H,

(8)

which can be expressed as a group of linear inequalities on r (see more detail in the supplementary material).
ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

177:4

â¢

W. Wang et al.

To make the frame structure printable, the strut radiu should be no less than the minimum printable radius Î·. In addition, we also set upper bounds for strut radii. The struts on the skin should have a radius no larger than hS to avoid lying outside of the object surface M , i.e.,
Printability

4

Algorithm

Î·

rj

hS ,

ej â Eskin ,

(9)

and the radii of the internal struts can be set with a larger upper bound Î·, i.e., Î· rj Î·, ej â Eint . (10) All the constraints are categorized into two types: equalities (1) and inequalities. We denote the inequality constraints including (2), (3), (4), (6), (7), (8), and (9) as
Constraint categories

In the MOP optimization (14), the radii r and the positions Vint are continuous variables while the topology connections Eint are discrete variables. Theoretically, it is NP-hard to solve this kind of combinatorial (mixed integer) optimization problem. To ï¬nd a compromise solution, we develop an alternating goal algorithm. The algorithm starts by ordering the goals according to priority, and iteratively optimizes the model using one goal at a time such that the optimum value of a higher-priority goal is never degraded by a lower-priority goal.

4.1

Overview

c(r, V, D) â¤ 0.

(11)

The deformations of nodes D are auxiliary variables which are coupled with r in the constraints. Note that the constraints (5) and (10) are not included in (11) as these constraints will be relaxed during the topology optimization phase as we will see in Section 4.3.

3.3

Multi-objective programming formulation

An overview of our algorithm is shown in Figure 4. Given an input mesh (e.g., the Hanging Ball), we generate an initial frame with the radii of its struts obtained from the size optimization. Then the algorithm runs alternatingly the topology optimization and the geometry optimization until the frame volume does not decrease. The topology optimization eliminates the redundant struts by approximately solving an 0 sparsity optimization under the frame volume constraint. The geometry optimization reï¬nes the positions of internal nodes, the radii of struts, and, to some extent, the topology of a frame structure. Finally an optimized frame structure with minimum volume is obtained as the ï¬nal result. Algorithm 1 Our algorithm for frame optimization Input: a given 3D mesh Output: an optimized frame 1: Generate an initial frame presented in Section 4.2 while (the frame volume is reduced) 2: Call TopOpt (the topology optimization in Section 4.3) 3: Call GeoOpt (the geometry optimization in Section 4.4) endwhile

Frame volume As the skin layer S is solid, raising its thickness will signiï¬cantly increase the total volume. We thus ï¬x its thickness hS as the minimum printable size (i.e. hS = 2Î·) and do not consider it as a variable. Therefore our major goal is to minimize the volume of all frame struts
r,V,E

min Vol(r, V, E) =
ej âE

2 Ïrj lj ,

(12)

where V denotes geometric positions of the nodes V .

4.2
As the radius of each strut should not be less than the minimum manufacturable size Î·, too many struts might lead to large volume. The redundant struts in the structure should be eliminated to reduce the frame volume. Thus we have a minor goal of minimizing the number of struts in the frame
Structure redundancy

Frame initialization

Our optimization starts with an initial frame structure for which we need to determine the number of the frame nodes, their positions and connectivity, and the initial strut radii.
Determining the number of skin nodes The user is allowed to manually specify the number of frame nodes and uniformly sample the nodes on M 1 . However, it is difï¬cult to specify a reasonable number of nodes. Dense nodes may lead to material waste while sparse nodes may result in fragile triangles on the skin which might not withstand external loads like a pinch grip with two ï¬ngers [Stava et al. 2012].

min |E|.
E

(13)

A straightforward method is to formulate a single objective optimization with a weighted combination of the frame volume and the structure redundancy. However, it is very difï¬cult to construct an appropriate weight to trade off the two objectives. Instead we formulate a multi-objective programming (MOP) problem:
Multi-objective programming
r,Vint ,Eint

min s.t.

Vol(r, V, E)

&

|Eint |

(14a) (14b)

{ (1), (11), (5), (10)}

where the frame volume Vol(r, V, E) is the higher-priority goal and the number of internal struts |Eint | is the lower-priority goal. In our MOP formulation, the strut radii r, the positions of internal nodes Vint , and the topology connections Eint are decision variables, and the deformations D are auxiliary variables which are coupled with r in the constraints. The positions of skin nodes Vskin and the set of skin struts Eskin are ï¬xed rather than variables throughout the optimization process.

The number of nodes on M 1 (i.e., |Vskin |) is determined by considering the physical properties of the surface. Suppose we put a force f perpendicular to an equilateral triangle with edge length a on its center C by a human ï¬nger (see the ï¬gure on the right). Let b be the edge length of the equilateral triangle approximating the contact region of the ï¬nger. The displacement of C can be estimated (from the deï¬nition of shear stress) as f d â 3â(aâb) b . The deformation d is expected to be no larger than 3ÂµhS the upper bound of deformation Îµ to avoid apparent visual alterâ ation. Thus we have a 3 3ÂµhS b /f + b and set a as the upper bound. Then the number of sampling nodes on M 1 can be deterâ mined as |Vskin | = 4Area(M 1 )/( 3a2 ) assuming all triangles are equilateral. In our implementation, we set f = 10N (Newtons) and b = 10mm (millimeters).

ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

Cost-effective Printing of 3D Objects with Skin-Frame Structures

â¢
2.0

177:5

Input Model

Initialization

TopOpt

GeoOpt
1 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0 0 0.1 0.2 0.3 0.4

0.5

0.5

0.6

0.7

0.8

0.9

1

(a)

(b)

(c)

(d)

Figure 4: Overview of our algorithm. Given an input model (a), an initial frame structure (b) is generated. Our algorithm runs alternatingly the topology optimization (c) and the geometry optimization (d). The struts in (b), (c), and (d) are shown with color visualizations of their radii. Note that the frame in (c) is much sparser than that in (b). The frame volumes of (b) and (d) are 3.790e4 and 2.875e4 mm3 respectively. The saving ratio of the frame volume is about 24%. In this example, an external force of 5N is loaded vertically downside on top of the model.

A stress map can be computed on the solid volume enclosed by M 1 based on the ï¬nite element method (FEM). We adaptively sample |Vskin | nodes on M 1 according to the density map [Yan et al. 2009] given by the computed stress values on the surface. In addition, a user-speciï¬ed number of internal nodes are evenly sampled in the solid volume enclosed by M 1 . Finally, the frame structure T is generated by connecting the sampling nodes via the ANN algorithm [Arya et al. 1998]. Note that there are few requirements on the generation of T , because redundant struts in T will be automatically eliminated by the topology optimization (see Section 4.3). The struts might lie outside of the shape at very concave regions. We perform local subdivision by adding nodes and struts adaptively to resolve this.
Node sampling and their connectivity

radius bound (10) for each internal strut by a looser constraint rj â [0, Î·] , ej â Eint (16)

where rj = 0 means that the corresponding strut ej vanishes. Then we present the 0 sparsity optimization (TopOpt in short) as: min
r

|Eint | = rint

0

s.t.

(1), (11), (16), and Vol(r)

Vol

(17)

We then determine the initial radii of struts by the following size optimization (SizeOpt in short):
Size optimization

where the 0 -norm means the number of non-zero elements of r and Vol = Vol(Ë, V, E) is the frame volume obtained in the size r optimization. The goal of reducing Eint holds a lower priority in our multi-objective programming. To prevent degrading the higherpriority goal (i.e, minimizing the frame volume), we are required to add a volume constraint Vol(r, V, E) Vol when optimizing the lower-priority goal. Beyond conceptual issues of uniqueness and veriï¬cation of solutions, one is easily overwhelmed by the apparent difï¬culty of solving (17) due to the discrete and discontinuous nature of the 0 -norm, and the standard convex analysis theories which underpin the analysis of differentiable optimization problems do not apply. This is a classical problem of combinatorial search: one sweeps exhaustively through all possible sparse subsets and checks whether the constraints can be satisï¬ed. The complexity of exhaustive search is exponential in the scale of problem and, indeed, it has been proved that the combinatorial search problem is NP-hard. However, some useful techniques, i.e., a convex relaxation and reweighting strategy, can be incorporated in our algorithm. We present a reweighted 1 minimization procedure to compute an approximate solution as follows.
1 minimization A way to render (17) more tractably is to regularize the highly discontinuous 0 -norm, replacing it with a continuous and convex approximation. Therefore we convexify the objective function with the weighted 1 -norm and come to a new minimization problem

min r s.t.

Vol(r, V, E) { (1), (11), (5), (10)} .

(15)

Note that the geometric positions of internal nodes (i.e., Vint ) and the topological connectivity of internal struts (i.e., Eint ) are ï¬xed rather than variable in the size optimization. We solve the size optimization (15) using the interior-point algorithm provided in [Nocedal and Wright 2006, Chapter 19, Page 568].

4.3

Topology optimization

Let Ë be the solution of the size optimization (15) and Vol = r Vol(Ë, V, E) be the corresponding frame volume. We have obr served that many strut radii obtained by the size optimization reach the lower bound Î· j = max(Î·, lj /Î±). Some of the struts may have negligible inï¬uence on the whole frame structure and would probably be eliminated. This can be achieved by the topology optimization in the following. The solution of the size optimization prompts us to possibly obtain a sparser frame structure without increasing the frame volume. We have observed that one strut vanishes when its radius becomes 0. Thus the number of struts is equal to the number of non-zero strut radii, i.e., |Eint | = rint 0 . Therefore, an 0 sparsity optimization can be formulated to eliminate redundant struts and achieve simplicity of the frame structure. A straightforward idea is to replace the buckling constraint (5) and the printable
Formulation

Reweighted

min
r

Wr

1

= wT r Vol (18)

s.t.

(1), (11), (16), and Vol(r)

where Wr 1 = wT r holds due to the non-negativity of r, and W is a diagonal positive deï¬nite matrix whose diagonal entries are given by the weight vector w.

ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

177:6

â¢

W. Wang et al.

The reweighted 1 -norm minimization (18) can be regarded as a continuous and convex approximation of an 0 -norm optimization problem (17). It is desired that the weights counteract the inï¬uence of the radius magnitude on the 1 penalty. There exists such a possibility of constructing a favorable set of weights based on the solution Ë of the size optimization. Therefore, a weight vector w r can be accordingly designed by wj = 1 Î¾ + (Ëj â Î· j ) r (19)

optimization the radii of frame struts (i.e., r) and the positions of internal nodes (i.e., Vint ) are variables.
â Let (râ , Vint ) be the solution from the geometry optimization (21). If the length of an internal strut vanishes in the phase of geometry optimization, the two corresponding nodes merge into one (i.e., their geometric positions are identical). Figure 5 (Right) shows the cumulative distributions of internal strut lengths, which are computed before and after GeoOpt on the Hanging Ball model. It is seen that the geometry optimization can also remove some redundant nodes in the frame structure.

where Î¾ is a small number (10â7 by default) that provides numerical stability.
Sparse frame solution

Let Ë be the solution of reweighted 1 r minimization (18). Figure 5 (Left) shows the cumulative distributions of strut radius before and after TopOpt on the Hanging Ball model. It is seen that the solution obtained from the topology optimization clearly reï¬ects the simplicity of the frame structure. So we eliminate redundant internal struts indicated by Ë and reduce the r set of struts inside the skin as Ë Eint = {ej â Eint | rj Ë Î¶} , (20)

Ultimately, we get an optimized frame structure T â in which Vâ = â Ë Ë Vskin âª Vint is the positions of frame nodes, E â = E = Eskin âª Eint â is the set of frame struts, and r is the vector of strut radii.

4.5

Self-supporting extension for extrusion-type 3D printers

where the threshold Î¶ is set to 10â5 mm in our implementation.

For powder-type 3D printers, the frame structure can be printed due to supporting material. However, for extrusion-type 3D printers which do not have the supporting material during the printing process, extra supporting struts should be added for printability. To this end, we propose a scheme to resolve it by adding some extra struts to make the frame printable for such printers.

We deï¬ne a metric function p(Î¸) as the maximum length of a printable strut e, with a certain range of radius, which has an angle of Î¸ â [0, Ï/2] to the vertical direction. That is, e is self-supporting printable if its length is less than p(Î¸). The function p(Î¸) is estimated experimentally as shown in the ï¬gure on the right. The vertical component of deformation of the strut e = vi1 vi2 is given as dz = (0, 0, 1) Â· (di2 â di1 ), e (22)

Figure 5: Distributions of strut radii and lengths before and after topology optimization and geometry optimization on the HangingBall model shown in Figure 4. Left: the cumulative distributions of strut radii before and after topology optimization. Right: the cumulative distributions of internal strut lengths before and after geometry optimization.

where node vi1 lies below node vi2 . The algorithm for generating self-supporting frame by adding extra struts for extrusion-type 3D printers is given as Algorithm 2. Algorithm 2 Self-supporting extension for extrusion-type printers Input: a frame T â = (V â , E â ) generated by Algorithm 1 Output: a self-supporting frame T (s) 1: Let V (s) = V â and E (s) = E â , and deï¬ne a base plane B for the input frame. 2: For each ej â E â , compute its length lj and vertical angle Î¸j . lj if p(Î¸j ) < lj , let m(ej ) = p(Î¸j ) â 1 and insert equidistant nodes vk , k = 1, Â· Â· Â· , m(ej ), on the strut ej . for k = 1, Â· Â· Â· , m(ej ) Find a closest node vk â V (s) âª B, which lies below vk such that the new strut ek = vk vk is self-supporting printable. Update the frame by setting V (s) = V (s) âª{vk } and E (s) = E (s) âª {ek }. endfor endif 3: Call the size optimization with dz 0 added for each e â e E (s) to the constraints and obtain the optimized radius vector r(s) . Output a self-supporting frame T (s) with its strut radii r(s) .

4.4

Geometry optimization

In our multi-objective programming, the goal of minimizing the volume Vol(r, V, E) has the higher priority. The geometric positions of internal nodes and the radii of struts are reï¬ned by the following geometry optimization (GeoOpt in short):
r,Vint

min s.t.

Ë Vol(r, V, E) { (1), (11), (5), (10)}

(21)

where the topological connectivity of the frame structure is ï¬xed Ë Ë Ë as E = Eskin âª Eint and the reduced set of internal struts Eint is obtained from the topology optimization. We solve the geometry optimization (21) using the interior-point algorithm in [Nocedal and Wright 2006, Chapter 19]. Note that in the phase of geometry

ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

Cost-effective Printing of 3D Objects with Skin-Frame Structures

â¢

177:7

4.6

Implementation details

Some models have thin parts like the Shell model in Figure 10. If the thickness of the thin part is very small, we connect the nodes on M 1 directly to create the frame without sampling internal nodes inside the solid volume of M 1 . Some models have even thinner structures like the arms and legs of Bananaman (Figure 10) which reach approximately the minimum printable size. We regard them as solid layers or struts in the optimization.
Thin structures

For models with ï¬ne geometric details, we perform preprocessing by over-smoothing [Taubin 1995] them in our implementation. If some parts of the smoothed surface M lie outside the input surface M , we project those vertices onto M and perform a local remeshing to guarantee that M is inside M as a whole. We then regard the smoothed surface M as the input object mesh and apply our algorithm on it. An example, the Buddha Head model, is shown in Figure 6. At this point, the volume between the original surface and the smoothed one is considered as part of the skin layer.
Fine details

We have applied our algorithm on a number of 3D models (also see the accompanying video). Our algorithm starts with an initial frame of the input model and obtains the ï¬nal result by running in turn the topology optimization and the geometry optimization until the reduction of frame volume is less than 1%. In our experiments, the algorithm needs only 1 iteration to obtain the ï¬nal results. It takes about 40 minutes to compute the ï¬nal frame for a model with an initial frame of 500 nodes and 3000 struts. The manufacturing time is about 27 hours on average to print altogether 4 models of 200mm in height using the P-1 printer. With P-2, it takes about 5 hours on average to print a model of 150mm in height.
Performance

(a) Figure 6: For the Buddha Head model (left) with ï¬ne geometric details, we over-smooth the mesh and ensure that the smoothed mesh (middle) lies inside the original surface by local modiï¬cation. Then our algorithm is applied on it to produce a skin-frame for printing. The resulting frame (right) is rendered with a transparent skin.

(b)

(c)

Figure 7: The Hanging-Ball model in the lower row has a smaller base than the one in the upper row. The struts in (a) are coded with the same color bar in Figure 4. For the model with a smaller base, our algorithm produces thicker struts on the vertical pillar in the right part than the counterparts in the upper row due to the balancing constraint (8). Photos of the printed naked frame and the printed objects using P-1 are shown in (b) and (c), respectively.

5

Experimental results

5.1

Results and discussions

We test our algorithm and fabricate the objects using both powder-type and extrusion-type 3D printers. The powder-type printer we use is the Sinterstation HiQTM SLS (P1) with tray size 457mm Ã 380mm Ã 330mm [3DSystems 2012]. For P-1 printer, we practically made holes with diameters about 20mm on the models. Then the internal powder can be removed by gently shaking the printed objects. The extrusion-type printer we use is the MakerBot ReplicatorTM 2 (P-2) with tray size 225mm Ã 145mm Ã 150mm [Makerbot 2012]. For P-2 printer, we need to manually remove only the external supporting struts that lie outside the printed models.
System conï¬gurations

Figure 7 shows two Hanging-Ball models with different sizes of bases printed using the powder-based printer P-1. If the strut radii are set uniformly, the model with the smaller base is too front-heavy and cannot stand erect. As we consider self-balance as a constraint in the optimization, using our algorithm, many of the struts on its vertical pillar will become much thicker. More models processed by our algorithm and then printed using P-1 are shown in Figure 8. For the extrusion-type printer P-2, we need to call the selfsupporting extension scheme (Algorithm 2) to create extra struts, as shown in Figure 9. With the help of extra struts, both the frame and the skin-frame can be correctly printed using P-2. The ï¬nal printed models by removing the external supporting struts can be seen in the accompanying video. Table 2 shows the statistics of all examples produced by our algorithm. âRatioâ denotes the ratio of the total volume (i.e., the sum of frame volume and skin volume) to the solid volume. The material savings is about 70% (even up to 92.1% for the Buddha-Head model) with respect to the solid printing. It shows that the number of struts has been reduced between 30% (Shell) and 60% (Hanging-Ball) during the optimizations. Thus we can see that our topology optimization can eliminate redundant struts and identify primary struts from the volume constraint for the whole frame. Note that the geometry optimization can also, to some extent, remove redundant internal nodes in the frame.
Statistics

Table 1 shows the parameters and properties of materials used in printing the models by both printers. The upper bound for internal strut radius is set to Î· = 5mm and the upper bound of deï¬ection is = 0.05mm for both printers.
Material properties and parameters

Printer P-1 P-2

Î· 0.5 0.4

Material PA plastic PLA

Î³ 1586 2673

Âµ 1387 1533

Ï 43 92

Ï 48 52

Î± 60 60

Table 1: The parameters and properties of printing materials for each of the printers. The unit of minimum printable radius Î· is mm. Units of Î³, Âµ, Ï, and Ï , are MPa (Mega Pascals). The slenderness ratio Î± is dimensionless.

ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

177:8

â¢

W. Wang et al.

(a)

(b)

(c)

(d)

Figure 8: Printed objects using powder-type printers (P-1) produced by our algorithm. From left to right: Fighter, TV-Alien, Fishing-Frog, and Buddha-Head. The upper row shows the rendering results with half skin and half frame. The lower row shows photos of printed objects. The largest edge length of bounding box of each object is 200mm. A small red drawing pin is put beside each object as a size reference. Model Horse (Fig. 1) Hanging-Ball (Fig. 4) Fighter (Fig. 8) TV-Alien (Fig. 8) Fishing-Frog (Fig. 8) Buddha-Head (Fig. 8) Shell (Fig. 10) Bananaman (Fig. 10) Solid Vol. (104 mm3 ) 51.361 81.653 12.839 12.880 32.317 164.030 25.977 23.530 #Nodes / #Struts TopOpt GeoOpt 689 / 1913 604 / 1828 380 / 884 266 / 770 598 / 1598 503 / 1503 464 / 1282 412 / 1230 720 / 1952 616 / 1848 575 / 1369 400 / 1194 414 / 1236 414 / 1236 462 / 1222 407 / 1167 Frame Vol. (104 mm3 ) 2.233 2.875 2.498 1.718 2.812 3.827 4.106 1.930 Total Vol. (104 mm3 ) 7.717 9.475 4.119 2.944 5.231 12.940 8.754 6.073 Ratio 15.0% 11.6% 32.1% 22.9% 16.2% 7.9% 33.7% 25.8% Weight (Gram) 90.5 109.3 48.5 34.8 61.1 149.9 103.7 72.1

Initial 689 / 3167 380 / 1949 598 / 2945 464 / 2243 720 / 3365 575 / 2642 414 / 1791 462 / 2002

Table 2: Statistics of applying our algorithm to various models shown in the paper. The numbers of nodes and struts are shown for Initialization, TopOpt, and GeoOpt, respectively. Solid Vol. denotes the volume of the solid object. Frame Vol. denotes the volume of the optimized frame struts. Total Vol. denotes the sum of frame volume and skin volume. Ratio denotes the ratio of Total Volume to Solid Volume. Weight denotes the actual weight of the printed object using P-1 with PA plastic material, whose density is 1.15Gram/cm3 .

5.2

Comparisons

Although the approach of [Stava et al. 2012] strengthens fragile objects by local thickening and strut addition, it cannot always reduce the volume of printing material. Figure 10 (left) shows that two external struts were added in the Shell model (upper row) and one external strut was added in the Bananaman model (lower row) using their approach. The frame results produced by our algorithm are stiff enough to sustain themselves without adding any external struts, and thus have no visual impact on the appearance of the objects. The volumes of Shell and Bananaman by their approach are 25.977e4 and 23.530e4 mm3 , respectively, without adding the volume of external struts. The volumes of our produced results are 8.754e4 and 6.073e4 mm3 for these two models, respectively.
Comparison to [Stava et al. 2012]

ical properties of the frame structure, the thin skin layer reinforced with the frame structure is strong and stiff. The printed objects obtained by our algorithm are rigid with a rather small mass. Figure 11 demonstrates the comparison on the strength and stiffness of the two objects produced by the naive hollowing method and our algorithm with same volumes respectively. If an external load of 20N acts on the objects (with different directions), the illustration shows that the object produced by our algorithm has smaller deformation. Furthermore, the self-balancing property is one of the major advantages of our method. Usually, uniformly hollowed objects are not stable, since the hollowing method does not take self-balance into account. Some comparison examples (the Horse and the HangingBall) are shown in the accompanying video. For the purpose of topology optimization, the approach of [Smith et al. 2002] used a greedy strategy (called the topology-cleaning step) to eliminate beams that are exerting little force and merged any
Comparison to greedy strategy of topology cleaning

We compare our algorithm with the hollowing method. Thanks to the excellent mechanComparison to the hollowing method

ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

Cost-effective Printing of 3D Objects with Skin-Frame Structures

â¢

177:9

1 0.9 0.8 0.7 0.6 0.5 0.4 0.3 0.2 0.1 0 0

0.1

0.2

0.3

0.4

0.5

0.6

0.7

0.8

0.9

1

(a)

(b)

(c)

(d)

Figure 11: Deformation maps on the Buddha-Head models by the naive hollowing method (a,c) and our algorithm (b,d) under an external load of 20N. The models produced by the naive hollowing method (thickness of 1.30 mm) and ours have the same material volume (12.940e4 mm3 ), and are shown with a color visualization of the deï¬ection displacements of their vertices.

(a)

(b)

Figure 9: Printed objects using extrusion-type printers (P-2) produced by Algorithm 2. The ï¬rst row shows the rendered images of the frame structures. The extra supporting struts are shown in red. With the extra struts, both the frame (the second row) and the skinframe (the third row) can be correctly printed using P-2. The ï¬nal printed models with the external supporting struts removed can be seen in the accompanying video.

(c)

(d)

(e)

Figure 12: The effect of applying the greedy topology-cleaning to (a) the initial frame of Hanging-Ball model. Two very close thresholds 0.501mm and 0.5001mm for greedy topology-cleaning (b) lead to very different results. The ï¬rst threshold (c) retains 56 internal struts such that the model has no feasible solution in the geometry optimization while the second threshold (d) retains 552 internal struts to reach a solution with the frame volume of 3.389e4 mm3 . In contrast, the ï¬nal frame produced by our algorithm (e) has a volume of 2.875e4 mm3 with only 52 internal struts.

Figure 10: Left: results produced by the method of [Stava et al. 2012] by adding external struts; Middle: the skin-frame produced by our algorithm (with half-naked rendering); Right: printed objects of our results using P-1 printers.

pairs of joints that are connected to one another by a beam that is at the minimum allowable length. The greedy strategy of topology cleaning needs to choose a threshold to remove the redundant struts whose radii are mostly around Î·. A small threshold value may keep too many redundant struts and thus it cannot achieve the purpose of saving material, while a large threshold value may remove a dominant set of internal struts and result in no feasible solution, i.e., the remaining struts with all allowable radii cannot meet the constraints of the problem. Thus the greedy method is unstable and sensitive to the selected thickness threshold and it is very difï¬cult for users to choose an appropriate threshold. The effect of applying this greedy strategy is illustrated in Figure 12. Instead of the greedy topologycleaning, we achieve the topology optimization by approximately solving an 0 sparsity problem which can globally optimize the simplicity of the frame structure. Obviously, our topology optimization is more convincing, and can automatically eliminate the redundant struts in the frame structure while keeping smaller volume.

ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

177:10

â¢

W. Wang et al.

6

Conclusions and Future Work

In this work, we propose an automatic and practical method to generating a skin-frame structure for a given 3D model for the purpose of minimizing the material used in printing it and the number of struts in the structure. The frame structure generated by our algorithm, which is geometrically approximate to the shape of input model, is guaranteed to be physically stable and printable. For extrusion-type printers, we also develop a scheme to add extra struts to support the printed object during the printing process. A number of experimental results have shown the applicability and practicability of our proposed method and have proved our solution to be much more cost-effective than previous methods. Our research opens many directions for future studies. First, although the computational cost of our optimization is much less than the printing time, users might want to design and manipulate the frame structure at an interactive rate. There is much potential in speeding up our algorithm based on advanced optimization techniques. Second, we only consider small objects so that the frame can be designed and printed as a whole. For large objects which exceed the tray size of the printer, segmentation of the objects is required [Luo et al. 2012]. Assembling parts of various frame structures while maintaining its strength and stiffness appears to be possible but would be challenging. Third, the extrusion-based printers are becoming more popular and adding extra supporting structure is necessary for printing many objects with these low-end printers. Study on how to choose the upright printing direction and how to design frame structures with the least extra supporting structure for practical printability is an intriguing direction for future research.
Limitation and future work

C HEN , D., L EVIN , D. I. W., D IDYK , P., S ITTHI -A MORN , P., AND M ATUSIK , W. 2013. Spec2Fab: a reducer-tuner model for translating speciï¬cations to 3D prints. ACM Trans. Graph. (Proc. SIGGRAPH) 32, 4, 135:1â135:10. C HEN , Y. 2007. 3D texture mapping for rapid manufacturing. Computer-Aided Design and Applications 4, 6, 761â771. C HENG , G. 1995. Some aspects of truss topology optimization. Structural Optimization 10, 3-4, 173â179. G IBSON , L. J., AND A SHBY, M. F. 1999. Cellular Solids: Structure and Properties, 2nd ed. Cambridge University Press. H UGHES , T. J. R. 1987. The Finite Element Method: Linear Static and Dynamic Finite Element Analysis. Prentice-Hall. K IRSCH , U. 1989. Optimal topologies of structures. Applied Mechanics Reviews 42, 223â238. L UO , L., BARAN , I., RUSINKIEWICZ , S., AND M ATUSIK , W. 2012. Chopper: partitioning models into 3D-printable parts. ACM Trans. Graph. (Proc. SIGGRAPH Asia) 31, 6, 129:1â9. M AKERBOT, 2012. Rapid prototyping and 3D printing. http: //www.makerbot.com/. N OCEDAL , J., AND W RIGHT, S. 2006. Numerical Optimization, 2nd ed. Springer. Â´ P R E VOST, R., W HITING , E., L EFEBVRE , S., AND S ORKINE H ORNUNG , O. 2013. Make it stand: balancing shapes for 3D fabrication. ACM Trans. Graph. (Proc. SIGGRAPH) 32, 4, 81:1â 81:10. R AJEEV, S., AND K RISHNAMOORTHY, C. 1997. Genetic algorithms-based methodologies for design optimization of trusses. Journal of Structural Engineering 123, 3, 350â358. ROSEN , D. W., J OHNSTON , S. R., AND R EED , M. 2006. Design of general lattice structures for lightweight and compliance applications. In Proc. Rapid Manufacturing Conference, 1â14. S HAPEWAYS, 2012. Tutorial: How to hollow objects for 3D printing. http://www.shapeways.com/tutorials/ creating-hollow-objects.html. S MITH , J., H ODGINS , J., O PPENHEIM , I., AND W ITKIN , A. 2002. Creating models of truss structures with optimization. ACM Trans. Graph. (Proc. SIGGRAPH) 21, 3, 295â301. Ë S TAVA , O., VANEK , J., B ENES , B., C ARR , N., AND M E CH , R. 2012. Stress relief: improving structural strength of 3D printable objects. ACM Trans. Graph. (Proc. SIGGRAPH) 31, 4, 48:1â11. TAUBIN , G. 1995. A signal processing approach to fair surface design. In Proc. SIGGRAPH, 351â358. WANG , H., AND ROSEN , D. W. 2002. Parametric modeling method for truss structures. In Proc. ASME Design Engineering Technical Conferences, ASME, NY, USA, 759â767. WANG , H., C HEN , Y., AND ROSEN , D. W. 2005. A hybrid geometric modeling method for large scale conformal cellular structures. In Proc. ASME Design Engineering Technical Conferences, ASME, NY, USA, 421â427. Â´ YAN , D.-M., L E VY, B., L IU , Y., S UN , F., AND WANG , W. 2009. Isotropic remeshing with fast and exact computation of restricted voronoi diagram. Computer Graphics Forum 28, 5, 1445â1454. Z HOU , Q., PANETTA , J., AND Z ORIN , D. 2013. Worst-case structural analysis. ACM Trans. Graph. (Proc. SIGGRAPH) 32, 4, 137:1â137:12.

Acknowledgements
We would like to thank the anonymous reviewers for their constructive comments. The work is supported by the 973 Program 2011CB302400, the NSF of China (Nos. 11031007, 11171322, 61173102 and 61222206), One Hundred Talent Project of the Chinese Academy of Sciences, the 111 Project (No. b07033) and Program for New Century Excellent Talents in University (No. NCET11-0881).

References
3DS YSTEMS, 2012. Desktop 3D printer. 3dsystems.com. http://www.

A RYA , S., M OUNT, D. M., N ETANYAHU , N. S., S ILVERMAN , R., AND W U , A. Y. 1998. An optimal algorithm for approximate nearest neighbor searching ï¬xed dimensions. Journal of the ACM 45, 6, 891â923. Â¨ B ACHER , M., B ICKEL , B., JAMES , D. L., AND P FISTER , H. 2012. Fabricating articulated characters from skinned meshes. ACM Trans. Graph. (Proc. SIGGRAPH) 31, 4, 47:1â9. B ENDSÃE , M. P., AND S IGMUND , O. 2003. Topology optimization: theory, methods and applications. Springer Verlag. B ENDSÃE , M. P., B EN -TAL , A., AND Z OWE , J. 1994. Optimization methods for truss geometry and topology design. Structural Optimization 7, 3, 141â159. C AL`, J., C ALIAN , D., A MATI , C., K LEINBERGER , R., S TEED , I A., K AUTZ , J., AND W EYRICH , T. 2012. 3D-printing of nonassembly, articulated models. ACM Trans. Graph. (Proc. SIGGRAPH Asia) 31, 6, 130:1â8.

ACM Transactions on Graphics, Vol. 32, No. 6, Article 177, Publication Date: November 2013

